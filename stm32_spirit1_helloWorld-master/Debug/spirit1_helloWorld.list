
spirit1_helloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e88  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08007010  08007010  00017010  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007210  08007210  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08007210  08007210  00017210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007218  08007218  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007218  08007218  00017218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800721c  0800721c  0001721c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08007220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  20000014  08007234  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000130  08007234  00020130  2**0
                  ALLOC
 11 .ARM.attributes 0000002f  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020043  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001382a  00000000  00000000  00020086  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000034a2  00000000  00000000  000338b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001388  00000000  00000000  00036d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ebb  00000000  00000000  000380e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029477  00000000  00000000  00038f9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00015c88  00000000  00000000  00062412  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8c02  00000000  00000000  0007809a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000515c  00000000  00000000  00170c9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000098  00000000  00000000  00175df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000014 	.word	0x20000014
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006ff8 	.word	0x08006ff8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000018 	.word	0x20000018
 80001c4:	08006ff8 	.word	0x08006ff8

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2uiz>:
 8000964:	004a      	lsls	r2, r1, #1
 8000966:	d211      	bcs.n	800098c <__aeabi_d2uiz+0x28>
 8000968:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800096c:	d211      	bcs.n	8000992 <__aeabi_d2uiz+0x2e>
 800096e:	d50d      	bpl.n	800098c <__aeabi_d2uiz+0x28>
 8000970:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000974:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000978:	d40e      	bmi.n	8000998 <__aeabi_d2uiz+0x34>
 800097a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800097e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000982:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000986:	fa23 f002 	lsr.w	r0, r3, r2
 800098a:	4770      	bx	lr
 800098c:	f04f 0000 	mov.w	r0, #0
 8000990:	4770      	bx	lr
 8000992:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000996:	d102      	bne.n	800099e <__aeabi_d2uiz+0x3a>
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	4770      	bx	lr
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	4770      	bx	lr

080009a4 <__aeabi_frsub>:
 80009a4:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 80009a8:	e002      	b.n	80009b0 <__addsf3>
 80009aa:	bf00      	nop

080009ac <__aeabi_fsub>:
 80009ac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080009b0 <__addsf3>:
 80009b0:	0042      	lsls	r2, r0, #1
 80009b2:	bf1f      	itttt	ne
 80009b4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009b8:	ea92 0f03 	teqne	r2, r3
 80009bc:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009c0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009c4:	d06a      	beq.n	8000a9c <__addsf3+0xec>
 80009c6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009ca:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009ce:	bfc1      	itttt	gt
 80009d0:	18d2      	addgt	r2, r2, r3
 80009d2:	4041      	eorgt	r1, r0
 80009d4:	4048      	eorgt	r0, r1
 80009d6:	4041      	eorgt	r1, r0
 80009d8:	bfb8      	it	lt
 80009da:	425b      	neglt	r3, r3
 80009dc:	2b19      	cmp	r3, #25
 80009de:	bf88      	it	hi
 80009e0:	4770      	bxhi	lr
 80009e2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009e6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009ee:	bf18      	it	ne
 80009f0:	4240      	negne	r0, r0
 80009f2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009f6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009fa:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009fe:	bf18      	it	ne
 8000a00:	4249      	negne	r1, r1
 8000a02:	ea92 0f03 	teq	r2, r3
 8000a06:	d03f      	beq.n	8000a88 <__addsf3+0xd8>
 8000a08:	f1a2 0201 	sub.w	r2, r2, #1
 8000a0c:	fa41 fc03 	asr.w	ip, r1, r3
 8000a10:	eb10 000c 	adds.w	r0, r0, ip
 8000a14:	f1c3 0320 	rsb	r3, r3, #32
 8000a18:	fa01 f103 	lsl.w	r1, r1, r3
 8000a1c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000a20:	d502      	bpl.n	8000a28 <__addsf3+0x78>
 8000a22:	4249      	negs	r1, r1
 8000a24:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a28:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a2c:	d313      	bcc.n	8000a56 <__addsf3+0xa6>
 8000a2e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a32:	d306      	bcc.n	8000a42 <__addsf3+0x92>
 8000a34:	0840      	lsrs	r0, r0, #1
 8000a36:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a3a:	f102 0201 	add.w	r2, r2, #1
 8000a3e:	2afe      	cmp	r2, #254	; 0xfe
 8000a40:	d251      	bcs.n	8000ae6 <__addsf3+0x136>
 8000a42:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a46:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a4a:	bf08      	it	eq
 8000a4c:	f020 0001 	biceq.w	r0, r0, #1
 8000a50:	ea40 0003 	orr.w	r0, r0, r3
 8000a54:	4770      	bx	lr
 8000a56:	0049      	lsls	r1, r1, #1
 8000a58:	eb40 0000 	adc.w	r0, r0, r0
 8000a5c:	3a01      	subs	r2, #1
 8000a5e:	bf28      	it	cs
 8000a60:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a64:	d2ed      	bcs.n	8000a42 <__addsf3+0x92>
 8000a66:	fab0 fc80 	clz	ip, r0
 8000a6a:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a6e:	ebb2 020c 	subs.w	r2, r2, ip
 8000a72:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a76:	bfaa      	itet	ge
 8000a78:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a7c:	4252      	neglt	r2, r2
 8000a7e:	4318      	orrge	r0, r3
 8000a80:	bfbc      	itt	lt
 8000a82:	40d0      	lsrlt	r0, r2
 8000a84:	4318      	orrlt	r0, r3
 8000a86:	4770      	bx	lr
 8000a88:	f092 0f00 	teq	r2, #0
 8000a8c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a90:	bf06      	itte	eq
 8000a92:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a96:	3201      	addeq	r2, #1
 8000a98:	3b01      	subne	r3, #1
 8000a9a:	e7b5      	b.n	8000a08 <__addsf3+0x58>
 8000a9c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000aa0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000aa4:	bf18      	it	ne
 8000aa6:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aaa:	d021      	beq.n	8000af0 <__addsf3+0x140>
 8000aac:	ea92 0f03 	teq	r2, r3
 8000ab0:	d004      	beq.n	8000abc <__addsf3+0x10c>
 8000ab2:	f092 0f00 	teq	r2, #0
 8000ab6:	bf08      	it	eq
 8000ab8:	4608      	moveq	r0, r1
 8000aba:	4770      	bx	lr
 8000abc:	ea90 0f01 	teq	r0, r1
 8000ac0:	bf1c      	itt	ne
 8000ac2:	2000      	movne	r0, #0
 8000ac4:	4770      	bxne	lr
 8000ac6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aca:	d104      	bne.n	8000ad6 <__addsf3+0x126>
 8000acc:	0040      	lsls	r0, r0, #1
 8000ace:	bf28      	it	cs
 8000ad0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000ad4:	4770      	bx	lr
 8000ad6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ada:	bf3c      	itt	cc
 8000adc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ae0:	4770      	bxcc	lr
 8000ae2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ae6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aea:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aee:	4770      	bx	lr
 8000af0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000af4:	bf16      	itet	ne
 8000af6:	4608      	movne	r0, r1
 8000af8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000afc:	4601      	movne	r1, r0
 8000afe:	0242      	lsls	r2, r0, #9
 8000b00:	bf06      	itte	eq
 8000b02:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000b06:	ea90 0f01 	teqeq	r0, r1
 8000b0a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000b0e:	4770      	bx	lr

08000b10 <__aeabi_ui2f>:
 8000b10:	f04f 0300 	mov.w	r3, #0
 8000b14:	e004      	b.n	8000b20 <__aeabi_i2f+0x8>
 8000b16:	bf00      	nop

08000b18 <__aeabi_i2f>:
 8000b18:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000b1c:	bf48      	it	mi
 8000b1e:	4240      	negmi	r0, r0
 8000b20:	ea5f 0c00 	movs.w	ip, r0
 8000b24:	bf08      	it	eq
 8000b26:	4770      	bxeq	lr
 8000b28:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b2c:	4601      	mov	r1, r0
 8000b2e:	f04f 0000 	mov.w	r0, #0
 8000b32:	e01c      	b.n	8000b6e <__aeabi_l2f+0x2a>

08000b34 <__aeabi_ul2f>:
 8000b34:	ea50 0201 	orrs.w	r2, r0, r1
 8000b38:	bf08      	it	eq
 8000b3a:	4770      	bxeq	lr
 8000b3c:	f04f 0300 	mov.w	r3, #0
 8000b40:	e00a      	b.n	8000b58 <__aeabi_l2f+0x14>
 8000b42:	bf00      	nop

08000b44 <__aeabi_l2f>:
 8000b44:	ea50 0201 	orrs.w	r2, r0, r1
 8000b48:	bf08      	it	eq
 8000b4a:	4770      	bxeq	lr
 8000b4c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b50:	d502      	bpl.n	8000b58 <__aeabi_l2f+0x14>
 8000b52:	4240      	negs	r0, r0
 8000b54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b58:	ea5f 0c01 	movs.w	ip, r1
 8000b5c:	bf02      	ittt	eq
 8000b5e:	4684      	moveq	ip, r0
 8000b60:	4601      	moveq	r1, r0
 8000b62:	2000      	moveq	r0, #0
 8000b64:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b68:	bf08      	it	eq
 8000b6a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b6e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b72:	fabc f28c 	clz	r2, ip
 8000b76:	3a08      	subs	r2, #8
 8000b78:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b7c:	db10      	blt.n	8000ba0 <__aeabi_l2f+0x5c>
 8000b7e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b82:	4463      	add	r3, ip
 8000b84:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b88:	f1c2 0220 	rsb	r2, r2, #32
 8000b8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b90:	fa20 f202 	lsr.w	r2, r0, r2
 8000b94:	eb43 0002 	adc.w	r0, r3, r2
 8000b98:	bf08      	it	eq
 8000b9a:	f020 0001 	biceq.w	r0, r0, #1
 8000b9e:	4770      	bx	lr
 8000ba0:	f102 0220 	add.w	r2, r2, #32
 8000ba4:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ba8:	f1c2 0220 	rsb	r2, r2, #32
 8000bac:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000bb0:	fa21 f202 	lsr.w	r2, r1, r2
 8000bb4:	eb43 0002 	adc.w	r0, r3, r2
 8000bb8:	bf08      	it	eq
 8000bba:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000bbe:	4770      	bx	lr

08000bc0 <__aeabi_fmul>:
 8000bc0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000bc4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bc8:	bf1e      	ittt	ne
 8000bca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bce:	ea92 0f0c 	teqne	r2, ip
 8000bd2:	ea93 0f0c 	teqne	r3, ip
 8000bd6:	d06f      	beq.n	8000cb8 <__aeabi_fmul+0xf8>
 8000bd8:	441a      	add	r2, r3
 8000bda:	ea80 0c01 	eor.w	ip, r0, r1
 8000bde:	0240      	lsls	r0, r0, #9
 8000be0:	bf18      	it	ne
 8000be2:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000be6:	d01e      	beq.n	8000c26 <__aeabi_fmul+0x66>
 8000be8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bec:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bf0:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bf4:	fba0 3101 	umull	r3, r1, r0, r1
 8000bf8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bfc:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000c00:	bf3e      	ittt	cc
 8000c02:	0049      	lslcc	r1, r1, #1
 8000c04:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000c08:	005b      	lslcc	r3, r3, #1
 8000c0a:	ea40 0001 	orr.w	r0, r0, r1
 8000c0e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000c12:	2afd      	cmp	r2, #253	; 0xfd
 8000c14:	d81d      	bhi.n	8000c52 <__aeabi_fmul+0x92>
 8000c16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000c1a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c1e:	bf08      	it	eq
 8000c20:	f020 0001 	biceq.w	r0, r0, #1
 8000c24:	4770      	bx	lr
 8000c26:	f090 0f00 	teq	r0, #0
 8000c2a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c2e:	bf08      	it	eq
 8000c30:	0249      	lsleq	r1, r1, #9
 8000c32:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c36:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c3a:	3a7f      	subs	r2, #127	; 0x7f
 8000c3c:	bfc2      	ittt	gt
 8000c3e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c42:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c46:	4770      	bxgt	lr
 8000c48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c4c:	f04f 0300 	mov.w	r3, #0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	dc5d      	bgt.n	8000d10 <__aeabi_fmul+0x150>
 8000c54:	f112 0f19 	cmn.w	r2, #25
 8000c58:	bfdc      	itt	le
 8000c5a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c5e:	4770      	bxle	lr
 8000c60:	f1c2 0200 	rsb	r2, r2, #0
 8000c64:	0041      	lsls	r1, r0, #1
 8000c66:	fa21 f102 	lsr.w	r1, r1, r2
 8000c6a:	f1c2 0220 	rsb	r2, r2, #32
 8000c6e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c72:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c76:	f140 0000 	adc.w	r0, r0, #0
 8000c7a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c7e:	bf08      	it	eq
 8000c80:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c84:	4770      	bx	lr
 8000c86:	f092 0f00 	teq	r2, #0
 8000c8a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0040      	lsleq	r0, r0, #1
 8000c92:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c96:	3a01      	subeq	r2, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xce>
 8000c9a:	ea40 000c 	orr.w	r0, r0, ip
 8000c9e:	f093 0f00 	teq	r3, #0
 8000ca2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ca6:	bf02      	ittt	eq
 8000ca8:	0049      	lsleq	r1, r1, #1
 8000caa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000cae:	3b01      	subeq	r3, #1
 8000cb0:	d0f9      	beq.n	8000ca6 <__aeabi_fmul+0xe6>
 8000cb2:	ea41 010c 	orr.w	r1, r1, ip
 8000cb6:	e78f      	b.n	8000bd8 <__aeabi_fmul+0x18>
 8000cb8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000cbc:	ea92 0f0c 	teq	r2, ip
 8000cc0:	bf18      	it	ne
 8000cc2:	ea93 0f0c 	teqne	r3, ip
 8000cc6:	d00a      	beq.n	8000cde <__aeabi_fmul+0x11e>
 8000cc8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ccc:	bf18      	it	ne
 8000cce:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000cd2:	d1d8      	bne.n	8000c86 <__aeabi_fmul+0xc6>
 8000cd4:	ea80 0001 	eor.w	r0, r0, r1
 8000cd8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cdc:	4770      	bx	lr
 8000cde:	f090 0f00 	teq	r0, #0
 8000ce2:	bf17      	itett	ne
 8000ce4:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000ce8:	4608      	moveq	r0, r1
 8000cea:	f091 0f00 	teqne	r1, #0
 8000cee:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cf2:	d014      	beq.n	8000d1e <__aeabi_fmul+0x15e>
 8000cf4:	ea92 0f0c 	teq	r2, ip
 8000cf8:	d101      	bne.n	8000cfe <__aeabi_fmul+0x13e>
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	d10f      	bne.n	8000d1e <__aeabi_fmul+0x15e>
 8000cfe:	ea93 0f0c 	teq	r3, ip
 8000d02:	d103      	bne.n	8000d0c <__aeabi_fmul+0x14c>
 8000d04:	024b      	lsls	r3, r1, #9
 8000d06:	bf18      	it	ne
 8000d08:	4608      	movne	r0, r1
 8000d0a:	d108      	bne.n	8000d1e <__aeabi_fmul+0x15e>
 8000d0c:	ea80 0001 	eor.w	r0, r0, r1
 8000d10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000d14:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d18:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d1c:	4770      	bx	lr
 8000d1e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000d22:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_fdiv>:
 8000d28:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d2c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d30:	bf1e      	ittt	ne
 8000d32:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d36:	ea92 0f0c 	teqne	r2, ip
 8000d3a:	ea93 0f0c 	teqne	r3, ip
 8000d3e:	d069      	beq.n	8000e14 <__aeabi_fdiv+0xec>
 8000d40:	eba2 0203 	sub.w	r2, r2, r3
 8000d44:	ea80 0c01 	eor.w	ip, r0, r1
 8000d48:	0249      	lsls	r1, r1, #9
 8000d4a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d4e:	d037      	beq.n	8000dc0 <__aeabi_fdiv+0x98>
 8000d50:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d54:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d58:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d5c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d60:	428b      	cmp	r3, r1
 8000d62:	bf38      	it	cc
 8000d64:	005b      	lslcc	r3, r3, #1
 8000d66:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d6a:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	bf24      	itt	cs
 8000d72:	1a5b      	subcs	r3, r3, r1
 8000d74:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d78:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d7c:	bf24      	itt	cs
 8000d7e:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d82:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d86:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d8a:	bf24      	itt	cs
 8000d8c:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d90:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d94:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d98:	bf24      	itt	cs
 8000d9a:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d9e:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000da2:	011b      	lsls	r3, r3, #4
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000daa:	d1e0      	bne.n	8000d6e <__aeabi_fdiv+0x46>
 8000dac:	2afd      	cmp	r2, #253	; 0xfd
 8000dae:	f63f af50 	bhi.w	8000c52 <__aeabi_fmul+0x92>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db8:	bf08      	it	eq
 8000dba:	f020 0001 	biceq.w	r0, r0, #1
 8000dbe:	4770      	bx	lr
 8000dc0:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000dc4:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dc8:	327f      	adds	r2, #127	; 0x7f
 8000dca:	bfc2      	ittt	gt
 8000dcc:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000dd0:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dd4:	4770      	bxgt	lr
 8000dd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000dda:	f04f 0300 	mov.w	r3, #0
 8000dde:	3a01      	subs	r2, #1
 8000de0:	e737      	b.n	8000c52 <__aeabi_fmul+0x92>
 8000de2:	f092 0f00 	teq	r2, #0
 8000de6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0040      	lsleq	r0, r0, #1
 8000dee:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000df2:	3a01      	subeq	r2, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xc2>
 8000df6:	ea40 000c 	orr.w	r0, r0, ip
 8000dfa:	f093 0f00 	teq	r3, #0
 8000dfe:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e02:	bf02      	ittt	eq
 8000e04:	0049      	lsleq	r1, r1, #1
 8000e06:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e0a:	3b01      	subeq	r3, #1
 8000e0c:	d0f9      	beq.n	8000e02 <__aeabi_fdiv+0xda>
 8000e0e:	ea41 010c 	orr.w	r1, r1, ip
 8000e12:	e795      	b.n	8000d40 <__aeabi_fdiv+0x18>
 8000e14:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d108      	bne.n	8000e30 <__aeabi_fdiv+0x108>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	f47f af7d 	bne.w	8000d1e <__aeabi_fmul+0x15e>
 8000e24:	ea93 0f0c 	teq	r3, ip
 8000e28:	f47f af70 	bne.w	8000d0c <__aeabi_fmul+0x14c>
 8000e2c:	4608      	mov	r0, r1
 8000e2e:	e776      	b.n	8000d1e <__aeabi_fmul+0x15e>
 8000e30:	ea93 0f0c 	teq	r3, ip
 8000e34:	d104      	bne.n	8000e40 <__aeabi_fdiv+0x118>
 8000e36:	024b      	lsls	r3, r1, #9
 8000e38:	f43f af4c 	beq.w	8000cd4 <__aeabi_fmul+0x114>
 8000e3c:	4608      	mov	r0, r1
 8000e3e:	e76e      	b.n	8000d1e <__aeabi_fmul+0x15e>
 8000e40:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e44:	bf18      	it	ne
 8000e46:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e4a:	d1ca      	bne.n	8000de2 <__aeabi_fdiv+0xba>
 8000e4c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e50:	f47f af5c 	bne.w	8000d0c <__aeabi_fmul+0x14c>
 8000e54:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e58:	f47f af3c 	bne.w	8000cd4 <__aeabi_fmul+0x114>
 8000e5c:	e75f      	b.n	8000d1e <__aeabi_fmul+0x15e>
 8000e5e:	bf00      	nop

08000e60 <__gesf2>:
 8000e60:	f04f 3cff 	mov.w	ip, #4294967295
 8000e64:	e006      	b.n	8000e74 <__cmpsf2+0x4>
 8000e66:	bf00      	nop

08000e68 <__lesf2>:
 8000e68:	f04f 0c01 	mov.w	ip, #1
 8000e6c:	e002      	b.n	8000e74 <__cmpsf2+0x4>
 8000e6e:	bf00      	nop

08000e70 <__cmpsf2>:
 8000e70:	f04f 0c01 	mov.w	ip, #1
 8000e74:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000e78:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e7c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000e80:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000e84:	bf18      	it	ne
 8000e86:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000e8a:	d011      	beq.n	8000eb0 <__cmpsf2+0x40>
 8000e8c:	b001      	add	sp, #4
 8000e8e:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000e92:	bf18      	it	ne
 8000e94:	ea90 0f01 	teqne	r0, r1
 8000e98:	bf58      	it	pl
 8000e9a:	ebb2 0003 	subspl.w	r0, r2, r3
 8000e9e:	bf88      	it	hi
 8000ea0:	17c8      	asrhi	r0, r1, #31
 8000ea2:	bf38      	it	cc
 8000ea4:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ea8:	bf18      	it	ne
 8000eaa:	f040 0001 	orrne.w	r0, r0, #1
 8000eae:	4770      	bx	lr
 8000eb0:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000eb4:	d102      	bne.n	8000ebc <__cmpsf2+0x4c>
 8000eb6:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000eba:	d105      	bne.n	8000ec8 <__cmpsf2+0x58>
 8000ebc:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000ec0:	d1e4      	bne.n	8000e8c <__cmpsf2+0x1c>
 8000ec2:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000ec6:	d0e1      	beq.n	8000e8c <__cmpsf2+0x1c>
 8000ec8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop

08000ed0 <__aeabi_cfrcmple>:
 8000ed0:	4684      	mov	ip, r0
 8000ed2:	4608      	mov	r0, r1
 8000ed4:	4661      	mov	r1, ip
 8000ed6:	e7ff      	b.n	8000ed8 <__aeabi_cfcmpeq>

08000ed8 <__aeabi_cfcmpeq>:
 8000ed8:	b50f      	push	{r0, r1, r2, r3, lr}
 8000eda:	f7ff ffc9 	bl	8000e70 <__cmpsf2>
 8000ede:	2800      	cmp	r0, #0
 8000ee0:	bf48      	it	mi
 8000ee2:	f110 0f00 	cmnmi.w	r0, #0
 8000ee6:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000ee8 <__aeabi_fcmpeq>:
 8000ee8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000eec:	f7ff fff4 	bl	8000ed8 <__aeabi_cfcmpeq>
 8000ef0:	bf0c      	ite	eq
 8000ef2:	2001      	moveq	r0, #1
 8000ef4:	2000      	movne	r0, #0
 8000ef6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000efa:	bf00      	nop

08000efc <__aeabi_fcmplt>:
 8000efc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f00:	f7ff ffea 	bl	8000ed8 <__aeabi_cfcmpeq>
 8000f04:	bf34      	ite	cc
 8000f06:	2001      	movcc	r0, #1
 8000f08:	2000      	movcs	r0, #0
 8000f0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f0e:	bf00      	nop

08000f10 <__aeabi_fcmple>:
 8000f10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f14:	f7ff ffe0 	bl	8000ed8 <__aeabi_cfcmpeq>
 8000f18:	bf94      	ite	ls
 8000f1a:	2001      	movls	r0, #1
 8000f1c:	2000      	movhi	r0, #0
 8000f1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f22:	bf00      	nop

08000f24 <__aeabi_fcmpge>:
 8000f24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f28:	f7ff ffd2 	bl	8000ed0 <__aeabi_cfrcmple>
 8000f2c:	bf94      	ite	ls
 8000f2e:	2001      	movls	r0, #1
 8000f30:	2000      	movhi	r0, #0
 8000f32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f36:	bf00      	nop

08000f38 <__aeabi_fcmpgt>:
 8000f38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000f3c:	f7ff ffc8 	bl	8000ed0 <__aeabi_cfrcmple>
 8000f40:	bf34      	ite	cc
 8000f42:	2001      	movcc	r0, #1
 8000f44:	2000      	movcs	r0, #0
 8000f46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000f4a:	bf00      	nop

08000f4c <__aeabi_f2iz>:
 8000f4c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000f50:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000f54:	d30f      	bcc.n	8000f76 <__aeabi_f2iz+0x2a>
 8000f56:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000f5a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000f5e:	d90d      	bls.n	8000f7c <__aeabi_f2iz+0x30>
 8000f60:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000f64:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000f68:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000f6c:	fa23 f002 	lsr.w	r0, r3, r2
 8000f70:	bf18      	it	ne
 8000f72:	4240      	negne	r0, r0
 8000f74:	4770      	bx	lr
 8000f76:	f04f 0000 	mov.w	r0, #0
 8000f7a:	4770      	bx	lr
 8000f7c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000f80:	d101      	bne.n	8000f86 <__aeabi_f2iz+0x3a>
 8000f82:	0242      	lsls	r2, r0, #9
 8000f84:	d105      	bne.n	8000f92 <__aeabi_f2iz+0x46>
 8000f86:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000f8a:	bf08      	it	eq
 8000f8c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000f90:	4770      	bx	lr
 8000f92:	f04f 0000 	mov.w	r0, #0
 8000f96:	4770      	bx	lr

08000f98 <__aeabi_f2uiz>:
 8000f98:	0042      	lsls	r2, r0, #1
 8000f9a:	d20e      	bcs.n	8000fba <__aeabi_f2uiz+0x22>
 8000f9c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000fa0:	d30b      	bcc.n	8000fba <__aeabi_f2uiz+0x22>
 8000fa2:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000fa6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000faa:	d409      	bmi.n	8000fc0 <__aeabi_f2uiz+0x28>
 8000fac:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000fb4:	fa23 f002 	lsr.w	r0, r3, r2
 8000fb8:	4770      	bx	lr
 8000fba:	f04f 0000 	mov.w	r0, #0
 8000fbe:	4770      	bx	lr
 8000fc0:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000fc4:	d101      	bne.n	8000fca <__aeabi_f2uiz+0x32>
 8000fc6:	0242      	lsls	r2, r0, #9
 8000fc8:	d102      	bne.n	8000fd0 <__aeabi_f2uiz+0x38>
 8000fca:	f04f 30ff 	mov.w	r0, #4294967295
 8000fce:	4770      	bx	lr
 8000fd0:	f04f 0000 	mov.w	r0, #0
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <__aeabi_uldivmod>:
 8000fd8:	b953      	cbnz	r3, 8000ff0 <__aeabi_uldivmod+0x18>
 8000fda:	b94a      	cbnz	r2, 8000ff0 <__aeabi_uldivmod+0x18>
 8000fdc:	2900      	cmp	r1, #0
 8000fde:	bf08      	it	eq
 8000fe0:	2800      	cmpeq	r0, #0
 8000fe2:	bf1c      	itt	ne
 8000fe4:	f04f 31ff 	movne.w	r1, #4294967295
 8000fe8:	f04f 30ff 	movne.w	r0, #4294967295
 8000fec:	f000 b972 	b.w	80012d4 <__aeabi_idiv0>
 8000ff0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ff4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ff8:	f000 f806 	bl	8001008 <__udivmoddi4>
 8000ffc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001000:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001004:	b004      	add	sp, #16
 8001006:	4770      	bx	lr

08001008 <__udivmoddi4>:
 8001008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800100c:	9e08      	ldr	r6, [sp, #32]
 800100e:	460d      	mov	r5, r1
 8001010:	4604      	mov	r4, r0
 8001012:	468e      	mov	lr, r1
 8001014:	2b00      	cmp	r3, #0
 8001016:	d14c      	bne.n	80010b2 <__udivmoddi4+0xaa>
 8001018:	428a      	cmp	r2, r1
 800101a:	4694      	mov	ip, r2
 800101c:	d967      	bls.n	80010ee <__udivmoddi4+0xe6>
 800101e:	fab2 f382 	clz	r3, r2
 8001022:	b153      	cbz	r3, 800103a <__udivmoddi4+0x32>
 8001024:	fa02 fc03 	lsl.w	ip, r2, r3
 8001028:	f1c3 0220 	rsb	r2, r3, #32
 800102c:	fa01 fe03 	lsl.w	lr, r1, r3
 8001030:	fa20 f202 	lsr.w	r2, r0, r2
 8001034:	ea42 0e0e 	orr.w	lr, r2, lr
 8001038:	409c      	lsls	r4, r3
 800103a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800103e:	fbbe f1f7 	udiv	r1, lr, r7
 8001042:	fa1f f58c 	uxth.w	r5, ip
 8001046:	fb07 ee11 	mls	lr, r7, r1, lr
 800104a:	fb01 f005 	mul.w	r0, r1, r5
 800104e:	0c22      	lsrs	r2, r4, #16
 8001050:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8001054:	4290      	cmp	r0, r2
 8001056:	d90a      	bls.n	800106e <__udivmoddi4+0x66>
 8001058:	eb1c 0202 	adds.w	r2, ip, r2
 800105c:	f101 3eff 	add.w	lr, r1, #4294967295
 8001060:	f080 8119 	bcs.w	8001296 <__udivmoddi4+0x28e>
 8001064:	4290      	cmp	r0, r2
 8001066:	f240 8116 	bls.w	8001296 <__udivmoddi4+0x28e>
 800106a:	3902      	subs	r1, #2
 800106c:	4462      	add	r2, ip
 800106e:	1a12      	subs	r2, r2, r0
 8001070:	fbb2 f0f7 	udiv	r0, r2, r7
 8001074:	fb07 2210 	mls	r2, r7, r0, r2
 8001078:	fb00 f505 	mul.w	r5, r0, r5
 800107c:	b2a4      	uxth	r4, r4
 800107e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001082:	42a5      	cmp	r5, r4
 8001084:	d90a      	bls.n	800109c <__udivmoddi4+0x94>
 8001086:	eb1c 0404 	adds.w	r4, ip, r4
 800108a:	f100 32ff 	add.w	r2, r0, #4294967295
 800108e:	f080 8104 	bcs.w	800129a <__udivmoddi4+0x292>
 8001092:	42a5      	cmp	r5, r4
 8001094:	f240 8101 	bls.w	800129a <__udivmoddi4+0x292>
 8001098:	4464      	add	r4, ip
 800109a:	3802      	subs	r0, #2
 800109c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80010a0:	2100      	movs	r1, #0
 80010a2:	1b64      	subs	r4, r4, r5
 80010a4:	b11e      	cbz	r6, 80010ae <__udivmoddi4+0xa6>
 80010a6:	40dc      	lsrs	r4, r3
 80010a8:	2300      	movs	r3, #0
 80010aa:	e9c6 4300 	strd	r4, r3, [r6]
 80010ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010b2:	428b      	cmp	r3, r1
 80010b4:	d908      	bls.n	80010c8 <__udivmoddi4+0xc0>
 80010b6:	2e00      	cmp	r6, #0
 80010b8:	f000 80ea 	beq.w	8001290 <__udivmoddi4+0x288>
 80010bc:	2100      	movs	r1, #0
 80010be:	e9c6 0500 	strd	r0, r5, [r6]
 80010c2:	4608      	mov	r0, r1
 80010c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010c8:	fab3 f183 	clz	r1, r3
 80010cc:	2900      	cmp	r1, #0
 80010ce:	d148      	bne.n	8001162 <__udivmoddi4+0x15a>
 80010d0:	42ab      	cmp	r3, r5
 80010d2:	d302      	bcc.n	80010da <__udivmoddi4+0xd2>
 80010d4:	4282      	cmp	r2, r0
 80010d6:	f200 80f8 	bhi.w	80012ca <__udivmoddi4+0x2c2>
 80010da:	1a84      	subs	r4, r0, r2
 80010dc:	eb65 0203 	sbc.w	r2, r5, r3
 80010e0:	2001      	movs	r0, #1
 80010e2:	4696      	mov	lr, r2
 80010e4:	2e00      	cmp	r6, #0
 80010e6:	d0e2      	beq.n	80010ae <__udivmoddi4+0xa6>
 80010e8:	e9c6 4e00 	strd	r4, lr, [r6]
 80010ec:	e7df      	b.n	80010ae <__udivmoddi4+0xa6>
 80010ee:	b902      	cbnz	r2, 80010f2 <__udivmoddi4+0xea>
 80010f0:	deff      	udf	#255	; 0xff
 80010f2:	fab2 f382 	clz	r3, r2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	f040 808e 	bne.w	8001218 <__udivmoddi4+0x210>
 80010fc:	1a88      	subs	r0, r1, r2
 80010fe:	2101      	movs	r1, #1
 8001100:	0c17      	lsrs	r7, r2, #16
 8001102:	fa1f fe82 	uxth.w	lr, r2
 8001106:	fbb0 f5f7 	udiv	r5, r0, r7
 800110a:	fb07 0015 	mls	r0, r7, r5, r0
 800110e:	0c22      	lsrs	r2, r4, #16
 8001110:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8001114:	fb0e f005 	mul.w	r0, lr, r5
 8001118:	4290      	cmp	r0, r2
 800111a:	d908      	bls.n	800112e <__udivmoddi4+0x126>
 800111c:	eb1c 0202 	adds.w	r2, ip, r2
 8001120:	f105 38ff 	add.w	r8, r5, #4294967295
 8001124:	d202      	bcs.n	800112c <__udivmoddi4+0x124>
 8001126:	4290      	cmp	r0, r2
 8001128:	f200 80cc 	bhi.w	80012c4 <__udivmoddi4+0x2bc>
 800112c:	4645      	mov	r5, r8
 800112e:	1a12      	subs	r2, r2, r0
 8001130:	fbb2 f0f7 	udiv	r0, r2, r7
 8001134:	fb07 2210 	mls	r2, r7, r0, r2
 8001138:	fb0e fe00 	mul.w	lr, lr, r0
 800113c:	b2a4      	uxth	r4, r4
 800113e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001142:	45a6      	cmp	lr, r4
 8001144:	d908      	bls.n	8001158 <__udivmoddi4+0x150>
 8001146:	eb1c 0404 	adds.w	r4, ip, r4
 800114a:	f100 32ff 	add.w	r2, r0, #4294967295
 800114e:	d202      	bcs.n	8001156 <__udivmoddi4+0x14e>
 8001150:	45a6      	cmp	lr, r4
 8001152:	f200 80b4 	bhi.w	80012be <__udivmoddi4+0x2b6>
 8001156:	4610      	mov	r0, r2
 8001158:	eba4 040e 	sub.w	r4, r4, lr
 800115c:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001160:	e7a0      	b.n	80010a4 <__udivmoddi4+0x9c>
 8001162:	f1c1 0720 	rsb	r7, r1, #32
 8001166:	408b      	lsls	r3, r1
 8001168:	fa22 fc07 	lsr.w	ip, r2, r7
 800116c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001170:	fa25 fa07 	lsr.w	sl, r5, r7
 8001174:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001178:	fbba f8f9 	udiv	r8, sl, r9
 800117c:	408d      	lsls	r5, r1
 800117e:	fa20 f307 	lsr.w	r3, r0, r7
 8001182:	fb09 aa18 	mls	sl, r9, r8, sl
 8001186:	fa1f fe8c 	uxth.w	lr, ip
 800118a:	432b      	orrs	r3, r5
 800118c:	fa00 f501 	lsl.w	r5, r0, r1
 8001190:	fb08 f00e 	mul.w	r0, r8, lr
 8001194:	0c1c      	lsrs	r4, r3, #16
 8001196:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800119a:	42a0      	cmp	r0, r4
 800119c:	fa02 f201 	lsl.w	r2, r2, r1
 80011a0:	d90b      	bls.n	80011ba <__udivmoddi4+0x1b2>
 80011a2:	eb1c 0404 	adds.w	r4, ip, r4
 80011a6:	f108 3aff 	add.w	sl, r8, #4294967295
 80011aa:	f080 8086 	bcs.w	80012ba <__udivmoddi4+0x2b2>
 80011ae:	42a0      	cmp	r0, r4
 80011b0:	f240 8083 	bls.w	80012ba <__udivmoddi4+0x2b2>
 80011b4:	f1a8 0802 	sub.w	r8, r8, #2
 80011b8:	4464      	add	r4, ip
 80011ba:	1a24      	subs	r4, r4, r0
 80011bc:	b298      	uxth	r0, r3
 80011be:	fbb4 f3f9 	udiv	r3, r4, r9
 80011c2:	fb09 4413 	mls	r4, r9, r3, r4
 80011c6:	fb03 fe0e 	mul.w	lr, r3, lr
 80011ca:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 80011ce:	45a6      	cmp	lr, r4
 80011d0:	d908      	bls.n	80011e4 <__udivmoddi4+0x1dc>
 80011d2:	eb1c 0404 	adds.w	r4, ip, r4
 80011d6:	f103 30ff 	add.w	r0, r3, #4294967295
 80011da:	d26a      	bcs.n	80012b2 <__udivmoddi4+0x2aa>
 80011dc:	45a6      	cmp	lr, r4
 80011de:	d968      	bls.n	80012b2 <__udivmoddi4+0x2aa>
 80011e0:	3b02      	subs	r3, #2
 80011e2:	4464      	add	r4, ip
 80011e4:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 80011e8:	fba0 9302 	umull	r9, r3, r0, r2
 80011ec:	eba4 040e 	sub.w	r4, r4, lr
 80011f0:	429c      	cmp	r4, r3
 80011f2:	46c8      	mov	r8, r9
 80011f4:	469e      	mov	lr, r3
 80011f6:	d354      	bcc.n	80012a2 <__udivmoddi4+0x29a>
 80011f8:	d051      	beq.n	800129e <__udivmoddi4+0x296>
 80011fa:	2e00      	cmp	r6, #0
 80011fc:	d067      	beq.n	80012ce <__udivmoddi4+0x2c6>
 80011fe:	ebb5 0308 	subs.w	r3, r5, r8
 8001202:	eb64 040e 	sbc.w	r4, r4, lr
 8001206:	40cb      	lsrs	r3, r1
 8001208:	fa04 f707 	lsl.w	r7, r4, r7
 800120c:	431f      	orrs	r7, r3
 800120e:	40cc      	lsrs	r4, r1
 8001210:	e9c6 7400 	strd	r7, r4, [r6]
 8001214:	2100      	movs	r1, #0
 8001216:	e74a      	b.n	80010ae <__udivmoddi4+0xa6>
 8001218:	fa02 fc03 	lsl.w	ip, r2, r3
 800121c:	f1c3 0020 	rsb	r0, r3, #32
 8001220:	40c1      	lsrs	r1, r0
 8001222:	409d      	lsls	r5, r3
 8001224:	fa24 f000 	lsr.w	r0, r4, r0
 8001228:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800122c:	4328      	orrs	r0, r5
 800122e:	fbb1 f5f7 	udiv	r5, r1, r7
 8001232:	fb07 1115 	mls	r1, r7, r5, r1
 8001236:	fa1f fe8c 	uxth.w	lr, ip
 800123a:	0c02      	lsrs	r2, r0, #16
 800123c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001240:	fb05 f10e 	mul.w	r1, r5, lr
 8001244:	4291      	cmp	r1, r2
 8001246:	fa04 f403 	lsl.w	r4, r4, r3
 800124a:	d908      	bls.n	800125e <__udivmoddi4+0x256>
 800124c:	eb1c 0202 	adds.w	r2, ip, r2
 8001250:	f105 38ff 	add.w	r8, r5, #4294967295
 8001254:	d22f      	bcs.n	80012b6 <__udivmoddi4+0x2ae>
 8001256:	4291      	cmp	r1, r2
 8001258:	d92d      	bls.n	80012b6 <__udivmoddi4+0x2ae>
 800125a:	3d02      	subs	r5, #2
 800125c:	4462      	add	r2, ip
 800125e:	1a52      	subs	r2, r2, r1
 8001260:	fbb2 f1f7 	udiv	r1, r2, r7
 8001264:	fb07 2211 	mls	r2, r7, r1, r2
 8001268:	b280      	uxth	r0, r0
 800126a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800126e:	fb01 f20e 	mul.w	r2, r1, lr
 8001272:	4282      	cmp	r2, r0
 8001274:	d908      	bls.n	8001288 <__udivmoddi4+0x280>
 8001276:	eb1c 0000 	adds.w	r0, ip, r0
 800127a:	f101 38ff 	add.w	r8, r1, #4294967295
 800127e:	d216      	bcs.n	80012ae <__udivmoddi4+0x2a6>
 8001280:	4282      	cmp	r2, r0
 8001282:	d914      	bls.n	80012ae <__udivmoddi4+0x2a6>
 8001284:	3902      	subs	r1, #2
 8001286:	4460      	add	r0, ip
 8001288:	1a80      	subs	r0, r0, r2
 800128a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800128e:	e73a      	b.n	8001106 <__udivmoddi4+0xfe>
 8001290:	4631      	mov	r1, r6
 8001292:	4630      	mov	r0, r6
 8001294:	e70b      	b.n	80010ae <__udivmoddi4+0xa6>
 8001296:	4671      	mov	r1, lr
 8001298:	e6e9      	b.n	800106e <__udivmoddi4+0x66>
 800129a:	4610      	mov	r0, r2
 800129c:	e6fe      	b.n	800109c <__udivmoddi4+0x94>
 800129e:	454d      	cmp	r5, r9
 80012a0:	d2ab      	bcs.n	80011fa <__udivmoddi4+0x1f2>
 80012a2:	ebb9 0802 	subs.w	r8, r9, r2
 80012a6:	eb63 0e0c 	sbc.w	lr, r3, ip
 80012aa:	3801      	subs	r0, #1
 80012ac:	e7a5      	b.n	80011fa <__udivmoddi4+0x1f2>
 80012ae:	4641      	mov	r1, r8
 80012b0:	e7ea      	b.n	8001288 <__udivmoddi4+0x280>
 80012b2:	4603      	mov	r3, r0
 80012b4:	e796      	b.n	80011e4 <__udivmoddi4+0x1dc>
 80012b6:	4645      	mov	r5, r8
 80012b8:	e7d1      	b.n	800125e <__udivmoddi4+0x256>
 80012ba:	46d0      	mov	r8, sl
 80012bc:	e77d      	b.n	80011ba <__udivmoddi4+0x1b2>
 80012be:	4464      	add	r4, ip
 80012c0:	3802      	subs	r0, #2
 80012c2:	e749      	b.n	8001158 <__udivmoddi4+0x150>
 80012c4:	3d02      	subs	r5, #2
 80012c6:	4462      	add	r2, ip
 80012c8:	e731      	b.n	800112e <__udivmoddi4+0x126>
 80012ca:	4608      	mov	r0, r1
 80012cc:	e70a      	b.n	80010e4 <__udivmoddi4+0xdc>
 80012ce:	4631      	mov	r1, r6
 80012d0:	e6ed      	b.n	80010ae <__udivmoddi4+0xa6>
 80012d2:	bf00      	nop

080012d4 <__aeabi_idiv0>:
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop

080012d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	db0b      	blt.n	8001302 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ea:	79fb      	ldrb	r3, [r7, #7]
 80012ec:	f003 021f 	and.w	r2, r3, #31
 80012f0:	4906      	ldr	r1, [pc, #24]	; (800130c <__NVIC_EnableIRQ+0x34>)
 80012f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f6:	095b      	lsrs	r3, r3, #5
 80012f8:	2001      	movs	r0, #1
 80012fa:	fa00 f202 	lsl.w	r2, r0, r2
 80012fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr
 800130c:	e000e100 	.word	0xe000e100

08001310 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b08a      	sub	sp, #40	; 0x28
 8001314:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001316:	f107 0314 	add.w	r3, r7, #20
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
 8001324:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001326:	4b5a      	ldr	r3, [pc, #360]	; (8001490 <MX_GPIO_Init+0x180>)
 8001328:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800132a:	4a59      	ldr	r2, [pc, #356]	; (8001490 <MX_GPIO_Init+0x180>)
 800132c:	f043 0304 	orr.w	r3, r3, #4
 8001330:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001332:	4b57      	ldr	r3, [pc, #348]	; (8001490 <MX_GPIO_Init+0x180>)
 8001334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001336:	f003 0304 	and.w	r3, r3, #4
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800133e:	4b54      	ldr	r3, [pc, #336]	; (8001490 <MX_GPIO_Init+0x180>)
 8001340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001342:	4a53      	ldr	r2, [pc, #332]	; (8001490 <MX_GPIO_Init+0x180>)
 8001344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001348:	64d3      	str	r3, [r2, #76]	; 0x4c
 800134a:	4b51      	ldr	r3, [pc, #324]	; (8001490 <MX_GPIO_Init+0x180>)
 800134c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b4e      	ldr	r3, [pc, #312]	; (8001490 <MX_GPIO_Init+0x180>)
 8001358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800135a:	4a4d      	ldr	r2, [pc, #308]	; (8001490 <MX_GPIO_Init+0x180>)
 800135c:	f043 0301 	orr.w	r3, r3, #1
 8001360:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001362:	4b4b      	ldr	r3, [pc, #300]	; (8001490 <MX_GPIO_Init+0x180>)
 8001364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001366:	f003 0301 	and.w	r3, r3, #1
 800136a:	60bb      	str	r3, [r7, #8]
 800136c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b48      	ldr	r3, [pc, #288]	; (8001490 <MX_GPIO_Init+0x180>)
 8001370:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001372:	4a47      	ldr	r2, [pc, #284]	; (8001490 <MX_GPIO_Init+0x180>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	64d3      	str	r3, [r2, #76]	; 0x4c
 800137a:	4b45      	ldr	r3, [pc, #276]	; (8001490 <MX_GPIO_Init+0x180>)
 800137c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|SPIRIT1_SDN_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
 8001388:	f44f 6184 	mov.w	r1, #1056	; 0x420
 800138c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001390:	f003 fa7a 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPIRIT1_SPI_CSn_GPIO_Port, SPIRIT1_SPI_CSn_Pin, GPIO_PIN_RESET);
 8001394:	2200      	movs	r2, #0
 8001396:	2140      	movs	r1, #64	; 0x40
 8001398:	483e      	ldr	r0, [pc, #248]	; (8001494 <MX_GPIO_Init+0x184>)
 800139a:	f003 fa75 	bl	8004888 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800139e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80013a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013aa:	2300      	movs	r3, #0
 80013ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	4619      	mov	r1, r3
 80013b4:	4838      	ldr	r0, [pc, #224]	; (8001498 <MX_GPIO_Init+0x188>)
 80013b6:	f003 f8bf 	bl	8004538 <HAL_GPIO_Init>
//  GPIO_InitStruct.Pin = GPIO_PIN_13;
//  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|SPIRIT1_SDN_Pin;
 80013ba:	f44f 6384 	mov.w	r3, #1056	; 0x420
 80013be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c0:	2301      	movs	r3, #1
 80013c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4619      	mov	r1, r3
 80013d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013d6:	f003 f8af 	bl	8004538 <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
//  GPIO_InitStruct.Pull = GPIO_NOPULL;
//  HAL_GPIO_Init(SPIRIT1_GPIO3_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPIRIT1_SPI_CSn_Pin;
 80013da:	2340      	movs	r3, #64	; 0x40
 80013dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013de:	2301      	movs	r3, #1
 80013e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013e6:	2300      	movs	r3, #0
 80013e8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPIRIT1_SPI_CSn_GPIO_Port, &GPIO_InitStruct);
 80013ea:	f107 0314 	add.w	r3, r7, #20
 80013ee:	4619      	mov	r1, r3
 80013f0:	4828      	ldr	r0, [pc, #160]	; (8001494 <MX_GPIO_Init+0x184>)
 80013f2:	f003 f8a1 	bl	8004538 <HAL_GPIO_Init>
  /* EXTI interrupt init*/
//   HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//   HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  	//start clocks for GPIOA and SYSCFG and EXTI
    RCC->AHB2ENR |= RCC_AHB2ENR_GPIOAEN;
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <MX_GPIO_Init+0x180>)
 80013f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013fa:	4a25      	ldr	r2, [pc, #148]	; (8001490 <MX_GPIO_Init+0x180>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	64d3      	str	r3, [r2, #76]	; 0x4c
    RCC->APB2ENR |= RCC_APB2ENR_SYSCFGEN;
 8001402:	4b23      	ldr	r3, [pc, #140]	; (8001490 <MX_GPIO_Init+0x180>)
 8001404:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001406:	4a22      	ldr	r2, [pc, #136]	; (8001490 <MX_GPIO_Init+0x180>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6613      	str	r3, [r2, #96]	; 0x60

    //initialize on board LED as output (PA5)
    GPIOA->MODER &= ~(0x3 << 10);
 800140e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001418:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800141c:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0x1 << 10);
 800141e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001428:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800142c:	6013      	str	r3, [r2, #0]

    //initialize PA0 as input with pull up
    GPIOA->MODER &= ~(0x3 << 0);
 800142e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001438:	f023 0303 	bic.w	r3, r3, #3
 800143c:	6013      	str	r3, [r2, #0]
    GPIOA->PUPDR &= ~(0x3 << 0);
 800143e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001448:	f023 0303 	bic.w	r3, r3, #3
 800144c:	60d3      	str	r3, [r2, #12]
    GPIOA->PUPDR |= (0x1 << 0);
 800144e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001458:	f043 0301 	orr.w	r3, r3, #1
 800145c:	60d3      	str	r3, [r2, #12]

    //initialize SYSCFG EXTI0 to PA0
    SYSCFG->EXTICR[0] &= ~(0xF);
 800145e:	4b0f      	ldr	r3, [pc, #60]	; (800149c <MX_GPIO_Init+0x18c>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	4a0e      	ldr	r2, [pc, #56]	; (800149c <MX_GPIO_Init+0x18c>)
 8001464:	f023 030f 	bic.w	r3, r3, #15
 8001468:	6093      	str	r3, [r2, #8]

    //enable interrupts on EXTI0
    EXTI->IMR1 |= 0x1;
 800146a:	4b0d      	ldr	r3, [pc, #52]	; (80014a0 <MX_GPIO_Init+0x190>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a0c      	ldr	r2, [pc, #48]	; (80014a0 <MX_GPIO_Init+0x190>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6013      	str	r3, [r2, #0]

    //set EXTI0 to trigger on falling edge
    EXTI->FTSR1 |= 0x1;
 8001476:	4b0a      	ldr	r3, [pc, #40]	; (80014a0 <MX_GPIO_Init+0x190>)
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	4a09      	ldr	r2, [pc, #36]	; (80014a0 <MX_GPIO_Init+0x190>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	60d3      	str	r3, [r2, #12]

    //enable interrupt in NVIC
    NVIC_EnableIRQ(EXTI0_IRQn);
 8001482:	2006      	movs	r0, #6
 8001484:	f7ff ff28 	bl	80012d8 <__NVIC_EnableIRQ>
}
 8001488:	bf00      	nop
 800148a:	3728      	adds	r7, #40	; 0x28
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	40021000 	.word	0x40021000
 8001494:	48000400 	.word	0x48000400
 8001498:	48000800 	.word	0x48000800
 800149c:	40010000 	.word	0x40010000
 80014a0:	40010400 	.word	0x40010400

080014a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014a4:	b590      	push	{r4, r7, lr}
 80014a6:	b087      	sub	sp, #28
 80014a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  char payload[20] = "Hello World!\r\n";
 80014aa:	4b25      	ldr	r3, [pc, #148]	; (8001540 <main+0x9c>)
 80014ac:	463c      	mov	r4, r7
 80014ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b0:	c407      	stmia	r4!, {r0, r1, r2}
 80014b2:	8023      	strh	r3, [r4, #0]
 80014b4:	3402      	adds	r4, #2
 80014b6:	0c1b      	lsrs	r3, r3, #16
 80014b8:	7023      	strb	r3, [r4, #0]
 80014ba:	f107 030f 	add.w	r3, r7, #15
 80014be:	2200      	movs	r2, #0
 80014c0:	601a      	str	r2, [r3, #0]
 80014c2:	711a      	strb	r2, [r3, #4]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014c4:	f002 fe5d 	bl	8004182 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c8:	f000 f846 	bl	8001558 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014cc:	f7ff ff20 	bl	8001310 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80014d0:	f000 fa6e 	bl	80019b0 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 80014d4:	f000 f8d6 	bl	8001684 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  SPSGRF_Init();
 80014d8:	f000 f96c 	bl	80017b4 <SPSGRF_Init>
  SpiritPktBasicSetDestinationAddress(0x44);
 80014dc:	2044      	movs	r0, #68	; 0x44
 80014de:	f001 f8ab 	bl	8002638 <SpiritPktCommonSetDestinationAddress>
    while(!xTxDoneFlag);
    HAL_UART_Transmit(&huart2, "Payload Sent\r\n", 14, HAL_MAX_DELAY); // Never getting here

    HAL_Delay(2000); // Block for 2000 ms
#else
    xRxDoneFlag = S_RESET;
 80014e2:	4b18      	ldr	r3, [pc, #96]	; (8001544 <main+0xa0>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	701a      	strb	r2, [r3, #0]
    SPSGRF_StartRx();
 80014e8:	f000 fa16 	bl	8001918 <SPSGRF_StartRx>
    HAL_UART_Transmit(&huart2, "Waiting to receive\r\n", 14, HAL_MAX_DELAY);
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
 80014f0:	220e      	movs	r2, #14
 80014f2:	4915      	ldr	r1, [pc, #84]	; (8001548 <main+0xa4>)
 80014f4:	4815      	ldr	r0, [pc, #84]	; (800154c <main+0xa8>)
 80014f6:	f004 ffb7 	bl	8006468 <HAL_UART_Transmit>
    while (!xRxDoneFlag);
 80014fa:	bf00      	nop
 80014fc:	4b11      	ldr	r3, [pc, #68]	; (8001544 <main+0xa0>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	2b00      	cmp	r3, #0
 8001504:	d0fa      	beq.n	80014fc <main+0x58>
    HAL_UART_Transmit(&huart2, "After loop\r\n", 14, HAL_MAX_DELAY);
 8001506:	f04f 33ff 	mov.w	r3, #4294967295
 800150a:	220e      	movs	r2, #14
 800150c:	4910      	ldr	r1, [pc, #64]	; (8001550 <main+0xac>)
 800150e:	480f      	ldr	r0, [pc, #60]	; (800154c <main+0xa8>)
 8001510:	f004 ffaa 	bl	8006468 <HAL_UART_Transmit>
    rxLen = SPSGRF_GetRxData(payload);
 8001514:	463b      	mov	r3, r7
 8001516:	4618      	mov	r0, r3
 8001518:	f000 fa0a 	bl	8001930 <SPSGRF_GetRxData>
 800151c:	4603      	mov	r3, r0
 800151e:	75fb      	strb	r3, [r7, #23]
    HAL_UART_Transmit(&huart2, "Received: ", 10, HAL_MAX_DELAY); // Never getting here
 8001520:	f04f 33ff 	mov.w	r3, #4294967295
 8001524:	220a      	movs	r2, #10
 8001526:	490b      	ldr	r1, [pc, #44]	; (8001554 <main+0xb0>)
 8001528:	4808      	ldr	r0, [pc, #32]	; (800154c <main+0xa8>)
 800152a:	f004 ff9d 	bl	8006468 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, payload, rxLen, HAL_MAX_DELAY);
 800152e:	7dfb      	ldrb	r3, [r7, #23]
 8001530:	b29a      	uxth	r2, r3
 8001532:	4639      	mov	r1, r7
 8001534:	f04f 33ff 	mov.w	r3, #4294967295
 8001538:	4804      	ldr	r0, [pc, #16]	; (800154c <main+0xa8>)
 800153a:	f004 ff95 	bl	8006468 <HAL_UART_Transmit>
    xRxDoneFlag = S_RESET;
 800153e:	e7d0      	b.n	80014e2 <main+0x3e>
 8001540:	08007044 	.word	0x08007044
 8001544:	20000031 	.word	0x20000031
 8001548:	08007010 	.word	0x08007010
 800154c:	20000098 	.word	0x20000098
 8001550:	08007028 	.word	0x08007028
 8001554:	08007038 	.word	0x08007038

08001558 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b096      	sub	sp, #88	; 0x58
 800155c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800155e:	f107 0314 	add.w	r3, r7, #20
 8001562:	2244      	movs	r2, #68	; 0x44
 8001564:	2100      	movs	r1, #0
 8001566:	4618      	mov	r0, r3
 8001568:	f005 fcd3 	bl	8006f12 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800156c:	463b      	mov	r3, r7
 800156e:	2200      	movs	r2, #0
 8001570:	601a      	str	r2, [r3, #0]
 8001572:	605a      	str	r2, [r3, #4]
 8001574:	609a      	str	r2, [r3, #8]
 8001576:	60da      	str	r2, [r3, #12]
 8001578:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800157a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800157e:	f003 f9a7 	bl	80048d0 <HAL_PWREx_ControlVoltageScaling>
 8001582:	4603      	mov	r3, r0
 8001584:	2b00      	cmp	r3, #0
 8001586:	d001      	beq.n	800158c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001588:	f000 f876 	bl	8001678 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800158c:	2302      	movs	r3, #2
 800158e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001590:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001594:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001596:	2310      	movs	r3, #16
 8001598:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159a:	2302      	movs	r3, #2
 800159c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800159e:	2302      	movs	r3, #2
 80015a0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015a2:	2301      	movs	r3, #1
 80015a4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 80015a6:	230a      	movs	r3, #10
 80015a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80015aa:	2307      	movs	r3, #7
 80015ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80015ae:	2302      	movs	r3, #2
 80015b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80015b2:	2302      	movs	r3, #2
 80015b4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	4618      	mov	r0, r3
 80015bc:	f003 f9dc 	bl	8004978 <HAL_RCC_OscConfig>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <SystemClock_Config+0x72>
  {
    Error_Handler();
 80015c6:	f000 f857 	bl	8001678 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ca:	230f      	movs	r3, #15
 80015cc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015ce:	2303      	movs	r3, #3
 80015d0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015d2:	2300      	movs	r3, #0
 80015d4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015da:	2300      	movs	r3, #0
 80015dc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80015de:	463b      	mov	r3, r7
 80015e0:	2104      	movs	r1, #4
 80015e2:	4618      	mov	r0, r3
 80015e4:	f003 fda4 	bl	8005130 <HAL_RCC_ClockConfig>
 80015e8:	4603      	mov	r3, r0
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d001      	beq.n	80015f2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80015ee:	f000 f843 	bl	8001678 <Error_Handler>
  }
}
 80015f2:	bf00      	nop
 80015f4:	3758      	adds	r7, #88	; 0x58
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
	...

080015fc <EXTI0_IRQHandler>:

/* USER CODE BEGIN 4 */

void EXTI0_IRQHandler(void){
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b082      	sub	sp, #8
 8001600:	af00      	add	r7, sp, #0
	SpiritIrqs xIrqStatus;
	HAL_UART_Transmit(&huart2, "Interrupt called\r\n", 14, HAL_MAX_DELAY);
 8001602:	f04f 33ff 	mov.w	r3, #4294967295
 8001606:	220e      	movs	r2, #14
 8001608:	4916      	ldr	r1, [pc, #88]	; (8001664 <EXTI0_IRQHandler+0x68>)
 800160a:	4817      	ldr	r0, [pc, #92]	; (8001668 <EXTI0_IRQHandler+0x6c>)
 800160c:	f004 ff2c 	bl	8006468 <HAL_UART_Transmit>
	SpiritIrqGetStatus(&xIrqStatus);
 8001610:	1d3b      	adds	r3, r7, #4
 8001612:	4618      	mov	r0, r3
 8001614:	f000 fc16 	bl	8001e44 <SpiritIrqGetStatus>
	  if (xIrqStatus.IRQ_TX_DATA_SENT)
 8001618:	793b      	ldrb	r3, [r7, #4]
 800161a:	f003 0304 	and.w	r3, r3, #4
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d002      	beq.n	800162a <EXTI0_IRQHandler+0x2e>
	  {
	    xTxDoneFlag = S_SET;
 8001624:	4b11      	ldr	r3, [pc, #68]	; (800166c <EXTI0_IRQHandler+0x70>)
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
	  }
	  if (xIrqStatus.IRQ_RX_DATA_READY)
 800162a:	793b      	ldrb	r3, [r7, #4]
 800162c:	f003 0301 	and.w	r3, r3, #1
 8001630:	b2db      	uxtb	r3, r3
 8001632:	2b00      	cmp	r3, #0
 8001634:	d002      	beq.n	800163c <EXTI0_IRQHandler+0x40>
	  {
	    xRxDoneFlag = S_SET;
 8001636:	4b0e      	ldr	r3, [pc, #56]	; (8001670 <EXTI0_IRQHandler+0x74>)
 8001638:	2201      	movs	r2, #1
 800163a:	701a      	strb	r2, [r3, #0]
	  }
    if (EXTI->PR1 & 0x1){
 800163c:	4b0d      	ldr	r3, [pc, #52]	; (8001674 <EXTI0_IRQHandler+0x78>)
 800163e:	695b      	ldr	r3, [r3, #20]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b00      	cmp	r3, #0
 8001646:	d009      	beq.n	800165c <EXTI0_IRQHandler+0x60>
        EXTI->PR1 |= 0x1; //clear flag by writing to it
 8001648:	4b0a      	ldr	r3, [pc, #40]	; (8001674 <EXTI0_IRQHandler+0x78>)
 800164a:	695b      	ldr	r3, [r3, #20]
 800164c:	4a09      	ldr	r2, [pc, #36]	; (8001674 <EXTI0_IRQHandler+0x78>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6153      	str	r3, [r2, #20]
        GPIOA->BSRR = 0x1 << 5; //turn on LED
 8001654:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8001658:	2220      	movs	r2, #32
 800165a:	619a      	str	r2, [r3, #24]
    }
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	08007058 	.word	0x08007058
 8001668:	20000098 	.word	0x20000098
 800166c:	20000030 	.word	0x20000030
 8001670:	20000031 	.word	0x20000031
 8001674:	40010400 	.word	0x40010400

08001678 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800167c:	b672      	cpsid	i
}
 800167e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001680:	e7fe      	b.n	8001680 <Error_Handler+0x8>
	...

08001684 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001688:	4b18      	ldr	r3, [pc, #96]	; (80016ec <MX_SPI1_Init+0x68>)
 800168a:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <MX_SPI1_Init+0x6c>)
 800168c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <MX_SPI1_Init+0x68>)
 8001690:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001694:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <MX_SPI1_Init+0x68>)
 8001698:	2200      	movs	r2, #0
 800169a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800169c:	4b13      	ldr	r3, [pc, #76]	; (80016ec <MX_SPI1_Init+0x68>)
 800169e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016a2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016a4:	4b11      	ldr	r3, [pc, #68]	; (80016ec <MX_SPI1_Init+0x68>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016aa:	4b10      	ldr	r3, [pc, #64]	; (80016ec <MX_SPI1_Init+0x68>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016b0:	4b0e      	ldr	r3, [pc, #56]	; (80016ec <MX_SPI1_Init+0x68>)
 80016b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80016b6:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80016b8:	4b0c      	ldr	r3, [pc, #48]	; (80016ec <MX_SPI1_Init+0x68>)
 80016ba:	2208      	movs	r2, #8
 80016bc:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016be:	4b0b      	ldr	r3, [pc, #44]	; (80016ec <MX_SPI1_Init+0x68>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c4:	4b09      	ldr	r3, [pc, #36]	; (80016ec <MX_SPI1_Init+0x68>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016ca:	4b08      	ldr	r3, [pc, #32]	; (80016ec <MX_SPI1_Init+0x68>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <MX_SPI1_Init+0x68>)
 80016d2:	220a      	movs	r2, #10
 80016d4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016d6:	4805      	ldr	r0, [pc, #20]	; (80016ec <MX_SPI1_Init+0x68>)
 80016d8:	f003 ff4a 	bl	8005570 <HAL_SPI_Init>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 80016e2:	f7ff ffc9 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000034 	.word	0x20000034
 80016f0:	40013000 	.word	0x40013000

080016f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b08a      	sub	sp, #40	; 0x28
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016fc:	f107 0314 	add.w	r3, r7, #20
 8001700:	2200      	movs	r2, #0
 8001702:	601a      	str	r2, [r3, #0]
 8001704:	605a      	str	r2, [r3, #4]
 8001706:	609a      	str	r2, [r3, #8]
 8001708:	60da      	str	r2, [r3, #12]
 800170a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a25      	ldr	r2, [pc, #148]	; (80017a8 <HAL_SPI_MspInit+0xb4>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d144      	bne.n	80017a0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001716:	4b25      	ldr	r3, [pc, #148]	; (80017ac <HAL_SPI_MspInit+0xb8>)
 8001718:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800171a:	4a24      	ldr	r2, [pc, #144]	; (80017ac <HAL_SPI_MspInit+0xb8>)
 800171c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001720:	6613      	str	r3, [r2, #96]	; 0x60
 8001722:	4b22      	ldr	r3, [pc, #136]	; (80017ac <HAL_SPI_MspInit+0xb8>)
 8001724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001726:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800172a:	613b      	str	r3, [r7, #16]
 800172c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	4b1f      	ldr	r3, [pc, #124]	; (80017ac <HAL_SPI_MspInit+0xb8>)
 8001730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001732:	4a1e      	ldr	r2, [pc, #120]	; (80017ac <HAL_SPI_MspInit+0xb8>)
 8001734:	f043 0301 	orr.w	r3, r3, #1
 8001738:	64d3      	str	r3, [r2, #76]	; 0x4c
 800173a:	4b1c      	ldr	r3, [pc, #112]	; (80017ac <HAL_SPI_MspInit+0xb8>)
 800173c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <HAL_SPI_MspInit+0xb8>)
 8001748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800174a:	4a18      	ldr	r2, [pc, #96]	; (80017ac <HAL_SPI_MspInit+0xb8>)
 800174c:	f043 0302 	orr.w	r3, r3, #2
 8001750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_SPI_MspInit+0xb8>)
 8001754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001756:	f003 0302 	and.w	r3, r3, #2
 800175a:	60bb      	str	r3, [r7, #8]
 800175c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800175e:	23c0      	movs	r3, #192	; 0xc0
 8001760:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001762:	2302      	movs	r3, #2
 8001764:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001766:	2300      	movs	r3, #0
 8001768:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800176a:	2303      	movs	r3, #3
 800176c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800176e:	2305      	movs	r3, #5
 8001770:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	f107 0314 	add.w	r3, r7, #20
 8001776:	4619      	mov	r1, r3
 8001778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800177c:	f002 fedc 	bl	8004538 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001780:	2308      	movs	r3, #8
 8001782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	2302      	movs	r3, #2
 8001786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2300      	movs	r3, #0
 800178a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178c:	2303      	movs	r3, #3
 800178e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001790:	2305      	movs	r3, #5
 8001792:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001794:	f107 0314 	add.w	r3, r7, #20
 8001798:	4619      	mov	r1, r3
 800179a:	4805      	ldr	r0, [pc, #20]	; (80017b0 <HAL_SPI_MspInit+0xbc>)
 800179c:	f002 fecc 	bl	8004538 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	; 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40013000 	.word	0x40013000
 80017ac:	40021000 	.word	0x40021000
 80017b0:	48000400 	.word	0x48000400

080017b4 <SPSGRF_Init>:
* @brief  Initialize the SPIRIT1 transceiver in the SPSGRF module.
* @param  None
* @retval None
*/
void SPSGRF_Init(void)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b090      	sub	sp, #64	; 0x40
 80017b8:	af00      	add	r7, sp, #0
  SRadioInit xRadioInit;
  PktBasicInit xBasicInit;
  PktBasicAddressesInit xBasicAddress;
  SGpioInit xGpioInit;

  SpiritSpiInit();
 80017ba:	f002 fb99 	bl	8003ef0 <RadioSpiInit>

  // restart the radio
  SpiritEnterShutdown();
 80017be:	f002 fcc7 	bl	8004150 <RadioEnterShutdown>
  SpiritExitShutdown();
 80017c2:	f002 fcd0 	bl	8004166 <RadioExitShutdown>
  SpiritManagementWaExtraCurrent(); // To be called at the SHUTDOWN exit. It avoids extra current consumption at SLEEP and STANDBY.
 80017c6:	f000 fd95 	bl	80022f4 <SpiritManagementWaExtraCurrent>

  // wait for the radio to enter the ready state
  do
  {
    for (volatile uint8_t i = 0; i != 0xFF; i++); // delay for state transition
 80017ca:	2300      	movs	r3, #0
 80017cc:	71fb      	strb	r3, [r7, #7]
 80017ce:	e004      	b.n	80017da <SPSGRF_Init+0x26>
 80017d0:	79fb      	ldrb	r3, [r7, #7]
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	3301      	adds	r3, #1
 80017d6:	b2db      	uxtb	r3, r3
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	79fb      	ldrb	r3, [r7, #7]
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2bff      	cmp	r3, #255	; 0xff
 80017e0:	d1f6      	bne.n	80017d0 <SPSGRF_Init+0x1c>
    SpiritRefreshStatus(); // reads the MC_STATUS register
 80017e2:	f002 fb63 	bl	8003eac <SpiritRefreshStatus>
  } while (g_xStatus.MC_STATE != MC_STATE_READY);
 80017e6:	4b46      	ldr	r3, [pc, #280]	; (8001900 <SPSGRF_Init+0x14c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80017ee:	b2db      	uxtb	r3, r3
 80017f0:	2b03      	cmp	r3, #3
 80017f2:	d1ea      	bne.n	80017ca <SPSGRF_Init+0x16>

  // Initialize radio RF parameters
  xRadioInit.nXtalOffsetPpm = XTAL_OFFSET_PPM;
 80017f4:	2300      	movs	r3, #0
 80017f6:	84bb      	strh	r3, [r7, #36]	; 0x24
  xRadioInit.lFrequencyBase = BASE_FREQUENCY;
 80017f8:	4b42      	ldr	r3, [pc, #264]	; (8001904 <SPSGRF_Init+0x150>)
 80017fa:	62bb      	str	r3, [r7, #40]	; 0x28
  xRadioInit.nChannelSpace = CHANNEL_SPACE;
 80017fc:	4b42      	ldr	r3, [pc, #264]	; (8001908 <SPSGRF_Init+0x154>)
 80017fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  xRadioInit.cChannelNumber = CHANNEL_NUMBER;
 8001800:	2300      	movs	r3, #0
 8001802:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  xRadioInit.xModulationSelect = MODULATION_SELECT;
 8001806:	2300      	movs	r3, #0
 8001808:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  xRadioInit.lDatarate = DATARATE;
 800180c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001810:	637b      	str	r3, [r7, #52]	; 0x34
  xRadioInit.lFreqDev = FREQ_DEVIATION;
 8001812:	f644 6320 	movw	r3, #20000	; 0x4e20
 8001816:	63bb      	str	r3, [r7, #56]	; 0x38
  xRadioInit.lBandwidth = BANDWIDTH;
 8001818:	4b3b      	ldr	r3, [pc, #236]	; (8001908 <SPSGRF_Init+0x154>)
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
  SpiritRadioSetXtalFrequency(XTAL_FREQUENCY); // Must be called before SpiritRadioInit()
 800181c:	483b      	ldr	r0, [pc, #236]	; (800190c <SPSGRF_Init+0x158>)
 800181e:	f002 f961 	bl	8003ae4 <SpiritRadioSetXtalFrequency>
  SpiritRadioInit(&xRadioInit);
 8001822:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001826:	4618      	mov	r0, r3
 8001828:	f000 ffac 	bl	8002784 <SpiritRadioInit>

  // Set the transmitter power level
  SpiritRadioSetPALeveldBm(POWER_INDEX, POWER_DBM);
 800182c:	4938      	ldr	r1, [pc, #224]	; (8001910 <SPSGRF_Init+0x15c>)
 800182e:	2007      	movs	r0, #7
 8001830:	f001 fff8 	bl	8003824 <SpiritRadioSetPALeveldBm>
  SpiritRadioSetPALevelMaxIndex(POWER_INDEX);
 8001834:	2007      	movs	r0, #7
 8001836:	f002 f849 	bl	80038cc <SpiritRadioSetPALevelMaxIndex>

  // Configure packet handler to use the Basic packet format
  xBasicInit.xPreambleLength = PREAMBLE_LENGTH;
 800183a:	2318      	movs	r3, #24
 800183c:	753b      	strb	r3, [r7, #20]
  xBasicInit.xSyncLength = SYNC_LENGTH;
 800183e:	2306      	movs	r3, #6
 8001840:	757b      	strb	r3, [r7, #21]
  xBasicInit.lSyncWords = SYNC_WORD;
 8001842:	f04f 3388 	mov.w	r3, #2290649224	; 0x88888888
 8001846:	61bb      	str	r3, [r7, #24]
  xBasicInit.xFixVarLength = LENGTH_TYPE;
 8001848:	2301      	movs	r3, #1
 800184a:	773b      	strb	r3, [r7, #28]
  xBasicInit.cPktLengthWidth = LENGTH_WIDTH;
 800184c:	2307      	movs	r3, #7
 800184e:	777b      	strb	r3, [r7, #29]
  xBasicInit.xCrcMode = CRC_MODE;
 8001850:	2320      	movs	r3, #32
 8001852:	77bb      	strb	r3, [r7, #30]
  xBasicInit.xControlLength = CONTROL_LENGTH;
 8001854:	2300      	movs	r3, #0
 8001856:	77fb      	strb	r3, [r7, #31]
  xBasicInit.xAddressField = EN_ADDRESS;
 8001858:	2301      	movs	r3, #1
 800185a:	f887 3020 	strb.w	r3, [r7, #32]
  xBasicInit.xFec = EN_FEC;
 800185e:	2300      	movs	r3, #0
 8001860:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  xBasicInit.xDataWhitening = EN_WHITENING;
 8001864:	2301      	movs	r3, #1
 8001866:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  SpiritPktBasicInit(&xBasicInit);
 800186a:	f107 0314 	add.w	r3, r7, #20
 800186e:	4618      	mov	r0, r3
 8001870:	f000 fd66 	bl	8002340 <SpiritPktBasicInit>

  // Configure destination address criteria for automatic packet filtering
  xBasicAddress.xFilterOnMyAddress = EN_FILT_MY_ADDRESS;
 8001874:	2301      	movs	r3, #1
 8001876:	733b      	strb	r3, [r7, #12]
  xBasicAddress.cMyAddress = MY_ADDRESS;
 8001878:	2344      	movs	r3, #68	; 0x44
 800187a:	737b      	strb	r3, [r7, #13]
  xBasicAddress.xFilterOnMulticastAddress = EN_FILT_MULTICAST_ADDRESS;
 800187c:	2301      	movs	r3, #1
 800187e:	73bb      	strb	r3, [r7, #14]
  xBasicAddress.cMulticastAddress = MULTICAST_ADDRESS;
 8001880:	23ee      	movs	r3, #238	; 0xee
 8001882:	73fb      	strb	r3, [r7, #15]
  xBasicAddress.xFilterOnBroadcastAddress = EN_FILT_BROADCAST_ADDRESS;
 8001884:	2301      	movs	r3, #1
 8001886:	743b      	strb	r3, [r7, #16]
  xBasicAddress.cBroadcastAddress = BROADCAST_ADDRESS;
 8001888:	23ff      	movs	r3, #255	; 0xff
 800188a:	747b      	strb	r3, [r7, #17]
  SpiritPktBasicAddressesInit(&xBasicAddress);
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	4618      	mov	r0, r3
 8001892:	f000 fe2b 	bl	80024ec <SpiritPktBasicAddressesInit>

  // Configure GPIO3 as interrupt request pin (active low)
  xGpioInit.xSpiritGpioPin = SPIRIT_GPIO_3;
 8001896:	2302      	movs	r3, #2
 8001898:	723b      	strb	r3, [r7, #8]
  xGpioInit.xSpiritGpioMode = SPIRIT_GPIO_MODE_DIGITAL_OUTPUT_LP;
 800189a:	2302      	movs	r3, #2
 800189c:	727b      	strb	r3, [r7, #9]
  xGpioInit.xSpiritGpioIO = SPIRIT_GPIO_DIG_OUT_IRQ;
 800189e:	2300      	movs	r3, #0
 80018a0:	72bb      	strb	r3, [r7, #10]
  SpiritGpioInit(&xGpioInit);
 80018a2:	f107 0308 	add.w	r3, r7, #8
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 fa16 	bl	8001cd8 <SpiritGpioInit>

  // Generate an interrupt request for the following IRQs
  SpiritIrqDeInit(NULL);
 80018ac:	2000      	movs	r0, #0
 80018ae:	f000 fa37 	bl	8001d20 <SpiritIrqDeInit>
  SpiritIrq(TX_DATA_SENT, S_ENABLE);
 80018b2:	2101      	movs	r1, #1
 80018b4:	2004      	movs	r0, #4
 80018b6:	f000 fa5f 	bl	8001d78 <SpiritIrq>
  SpiritIrq(RX_DATA_READY, S_ENABLE);
 80018ba:	2101      	movs	r1, #1
 80018bc:	2001      	movs	r0, #1
 80018be:	f000 fa5b 	bl	8001d78 <SpiritIrq>
  SpiritIrq(RX_DATA_DISC, S_ENABLE);
 80018c2:	2101      	movs	r1, #1
 80018c4:	2002      	movs	r0, #2
 80018c6:	f000 fa57 	bl	8001d78 <SpiritIrq>
  SpiritIrq(RX_TIMEOUT, S_ENABLE);
 80018ca:	2101      	movs	r1, #1
 80018cc:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80018d0:	f000 fa52 	bl	8001d78 <SpiritIrq>
  SpiritIrqClearStatus();
 80018d4:	f000 fae8 	bl	8001ea8 <SpiritIrqClearStatus>

  // Enable the synchronization quality indicator check (perfect match required)
  // NOTE: 9.10.4: "It is recommended to always enable the SQI check."
  SpiritQiSetSqiThreshold(SQI_TH_0);
 80018d8:	2000      	movs	r0, #0
 80018da:	f000 feff 	bl	80026dc <SpiritQiSetSqiThreshold>
  SpiritQiSqiCheck(S_ENABLE);
 80018de:	2001      	movs	r0, #1
 80018e0:	f000 fec4 	bl	800266c <SpiritQiSqiCheck>

  // Set the RSSI Threshold for Carrier Sense (9.10.2)
  // NOTE: CS_MODE = 0 at reset
  SpiritQiSetRssiThresholddBm(RSSI_THRESHOLD);
 80018e4:	f06f 0077 	mvn.w	r0, #119	; 0x77
 80018e8:	f000 ff2c 	bl	8002744 <SpiritQiSetRssiThresholddBm>

  // Configure the RX timeout
#ifdef RECEIVE_TIMEOUT
  SpiritTimerSetRxTimeoutMs(RECEIVE_TIMEOUT);
 80018ec:	4809      	ldr	r0, [pc, #36]	; (8001914 <SPSGRF_Init+0x160>)
 80018ee:	f002 f907 	bl	8003b00 <SpiritTimerSetRxTimeoutMs>
#else
  SET_INFINITE_RX_TIMEOUT();
#endif /* RECIEVE_TIMEOUT */
  SpiritTimerSetRxTimeoutStopCondition(SQI_ABOVE_THRESHOLD);
 80018f2:	2002      	movs	r0, #2
 80018f4:	f002 fa92 	bl	8003e1c <SpiritTimerSetRxTimeoutStopCondition>
}
 80018f8:	bf00      	nop
 80018fa:	3740      	adds	r7, #64	; 0x40
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	20000128 	.word	0x20000128
 8001904:	3689cac0 	.word	0x3689cac0
 8001908:	000186a0 	.word	0x000186a0
 800190c:	02faf080 	.word	0x02faf080
 8001910:	4139999a 	.word	0x4139999a
 8001914:	44fa0000 	.word	0x44fa0000

08001918 <SPSGRF_StartRx>:
* @brief  Enter the receive state.
* @param  None
* @retval None
*/
void SPSGRF_StartRx(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	af00      	add	r7, sp, #0
//Fix state
	SpiritCmdStrobeSabort();
 800191c:	2067      	movs	r0, #103	; 0x67
 800191e:	f000 f9c3 	bl	8001ca8 <SpiritCmdStrobeCommand>
  SpiritCmdStrobeRx();
 8001922:	f000 fcb7 	bl	8002294 <SpiritManagementWaCmdStrobeRx>
 8001926:	2061      	movs	r0, #97	; 0x61
 8001928:	f000 f9be 	bl	8001ca8 <SpiritCmdStrobeCommand>
}
 800192c:	bf00      	nop
 800192e:	bd80      	pop	{r7, pc}

08001930 <SPSGRF_GetRxData>:
* @brief  To be called after a reception is complete
* @param  rxBuff: pointer to a buffer to hold the received data
* @retval Number of bytes received
*/
uint8_t SPSGRF_GetRxData(uint8_t *rxBuff)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint8_t len;

  len = SpiritLinearFifoReadNumElementsRxFifo();
 8001938:	f000 face 	bl	8001ed8 <SpiritLinearFifoReadNumElementsRxFifo>
 800193c:	4603      	mov	r3, r0
 800193e:	73fb      	strb	r3, [r7, #15]
  SpiritSpiReadLinearFifo(len, rxBuff);
 8001940:	7bfb      	ldrb	r3, [r7, #15]
 8001942:	6879      	ldr	r1, [r7, #4]
 8001944:	4618      	mov	r0, r3
 8001946:	f002 fbbb 	bl	80040c0 <RadioSpiReadFifo>

  return len;
 800194a:	7bfb      	ldrb	r3, [r7, #15]
}
 800194c:	4618      	mov	r0, r3
 800194e:	3710      	adds	r7, #16
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001954:	b480      	push	{r7}
 8001956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001958:	e7fe      	b.n	8001958 <NMI_Handler+0x4>

0800195a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800195a:	b480      	push	{r7}
 800195c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195e:	e7fe      	b.n	800195e <HardFault_Handler+0x4>

08001960 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001964:	e7fe      	b.n	8001964 <MemManage_Handler+0x4>

08001966 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001966:	b480      	push	{r7}
 8001968:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800196a:	e7fe      	b.n	800196a <BusFault_Handler+0x4>

0800196c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001970:	e7fe      	b.n	8001970 <UsageFault_Handler+0x4>

08001972 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001972:	b480      	push	{r7}
 8001974:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001976:	bf00      	nop
 8001978:	46bd      	mov	sp, r7
 800197a:	bc80      	pop	{r7}
 800197c:	4770      	bx	lr

0800197e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr

0800198a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr

08001996 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199a:	f002 fc4d 	bl	8004238 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
#endif
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr
	...

080019b0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019b4:	4b11      	ldr	r3, [pc, #68]	; (80019fc <MX_USART2_UART_Init+0x4c>)
 80019b6:	4a12      	ldr	r2, [pc, #72]	; (8001a00 <MX_USART2_UART_Init+0x50>)
 80019b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ba:	4b10      	ldr	r3, [pc, #64]	; (80019fc <MX_USART2_UART_Init+0x4c>)
 80019bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019c2:	4b0e      	ldr	r3, [pc, #56]	; (80019fc <MX_USART2_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <MX_USART2_UART_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019ce:	4b0b      	ldr	r3, [pc, #44]	; (80019fc <MX_USART2_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019d4:	4b09      	ldr	r3, [pc, #36]	; (80019fc <MX_USART2_UART_Init+0x4c>)
 80019d6:	220c      	movs	r2, #12
 80019d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019da:	4b08      	ldr	r3, [pc, #32]	; (80019fc <MX_USART2_UART_Init+0x4c>)
 80019dc:	2200      	movs	r2, #0
 80019de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <MX_USART2_UART_Init+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019e6:	4805      	ldr	r0, [pc, #20]	; (80019fc <MX_USART2_UART_Init+0x4c>)
 80019e8:	f004 fcf0 	bl	80063cc <HAL_UART_Init>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019f2:	f7ff fe41 	bl	8001678 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000098 	.word	0x20000098
 8001a00:	40004400 	.word	0x40004400

08001a04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b08a      	sub	sp, #40	; 0x28
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a0c:	f107 0314 	add.w	r3, r7, #20
 8001a10:	2200      	movs	r2, #0
 8001a12:	601a      	str	r2, [r3, #0]
 8001a14:	605a      	str	r2, [r3, #4]
 8001a16:	609a      	str	r2, [r3, #8]
 8001a18:	60da      	str	r2, [r3, #12]
 8001a1a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_UART_MspInit+0x7c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d128      	bne.n	8001a78 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a26:	4b17      	ldr	r3, [pc, #92]	; (8001a84 <HAL_UART_MspInit+0x80>)
 8001a28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2a:	4a16      	ldr	r2, [pc, #88]	; (8001a84 <HAL_UART_MspInit+0x80>)
 8001a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a30:	6593      	str	r3, [r2, #88]	; 0x58
 8001a32:	4b14      	ldr	r3, [pc, #80]	; (8001a84 <HAL_UART_MspInit+0x80>)
 8001a34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	613b      	str	r3, [r7, #16]
 8001a3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <HAL_UART_MspInit+0x80>)
 8001a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a42:	4a10      	ldr	r2, [pc, #64]	; (8001a84 <HAL_UART_MspInit+0x80>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <HAL_UART_MspInit+0x80>)
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
 8001a54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a56:	230c      	movs	r3, #12
 8001a58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5a:	2302      	movs	r3, #2
 8001a5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a62:	2303      	movs	r3, #3
 8001a64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a66:	2307      	movs	r3, #7
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a6a:	f107 0314 	add.w	r3, r7, #20
 8001a6e:	4619      	mov	r1, r3
 8001a70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001a74:	f002 fd60 	bl	8004538 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001a78:	bf00      	nop
 8001a7a:	3728      	adds	r7, #40	; 0x28
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	bd80      	pop	{r7, pc}
 8001a80:	40004400 	.word	0x40004400
 8001a84:	40021000 	.word	0x40021000

08001a88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a8c:	f7ff ff89 	bl	80019a2 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a90:	480c      	ldr	r0, [pc, #48]	; (8001ac4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a92:	490d      	ldr	r1, [pc, #52]	; (8001ac8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <LoopForever+0xe>)
  movs r3, #0
 8001a96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a98:	e002      	b.n	8001aa0 <LoopCopyDataInit>

08001a9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9e:	3304      	adds	r3, #4

08001aa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001aa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa4:	d3f9      	bcc.n	8001a9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa8:	4c0a      	ldr	r4, [pc, #40]	; (8001ad4 <LoopForever+0x16>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aac:	e001      	b.n	8001ab2 <LoopFillZerobss>

08001aae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ab0:	3204      	adds	r2, #4

08001ab2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ab2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab4:	d3fb      	bcc.n	8001aae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f005 fa35 	bl	8006f24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aba:	f7ff fcf3 	bl	80014a4 <main>

08001abe <LoopForever>:

LoopForever:
    b LoopForever
 8001abe:	e7fe      	b.n	8001abe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ac0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001acc:	08007220 	.word	0x08007220
  ldr r2, =_sbss
 8001ad0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001ad4:	20000130 	.word	0x20000130

08001ad8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC1_2_IRQHandler>
	...

08001adc <SpiritCalibrationVco>:
 * @param  xNewState new state for VCO calibration.
           This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritCalibrationVco(SpiritFunctionalState xNewState)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001ae6:	f107 030f 	add.w	r3, r7, #15
 8001aea:	461a      	mov	r2, r3
 8001aec:	2101      	movs	r1, #1
 8001aee:	2050      	movs	r0, #80	; 0x50
 8001af0:	f002 fa5a 	bl	8003fa8 <RadioSpiReadRegisters>
 8001af4:	4602      	mov	r2, r0
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <SpiritCalibrationVco+0x6c>)
 8001af8:	b212      	sxth	r2, r2
 8001afa:	4611      	mov	r1, r2
 8001afc:	7019      	strb	r1, [r3, #0]
 8001afe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b02:	705a      	strb	r2, [r3, #1]

   /* Build new value for the register */
  if(xNewState==S_ENABLE)
 8001b04:	79fb      	ldrb	r3, [r7, #7]
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d105      	bne.n	8001b16 <SpiritCalibrationVco+0x3a>
    tempRegValue |= PROTOCOL2_VCO_CALIBRATION_MASK;
 8001b0a:	7bfb      	ldrb	r3, [r7, #15]
 8001b0c:	f043 0302 	orr.w	r3, r3, #2
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	73fb      	strb	r3, [r7, #15]
 8001b14:	e004      	b.n	8001b20 <SpiritCalibrationVco+0x44>
  else
    tempRegValue &= ~PROTOCOL2_VCO_CALIBRATION_MASK;
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	f023 0302 	bic.w	r3, r3, #2
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	73fb      	strb	r3, [r7, #15]

  /* Writes register to enable or disable the VCO calibration */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL2_BASE, 1, &tempRegValue);
 8001b20:	f107 030f 	add.w	r3, r7, #15
 8001b24:	461a      	mov	r2, r3
 8001b26:	2101      	movs	r1, #1
 8001b28:	2050      	movs	r0, #80	; 0x50
 8001b2a:	f002 f9f1 	bl	8003f10 <RadioSpiWriteRegisters>
 8001b2e:	4602      	mov	r2, r0
 8001b30:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <SpiritCalibrationVco+0x6c>)
 8001b32:	b212      	sxth	r2, r2
 8001b34:	4611      	mov	r1, r2
 8001b36:	7019      	strb	r1, [r3, #0]
 8001b38:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b3c:	705a      	strb	r2, [r3, #1]

}
 8001b3e:	bf00      	nop
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	20000128 	.word	0x20000128

08001b4c <SpiritCalibrationGetVcoCalData>:
 * @brief  Returns the VCO calibration data from internal VCO calibrator.
 * @param  None.
 * @retval uint8_t VCO calibration data word.
 */
uint8_t SpiritCalibrationGetVcoCalData(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_OUT0_BASE, 1, &tempRegValue);
 8001b52:	1dfb      	adds	r3, r7, #7
 8001b54:	461a      	mov	r2, r3
 8001b56:	2101      	movs	r1, #1
 8001b58:	20e5      	movs	r0, #229	; 0xe5
 8001b5a:	f002 fa25 	bl	8003fa8 <RadioSpiReadRegisters>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	4b07      	ldr	r3, [pc, #28]	; (8001b80 <SpiritCalibrationGetVcoCalData+0x34>)
 8001b62:	b212      	sxth	r2, r2
 8001b64:	4611      	mov	r1, r2
 8001b66:	7019      	strb	r1, [r3, #0]
 8001b68:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001b6c:	705a      	strb	r2, [r3, #1]

  /* Build and returns the VCO calibration data value */
  return (tempRegValue & 0x7F);
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001b74:	b2db      	uxtb	r3, r3

}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000128 	.word	0x20000128

08001b84 <SpiritCalibrationSetVcoCalDataTx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataTx(uint8_t cVcoCalData)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b084      	sub	sp, #16
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001b8e:	f107 030f 	add.w	r3, r7, #15
 8001b92:	461a      	mov	r2, r3
 8001b94:	2101      	movs	r1, #1
 8001b96:	206e      	movs	r0, #110	; 0x6e
 8001b98:	f002 fa06 	bl	8003fa8 <RadioSpiReadRegisters>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	4b12      	ldr	r3, [pc, #72]	; (8001be8 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001ba0:	b212      	sxth	r2, r2
 8001ba2:	4611      	mov	r1, r2
 8001ba4:	7019      	strb	r1, [r3, #0]
 8001ba6:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001baa:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001bb6:	7bfa      	ldrb	r2, [r7, #15]
 8001bb8:	79fb      	ldrb	r3, [r7, #7]
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in TX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN1_BASE, 1, &tempRegValue);
 8001bc0:	f107 030f 	add.w	r3, r7, #15
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2101      	movs	r1, #1
 8001bc8:	206e      	movs	r0, #110	; 0x6e
 8001bca:	f002 f9a1 	bl	8003f10 <RadioSpiWriteRegisters>
 8001bce:	4602      	mov	r2, r0
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SpiritCalibrationSetVcoCalDataTx+0x64>)
 8001bd2:	b212      	sxth	r2, r2
 8001bd4:	4611      	mov	r1, r2
 8001bd6:	7019      	strb	r1, [r3, #0]
 8001bd8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001bdc:	705a      	strb	r2, [r3, #1]

}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	20000128 	.word	0x20000128

08001bec <SpiritCalibrationSetVcoCalDataRx>:
 * @param  cVcoCalData calibration data word to be set.
 *         This parameter is a variable of uint8_t.
 * @retval None.
 */
void SpiritCalibrationSetVcoCalDataRx(uint8_t cVcoCalData)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b084      	sub	sp, #16
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001bf6:	f107 030f 	add.w	r3, r7, #15
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	2101      	movs	r1, #1
 8001bfe:	206f      	movs	r0, #111	; 0x6f
 8001c00:	f002 f9d2 	bl	8003fa8 <RadioSpiReadRegisters>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001c08:	b212      	sxth	r2, r2
 8001c0a:	4611      	mov	r1, r2
 8001c0c:	7019      	strb	r1, [r3, #0]
 8001c0e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c12:	705a      	strb	r2, [r3, #1]

  /* Build the value to be written */
  tempRegValue &= 0x80;
 8001c14:	7bfb      	ldrb	r3, [r7, #15]
 8001c16:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cVcoCalData;
 8001c1e:	7bfa      	ldrb	r2, [r7, #15]
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	4313      	orrs	r3, r2
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value of calibration data in RX */
  g_xStatus = SpiritSpiWriteRegisters(RCO_VCO_CALIBR_IN0_BASE, 1, &tempRegValue);
 8001c28:	f107 030f 	add.w	r3, r7, #15
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	2101      	movs	r1, #1
 8001c30:	206f      	movs	r0, #111	; 0x6f
 8001c32:	f002 f96d 	bl	8003f10 <RadioSpiWriteRegisters>
 8001c36:	4602      	mov	r2, r0
 8001c38:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <SpiritCalibrationSetVcoCalDataRx+0x64>)
 8001c3a:	b212      	sxth	r2, r2
 8001c3c:	4611      	mov	r1, r2
 8001c3e:	7019      	strb	r1, [r3, #0]
 8001c40:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001c44:	705a      	strb	r2, [r3, #1]

}
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000128 	.word	0x20000128

08001c54 <SpiritCalibrationSelectVco>:
 * @param  xVco can be VCO_H or VCO_L according to which VCO select.
 *         This parameter can be a value of @ref VcoSel.
 * @retval None.
 */
void SpiritCalibrationSelectVco(VcoSel xVco)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue;
  
  /* Check the parameter */
  s_assert_param(IS_VCO_SEL(xVco));
  
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8001c5e:	f107 030f 	add.w	r3, r7, #15
 8001c62:	461a      	mov	r2, r3
 8001c64:	2101      	movs	r1, #1
 8001c66:	209e      	movs	r0, #158	; 0x9e
 8001c68:	f002 f99e 	bl	8003fa8 <RadioSpiReadRegisters>
  
  tempRegValue &= 0xF9;
 8001c6c:	7bfb      	ldrb	r3, [r7, #15]
 8001c6e:	f023 0306 	bic.w	r3, r3, #6
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	73fb      	strb	r3, [r7, #15]
  
  if(xVco == VCO_H)
 8001c76:	79fb      	ldrb	r3, [r7, #7]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d105      	bne.n	8001c88 <SpiritCalibrationSelectVco+0x34>
  {
    tempRegValue |= 0x02;
 8001c7c:	7bfb      	ldrb	r3, [r7, #15]
 8001c7e:	f043 0302 	orr.w	r3, r3, #2
 8001c82:	b2db      	uxtb	r3, r3
 8001c84:	73fb      	strb	r3, [r7, #15]
 8001c86:	e004      	b.n	8001c92 <SpiritCalibrationSelectVco+0x3e>
    
  }
  else
  {
    tempRegValue |= 0x04;
 8001c88:	7bfb      	ldrb	r3, [r7, #15]
 8001c8a:	f043 0304 	orr.w	r3, r3, #4
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	73fb      	strb	r3, [r7, #15]
  }
  SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);  
 8001c92:	f107 030f 	add.w	r3, r7, #15
 8001c96:	461a      	mov	r2, r3
 8001c98:	2101      	movs	r1, #1
 8001c9a:	209e      	movs	r0, #158	; 0x9e
 8001c9c:	f002 f938 	bl	8003f10 <RadioSpiWriteRegisters>
  
}
 8001ca0:	bf00      	nop
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <SpiritCmdStrobeCommand>:
 * @param  xCommandCode code of the command to send.
           This parameter can be any value of @ref SpiritCmd.
 * @retval None.
 */
void SpiritCmdStrobeCommand(SpiritCmd xCommandCode)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	4603      	mov	r3, r0
 8001cb0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_CMD(xCommandCode));

  g_xStatus = SpiritSpiCommandStrobes((uint8_t) xCommandCode);
 8001cb2:	79fb      	ldrb	r3, [r7, #7]
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	f002 f9c3 	bl	8004040 <RadioSpiCommandStrobes>
 8001cba:	4602      	mov	r2, r0
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <SpiritCmdStrobeCommand+0x2c>)
 8001cbe:	b212      	sxth	r2, r2
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	7019      	strb	r1, [r3, #0]
 8001cc4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001cc8:	705a      	strb	r2, [r3, #1]
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	20000128 	.word	0x20000128

08001cd8 <SpiritGpioInit>:
 * @param  pxGpioInitStruct pointer to a SGpioInit structure that
 *         contains the configuration information for the specified SPIRIT GPIO.
 * @retval None.
 */
void SpiritGpioInit(SGpioInit* pxGpioInitStruct)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b084      	sub	sp, #16
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue = 0x00;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_GPIO(pxGpioInitStruct->xSpiritGpioPin));
  s_assert_param(IS_SPIRIT_GPIO_MODE(pxGpioInitStruct->xSpiritGpioMode));
  s_assert_param(IS_SPIRIT_GPIO_IO(pxGpioInitStruct->xSpiritGpioIO));

  tempRegValue = ((uint8_t)(pxGpioInitStruct->xSpiritGpioMode) | (uint8_t)(pxGpioInitStruct->xSpiritGpioIO));
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	785a      	ldrb	r2, [r3, #1]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	789b      	ldrb	r3, [r3, #2]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	73fb      	strb	r3, [r7, #15]

  g_xStatus = SpiritSpiWriteRegisters(pxGpioInitStruct->xSpiritGpioPin, 1, &tempRegValue);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	f107 020f 	add.w	r2, r7, #15
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f002 f907 	bl	8003f10 <RadioSpiWriteRegisters>
 8001d02:	4602      	mov	r2, r0
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SpiritGpioInit+0x44>)
 8001d06:	b212      	sxth	r2, r2
 8001d08:	4611      	mov	r1, r2
 8001d0a:	7019      	strb	r1, [r3, #0]
 8001d0c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d10:	705a      	strb	r2, [r3, #1]

}
 8001d12:	bf00      	nop
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	20000128 	.word	0x20000128

08001d20 <SpiritIrqDeInit>:
 * @param  pxIrqInit pointer to a variable of type @ref SpiritIrqs, in which all the
 *         bitfields will be settled to zero.
 * @retval None.
 */
void SpiritIrqDeInit(SpiritIrqs* pxIrqInit)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4]={0x00,0x00,0x00,0x00};
 8001d28:	2300      	movs	r3, #0
 8001d2a:	60fb      	str	r3, [r7, #12]

  if(pxIrqInit!=NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d00c      	beq.n	8001d4c <SpiritIrqDeInit+0x2c>
  {
	  //SRA: fix for "dereferencing type-punned pointer will break strict-aliasing rules" warning
    //uint32_t tempValue = 0x00000000;
	SpiritIrqs tempValue;
	memset(&tempValue, 0x00, sizeof(SpiritIrqs));
 8001d32:	f107 0308 	add.w	r3, r7, #8
 8001d36:	2204      	movs	r2, #4
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f005 f8e9 	bl	8006f12 <memset>

    /* Sets the bitfields of passed structure to one */
    *pxIrqInit = (*(SpiritIrqs*)(&tempValue));
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	461a      	mov	r2, r3
 8001d44:	f107 0308 	add.w	r3, r7, #8
 8001d48:	6818      	ldr	r0, [r3, #0]
 8001d4a:	6010      	str	r0, [r2, #0]
  }

  /* Writes the IRQ_MASK registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001d4c:	f107 030c 	add.w	r3, r7, #12
 8001d50:	461a      	mov	r2, r3
 8001d52:	2104      	movs	r1, #4
 8001d54:	2090      	movs	r0, #144	; 0x90
 8001d56:	f002 f8db 	bl	8003f10 <RadioSpiWriteRegisters>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b05      	ldr	r3, [pc, #20]	; (8001d74 <SpiritIrqDeInit+0x54>)
 8001d5e:	b212      	sxth	r2, r2
 8001d60:	4611      	mov	r1, r2
 8001d62:	7019      	strb	r1, [r3, #0]
 8001d64:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001d68:	705a      	strb	r2, [r3, #1]
}
 8001d6a:	bf00      	nop
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	20000128 	.word	0x20000128

08001d78 <SpiritIrq>:
 * @param  xNewState new state for the IRQ.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritIrq(IrqList xIrq, SpiritFunctionalState xNewState)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b086      	sub	sp, #24
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	460b      	mov	r3, r1
 8001d82:	70fb      	strb	r3, [r7, #3]
  uint8_t tempRegValue[4];
  uint32_t tempValue = 0;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_IRQ_LIST(xIrq));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the IRQ_MASK registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001d88:	f107 030c 	add.w	r3, r7, #12
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2104      	movs	r1, #4
 8001d90:	2090      	movs	r0, #144	; 0x90
 8001d92:	f002 f909 	bl	8003fa8 <RadioSpiReadRegisters>
 8001d96:	4602      	mov	r2, r0
 8001d98:	4b29      	ldr	r3, [pc, #164]	; (8001e40 <SpiritIrq+0xc8>)
 8001d9a:	b212      	sxth	r2, r2
 8001d9c:	4611      	mov	r1, r2
 8001d9e:	7019      	strb	r1, [r3, #0]
 8001da0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001da4:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ mask word */
  for(uint8_t i=0; i<4; i++)
 8001da6:	2300      	movs	r3, #0
 8001da8:	74fb      	strb	r3, [r7, #19]
 8001daa:	e011      	b.n	8001dd0 <SpiritIrq+0x58>
  {
    tempValue += ((uint32_t)tempRegValue[i])<<(8*(3-i));
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	3318      	adds	r3, #24
 8001db0:	443b      	add	r3, r7
 8001db2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001db6:	461a      	mov	r2, r3
 8001db8:	7cfb      	ldrb	r3, [r7, #19]
 8001dba:	f1c3 0303 	rsb	r3, r3, #3
 8001dbe:	00db      	lsls	r3, r3, #3
 8001dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc4:	697a      	ldr	r2, [r7, #20]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001dca:	7cfb      	ldrb	r3, [r7, #19]
 8001dcc:	3301      	adds	r3, #1
 8001dce:	74fb      	strb	r3, [r7, #19]
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	2b03      	cmp	r3, #3
 8001dd4:	d9ea      	bls.n	8001dac <SpiritIrq+0x34>
  }
  
  /* Rebuild the new mask according to user request */
  if(xNewState == S_DISABLE)
 8001dd6:	78fb      	ldrb	r3, [r7, #3]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d105      	bne.n	8001de8 <SpiritIrq+0x70>
  {
    tempValue &= (~xIrq);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	43db      	mvns	r3, r3
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4013      	ands	r3, r2
 8001de4:	617b      	str	r3, [r7, #20]
 8001de6:	e003      	b.n	8001df0 <SpiritIrq+0x78>
  }
  else
  {
    tempValue |= (xIrq);
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4313      	orrs	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
  }

  /* Build the array of bytes to write in the IRQ_MASK registers */
  for(uint8_t j=0; j<4; j++)
 8001df0:	2300      	movs	r3, #0
 8001df2:	74bb      	strb	r3, [r7, #18]
 8001df4:	e00e      	b.n	8001e14 <SpiritIrq+0x9c>
  {
    tempRegValue[j] = (uint8_t)(tempValue>>(8*(3-j)));
 8001df6:	7cbb      	ldrb	r3, [r7, #18]
 8001df8:	f1c3 0303 	rsb	r3, r3, #3
 8001dfc:	00db      	lsls	r3, r3, #3
 8001dfe:	697a      	ldr	r2, [r7, #20]
 8001e00:	40da      	lsrs	r2, r3
 8001e02:	7cbb      	ldrb	r3, [r7, #18]
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	3318      	adds	r3, #24
 8001e08:	443b      	add	r3, r7
 8001e0a:	f803 2c0c 	strb.w	r2, [r3, #-12]
  for(uint8_t j=0; j<4; j++)
 8001e0e:	7cbb      	ldrb	r3, [r7, #18]
 8001e10:	3301      	adds	r3, #1
 8001e12:	74bb      	strb	r3, [r7, #18]
 8001e14:	7cbb      	ldrb	r3, [r7, #18]
 8001e16:	2b03      	cmp	r3, #3
 8001e18:	d9ed      	bls.n	8001df6 <SpiritIrq+0x7e>
  }
  
  /* Writes the new IRQ mask in the corresponding registers */
  g_xStatus = SpiritSpiWriteRegisters(IRQ_MASK3_BASE, 4, tempRegValue);
 8001e1a:	f107 030c 	add.w	r3, r7, #12
 8001e1e:	461a      	mov	r2, r3
 8001e20:	2104      	movs	r1, #4
 8001e22:	2090      	movs	r0, #144	; 0x90
 8001e24:	f002 f874 	bl	8003f10 <RadioSpiWriteRegisters>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <SpiritIrq+0xc8>)
 8001e2c:	b212      	sxth	r2, r2
 8001e2e:	4611      	mov	r1, r2
 8001e30:	7019      	strb	r1, [r3, #0]
 8001e32:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e36:	705a      	strb	r2, [r3, #1]

}
 8001e38:	bf00      	nop
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000128 	.word	0x20000128

08001e44 <SpiritIrqGetStatus>:
 * myIrqStatus.IRQ_XO_COUNT_EXPIRED and myIrqStatus.IRQ_VALID_SYNC are equals to 1
 * while all the other bitfields are equals to zero.
 * @retval None.
 */
void SpiritIrqGetStatus(SpiritIrqs* pxIrqStatus)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[4];
  uint8_t* pIrqPointer = (uint8_t*)pxIrqStatus;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	617b      	str	r3, [r7, #20]
  
  /* Reads IRQ_STATUS registers */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001e50:	f107 030c 	add.w	r3, r7, #12
 8001e54:	461a      	mov	r2, r3
 8001e56:	2104      	movs	r1, #4
 8001e58:	20fa      	movs	r0, #250	; 0xfa
 8001e5a:	f002 f8a5 	bl	8003fa8 <RadioSpiReadRegisters>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	4b10      	ldr	r3, [pc, #64]	; (8001ea4 <SpiritIrqGetStatus+0x60>)
 8001e62:	b212      	sxth	r2, r2
 8001e64:	4611      	mov	r1, r2
 8001e66:	7019      	strb	r1, [r3, #0]
 8001e68:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001e6c:	705a      	strb	r2, [r3, #1]

  /* Build the IRQ Status word */
  for(uint8_t i=0; i<4; i++)
 8001e6e:	2300      	movs	r3, #0
 8001e70:	74fb      	strb	r3, [r7, #19]
 8001e72:	e00e      	b.n	8001e92 <SpiritIrqGetStatus+0x4e>
  {
    *pIrqPointer = tempRegValue[3-i];
 8001e74:	7cfb      	ldrb	r3, [r7, #19]
 8001e76:	f1c3 0303 	rsb	r3, r3, #3
 8001e7a:	3318      	adds	r3, #24
 8001e7c:	443b      	add	r3, r7
 8001e7e:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	701a      	strb	r2, [r3, #0]
    pIrqPointer++;
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
  for(uint8_t i=0; i<4; i++)
 8001e8c:	7cfb      	ldrb	r3, [r7, #19]
 8001e8e:	3301      	adds	r3, #1
 8001e90:	74fb      	strb	r3, [r7, #19]
 8001e92:	7cfb      	ldrb	r3, [r7, #19]
 8001e94:	2b03      	cmp	r3, #3
 8001e96:	d9ed      	bls.n	8001e74 <SpiritIrqGetStatus+0x30>
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3718      	adds	r7, #24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}
 8001ea2:	bf00      	nop
 8001ea4:	20000128 	.word	0x20000128

08001ea8 <SpiritIrqClearStatus>:
 * @brief  Clear the IRQ status registers.
 * @param  None.
 * @retval None.
 */
void SpiritIrqClearStatus(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b082      	sub	sp, #8
 8001eac:	af00      	add	r7, sp, #0
  uint8_t tempRegValue[4];

  /* Reads the IRQ_STATUS registers clearing all the flags */
  g_xStatus = SpiritSpiReadRegisters(IRQ_STATUS3_BASE, 4, tempRegValue);
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	2104      	movs	r1, #4
 8001eb4:	20fa      	movs	r0, #250	; 0xfa
 8001eb6:	f002 f877 	bl	8003fa8 <RadioSpiReadRegisters>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	4b05      	ldr	r3, [pc, #20]	; (8001ed4 <SpiritIrqClearStatus+0x2c>)
 8001ebe:	b212      	sxth	r2, r2
 8001ec0:	4611      	mov	r1, r2
 8001ec2:	7019      	strb	r1, [r3, #0]
 8001ec4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ec8:	705a      	strb	r2, [r3, #1]

}
 8001eca:	bf00      	nop
 8001ecc:	3708      	adds	r7, #8
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bd80      	pop	{r7, pc}
 8001ed2:	bf00      	nop
 8001ed4:	20000128 	.word	0x20000128

08001ed8 <SpiritLinearFifoReadNumElementsRxFifo>:
 * @brief  Returns the number of elements in the Rx FIFO.
 * @param  None.
 * @retval uint8_t Number of elements in the Rx FIFO.
 */
uint8_t SpiritLinearFifoReadNumElementsRxFifo(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;

  /* Reads the register value */
  g_xStatus = SpiritSpiReadRegisters(LINEAR_FIFO_STATUS0_BASE, 1, &tempRegValue);
 8001ede:	1dfb      	adds	r3, r7, #7
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	2101      	movs	r1, #1
 8001ee4:	20e7      	movs	r0, #231	; 0xe7
 8001ee6:	f002 f85f 	bl	8003fa8 <RadioSpiReadRegisters>
 8001eea:	4602      	mov	r2, r0
 8001eec:	4b07      	ldr	r3, [pc, #28]	; (8001f0c <SpiritLinearFifoReadNumElementsRxFifo+0x34>)
 8001eee:	b212      	sxth	r2, r2
 8001ef0:	4611      	mov	r1, r2
 8001ef2:	7019      	strb	r1, [r3, #0]
 8001ef4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8001ef8:	705a      	strb	r2, [r3, #1]

  /* Build and return value */
  return (tempRegValue & 0x7F);
 8001efa:	79fb      	ldrb	r3, [r7, #7]
 8001efc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f00:	b2db      	uxtb	r3, r3

}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3708      	adds	r7, #8
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	20000128 	.word	0x20000128

08001f10 <SpiritManagementSetFrequencyBase>:
* @brief  Private SpiritRadioSetFrequencyBase function only used in SpiritManagementWaVcoCalibration.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval None.
*/
void SpiritManagementSetFrequencyBase(uint32_t lFBase)
{
 8001f10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001f14:	b08a      	sub	sp, #40	; 0x28
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	4a70      	ldr	r2, [pc, #448]	; (80020e0 <SpiritManagementSetFrequencyBase+0x1d0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d307      	bcc.n	8001f32 <SpiritManagementSetFrequencyBase+0x22>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	4a6f      	ldr	r2, [pc, #444]	; (80020e4 <SpiritManagementSetFrequencyBase+0x1d4>)
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d803      	bhi.n	8001f32 <SpiritManagementSetFrequencyBase+0x22>
  {
    band = HIGH_BAND;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f30:	e01a      	b.n	8001f68 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	4a6c      	ldr	r2, [pc, #432]	; (80020e8 <SpiritManagementSetFrequencyBase+0x1d8>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d907      	bls.n	8001f4a <SpiritManagementSetFrequencyBase+0x3a>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	4a6b      	ldr	r2, [pc, #428]	; (80020ec <SpiritManagementSetFrequencyBase+0x1dc>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d803      	bhi.n	8001f4a <SpiritManagementSetFrequencyBase+0x3a>
  {
    band = MIDDLE_BAND;
 8001f42:	2301      	movs	r3, #1
 8001f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f48:	e00e      	b.n	8001f68 <SpiritManagementSetFrequencyBase+0x58>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4a68      	ldr	r2, [pc, #416]	; (80020f0 <SpiritManagementSetFrequencyBase+0x1e0>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d907      	bls.n	8001f62 <SpiritManagementSetFrequencyBase+0x52>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	4a67      	ldr	r2, [pc, #412]	; (80020f4 <SpiritManagementSetFrequencyBase+0x1e4>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d803      	bhi.n	8001f62 <SpiritManagementSetFrequencyBase+0x52>
  {
    band = LOW_BAND;
 8001f5a:	2302      	movs	r3, #2
 8001f5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001f60:	e002      	b.n	8001f68 <SpiritManagementSetFrequencyBase+0x58>
  }
  else //if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
  {
    band = VERY_LOW_BAND;
 8001f62:	2303      	movs	r3, #3
 8001f64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8001f68:	f000 ff52 	bl	8002e10 <SpiritRadioGetFrequencyOffset>
 8001f6c:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8001f6e:	f000 ff2f 	bl	8002dd0 <SpiritRadioGetChannelSpace>
 8001f72:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8001f74:	f000 ff14 	bl	8002da0 <SpiritRadioGetChannel>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8001f7c:	6a3a      	ldr	r2, [r7, #32]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	441a      	add	r2, r3
 8001f82:	7efb      	ldrb	r3, [r7, #27]
 8001f84:	69f9      	ldr	r1, [r7, #28]
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8001f8e:	f001 fd2b 	bl	80039e8 <SpiritRadioGetRefDiv>
 8001f92:	4603      	mov	r3, r0
 8001f94:	3301      	adds	r3, #1
 8001f96:	74fb      	strb	r3, [r7, #19]
  
  switch(band)
 8001f98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d83a      	bhi.n	8002016 <SpiritManagementSetFrequencyBase+0x106>
 8001fa0:	a201      	add	r2, pc, #4	; (adr r2, 8001fa8 <SpiritManagementSetFrequencyBase+0x98>)
 8001fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa6:	bf00      	nop
 8001fa8:	08002001 	.word	0x08002001
 8001fac:	08001fe9 	.word	0x08001fe9
 8001fb0:	08001fd1 	.word	0x08001fd1
 8001fb4:	08001fb9 	.word	0x08001fb9
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	4a4f      	ldr	r2, [pc, #316]	; (80020f8 <SpiritManagementSetFrequencyBase+0x1e8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d803      	bhi.n	8001fc8 <SpiritManagementSetFrequencyBase+0xb8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001fc0:	2000      	movs	r0, #0
 8001fc2:	f7ff fe47 	bl	8001c54 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001fc6:	e026      	b.n	8002016 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001fc8:	2001      	movs	r0, #1
 8001fca:	f7ff fe43 	bl	8001c54 <SpiritCalibrationSelectVco>
    break;
 8001fce:	e022      	b.n	8002016 <SpiritManagementSetFrequencyBase+0x106>
    
  case LOW_BAND:
    if(Fc<322562500)
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	4a4a      	ldr	r2, [pc, #296]	; (80020fc <SpiritManagementSetFrequencyBase+0x1ec>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d803      	bhi.n	8001fe0 <SpiritManagementSetFrequencyBase+0xd0>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001fd8:	2000      	movs	r0, #0
 8001fda:	f7ff fe3b 	bl	8001c54 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001fde:	e01a      	b.n	8002016 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001fe0:	2001      	movs	r0, #1
 8001fe2:	f7ff fe37 	bl	8001c54 <SpiritCalibrationSelectVco>
    break;
 8001fe6:	e016      	b.n	8002016 <SpiritManagementSetFrequencyBase+0x106>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	4a45      	ldr	r2, [pc, #276]	; (8002100 <SpiritManagementSetFrequencyBase+0x1f0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d803      	bhi.n	8001ff8 <SpiritManagementSetFrequencyBase+0xe8>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8001ff0:	2000      	movs	r0, #0
 8001ff2:	f7ff fe2f 	bl	8001c54 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8001ff6:	e00e      	b.n	8002016 <SpiritManagementSetFrequencyBase+0x106>
      SpiritCalibrationSelectVco(VCO_H);
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7ff fe2b 	bl	8001c54 <SpiritCalibrationSelectVco>
    break;
 8001ffe:	e00a      	b.n	8002016 <SpiritManagementSetFrequencyBase+0x106>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	4a40      	ldr	r2, [pc, #256]	; (8002104 <SpiritManagementSetFrequencyBase+0x1f4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d803      	bhi.n	8002010 <SpiritManagementSetFrequencyBase+0x100>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002008:	2000      	movs	r0, #0
 800200a:	f7ff fe23 	bl	8001c54 <SpiritCalibrationSelectVco>
 800200e:	e002      	b.n	8002016 <SpiritManagementSetFrequencyBase+0x106>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002010:	2001      	movs	r0, #1
 8002012:	f7ff fe1f 	bl	8001c54 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8002016:	6978      	ldr	r0, [r7, #20]
 8002018:	f000 fdda 	bl	8002bd0 <SpiritRadioSearchWCP>
 800201c:	4603      	mov	r3, r0
 800201e:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*(((double)(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band]))/SpiritRadioGetXtalFrequency()));
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7fe fa13 	bl	800044c <__aeabi_ui2d>
 8002026:	4604      	mov	r4, r0
 8002028:	460d      	mov	r5, r1
 800202a:	7cfb      	ldrb	r3, [r7, #19]
 800202c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002030:	4935      	ldr	r1, [pc, #212]	; (8002108 <SpiritManagementSetFrequencyBase+0x1f8>)
 8002032:	5c8a      	ldrb	r2, [r1, r2]
 8002034:	fb02 f303 	mul.w	r3, r2, r3
 8002038:	049b      	lsls	r3, r3, #18
 800203a:	4618      	mov	r0, r3
 800203c:	f7fe fa16 	bl	800046c <__aeabi_i2d>
 8002040:	4680      	mov	r8, r0
 8002042:	4689      	mov	r9, r1
 8002044:	f001 fd44 	bl	8003ad0 <SpiritRadioGetXtalFrequency>
 8002048:	4603      	mov	r3, r0
 800204a:	4618      	mov	r0, r3
 800204c:	f7fe f9fe 	bl	800044c <__aeabi_ui2d>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4640      	mov	r0, r8
 8002056:	4649      	mov	r1, r9
 8002058:	f7fe fb9c 	bl	8000794 <__aeabi_ddiv>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4620      	mov	r0, r4
 8002062:	4629      	mov	r1, r5
 8002064:	f7fe fa6c 	bl	8000540 <__aeabi_dmul>
 8002068:	4602      	mov	r2, r0
 800206a:	460b      	mov	r3, r1
 800206c:	4610      	mov	r0, r2
 800206e:	4619      	mov	r1, r3
 8002070:	f7fe fc78 	bl	8000964 <__aeabi_d2uiz>
 8002074:	4603      	mov	r3, r0
 8002076:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	0d5b      	lsrs	r3, r3, #21
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f003 031f 	and.w	r3, r3, #31
 8002082:	b2da      	uxtb	r2, r3
 8002084:	7cbb      	ldrb	r3, [r7, #18]
 8002086:	015b      	lsls	r3, r3, #5
 8002088:	b2db      	uxtb	r3, r3
 800208a:	4313      	orrs	r3, r2
 800208c:	b2db      	uxtb	r3, r3
 800208e:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	0b5b      	lsrs	r3, r3, #13
 8002094:	b2db      	uxtb	r3, r3
 8002096:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	095b      	lsrs	r3, r3, #5
 800209c:	b2db      	uxtb	r3, r3
 800209e:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	b2da      	uxtb	r2, r3
 80020a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80020ac:	4917      	ldr	r1, [pc, #92]	; (800210c <SpiritManagementSetFrequencyBase+0x1fc>)
 80020ae:	5ccb      	ldrb	r3, [r1, r3]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 80020b6:	f107 0308 	add.w	r3, r7, #8
 80020ba:	461a      	mov	r2, r3
 80020bc:	2104      	movs	r1, #4
 80020be:	2008      	movs	r0, #8
 80020c0:	f001 ff26 	bl	8003f10 <RadioSpiWriteRegisters>
 80020c4:	4602      	mov	r2, r0
 80020c6:	4b12      	ldr	r3, [pc, #72]	; (8002110 <SpiritManagementSetFrequencyBase+0x200>)
 80020c8:	b212      	sxth	r2, r2
 80020ca:	4611      	mov	r1, r2
 80020cc:	7019      	strb	r1, [r3, #0]
 80020ce:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80020d2:	705a      	strb	r2, [r3, #1]
}
 80020d4:	bf00      	nop
 80020d6:	3728      	adds	r7, #40	; 0x28
 80020d8:	46bd      	mov	sp, r7
 80020da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80020de:	bf00      	nop
 80020e0:	2e5f5680 	.word	0x2e5f5680
 80020e4:	390c2fe0 	.word	0x390c2fe0
 80020e8:	1701e47f 	.word	0x1701e47f
 80020ec:	1c146a60 	.word	0x1c146a60
 80020f0:	11d260bf 	.word	0x11d260bf
 80020f4:	14ced7e0 	.word	0x14ced7e0
 80020f8:	099cf4e1 	.word	0x099cf4e1
 80020fc:	1339e9c3 	.word	0x1339e9c3
 8002100:	19a28d05 	.word	0x19a28d05
 8002104:	33451a0a 	.word	0x33451a0a
 8002108:	080070b8 	.word	0x080070b8
 800210c:	080070b4 	.word	0x080070b4
 8002110:	20000128 	.word	0x20000128

08002114 <SpiritManagementWaVcoCalibration>:

uint8_t SpiritManagementWaVcoCalibration(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
  uint8_t s_cVcoWordRx;
  uint8_t s_cVcoWordTx;
  uint32_t nFreq;
  uint8_t cRestore = 0;
 800211a:	2300      	movs	r3, #0
 800211c:	73fb      	strb	r3, [r7, #15]
  uint8_t cStandby = 0;
 800211e:	2300      	movs	r3, #0
 8002120:	73bb      	strb	r3, [r7, #14]
  uint32_t xtal_frequency = SpiritRadioGetXtalFrequency();
 8002122:	f001 fcd5 	bl	8003ad0 <SpiritRadioGetXtalFrequency>
 8002126:	60b8      	str	r0, [r7, #8]
  uint8_t nLockwon=0;
 8002128:	2300      	movs	r3, #0
 800212a:	737b      	strb	r3, [r7, #13]
  
  /* Enable the reference divider if the XTAL is between 48 and 52 MHz */
  if(xtal_frequency>DOUBLE_XTAL_THR)
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	4a57      	ldr	r2, [pc, #348]	; (800228c <SpiritManagementWaVcoCalibration+0x178>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d90f      	bls.n	8002154 <SpiritManagementWaVcoCalibration+0x40>
  {
    if(!SpiritRadioGetRefDiv())
 8002134:	f001 fc58 	bl	80039e8 <SpiritRadioGetRefDiv>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d10a      	bne.n	8002154 <SpiritManagementWaVcoCalibration+0x40>
    {
      cRestore = 1;
 800213e:	2301      	movs	r3, #1
 8002140:	73fb      	strb	r3, [r7, #15]
      nFreq = SpiritRadioGetFrequencyBase();
 8002142:	f000 ffc7 	bl	80030d4 <SpiritRadioGetFrequencyBase>
 8002146:	6078      	str	r0, [r7, #4]
      SpiritRadioSetRefDiv(S_ENABLE);
 8002148:	2001      	movs	r0, #1
 800214a:	f001 fc1d 	bl	8003988 <SpiritRadioSetRefDiv>
      SpiritManagementSetFrequencyBase(nFreq);
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff fede 	bl	8001f10 <SpiritManagementSetFrequencyBase>
    }
  }
  nFreq = SpiritRadioGetFrequencyBase();
 8002154:	f000 ffbe 	bl	80030d4 <SpiritRadioGetFrequencyBase>
 8002158:	6078      	str	r0, [r7, #4]
  
  /* Increase the VCO current */
  uint8_t tmp = 0x25; SpiritSpiWriteRegisters(0xA1,1,&tmp);
 800215a:	2325      	movs	r3, #37	; 0x25
 800215c:	707b      	strb	r3, [r7, #1]
 800215e:	1c7b      	adds	r3, r7, #1
 8002160:	461a      	mov	r2, r3
 8002162:	2101      	movs	r1, #1
 8002164:	20a1      	movs	r0, #161	; 0xa1
 8002166:	f001 fed3 	bl	8003f10 <RadioSpiWriteRegisters>
  
  SpiritCalibrationVco(S_ENABLE);
 800216a:	2001      	movs	r0, #1
 800216c:	f7ff fcb6 	bl	8001adc <SpiritCalibrationVco>
  
  SpiritRefreshStatus();
 8002170:	f001 fe9c 	bl	8003eac <SpiritRefreshStatus>
  if(g_xStatus.MC_STATE == MC_STATE_STANDBY)
 8002174:	4b46      	ldr	r3, [pc, #280]	; (8002290 <SpiritManagementWaVcoCalibration+0x17c>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800217c:	b2db      	uxtb	r3, r3
 800217e:	2b40      	cmp	r3, #64	; 0x40
 8002180:	d10d      	bne.n	800219e <SpiritManagementWaVcoCalibration+0x8a>
  {
    cStandby = 1;
 8002182:	2301      	movs	r3, #1
 8002184:	73bb      	strb	r3, [r7, #14]
    SpiritCmdStrobeReady();
 8002186:	2062      	movs	r0, #98	; 0x62
 8002188:	f7ff fd8e 	bl	8001ca8 <SpiritCmdStrobeCommand>
    do{
      SpiritRefreshStatus();
 800218c:	f001 fe8e 	bl	8003eac <SpiritRefreshStatus>
      
    }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 8002190:	4b3f      	ldr	r3, [pc, #252]	; (8002290 <SpiritManagementWaVcoCalibration+0x17c>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002198:	b2db      	uxtb	r3, r3
 800219a:	2b03      	cmp	r3, #3
 800219c:	d1f6      	bne.n	800218c <SpiritManagementWaVcoCalibration+0x78>
  }
  
  SpiritCmdStrobeLockTx();
 800219e:	2066      	movs	r0, #102	; 0x66
 80021a0:	f7ff fd82 	bl	8001ca8 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 80021a8:	f001 fe80 	bl	8003eac <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 80021ac:	4b38      	ldr	r3, [pc, #224]	; (8002290 <SpiritManagementWaVcoCalibration+0x17c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b13      	cmp	r3, #19
 80021b8:	d106      	bne.n	80021c8 <SpiritManagementWaVcoCalibration+0xb4>
    {
      if(nLockwon++==5) return 1;
 80021ba:	7b7b      	ldrb	r3, [r7, #13]
 80021bc:	1c5a      	adds	r2, r3, #1
 80021be:	737a      	strb	r2, [r7, #13]
 80021c0:	2b05      	cmp	r3, #5
 80021c2:	d101      	bne.n	80021c8 <SpiritManagementWaVcoCalibration+0xb4>
 80021c4:	2301      	movs	r3, #1
 80021c6:	e05d      	b.n	8002284 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 80021c8:	4b31      	ldr	r3, [pc, #196]	; (8002290 <SpiritManagementWaVcoCalibration+0x17c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	2b0f      	cmp	r3, #15
 80021d4:	d1e8      	bne.n	80021a8 <SpiritManagementWaVcoCalibration+0x94>
    
  s_cVcoWordTx = SpiritCalibrationGetVcoCalData();
 80021d6:	f7ff fcb9 	bl	8001b4c <SpiritCalibrationGetVcoCalData>
 80021da:	4603      	mov	r3, r0
 80021dc:	70fb      	strb	r3, [r7, #3]
  
  SpiritCmdStrobeReady();
 80021de:	2062      	movs	r0, #98	; 0x62
 80021e0:	f7ff fd62 	bl	8001ca8 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 80021e4:	f001 fe62 	bl	8003eac <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE != MC_STATE_READY); 
 80021e8:	4b29      	ldr	r3, [pc, #164]	; (8002290 <SpiritManagementWaVcoCalibration+0x17c>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	f3c3 0346 	ubfx	r3, r3, #1, #7
 80021f0:	b2db      	uxtb	r3, r3
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d1f6      	bne.n	80021e4 <SpiritManagementWaVcoCalibration+0xd0>
  
    
  SpiritCmdStrobeLockRx();
 80021f6:	2065      	movs	r0, #101	; 0x65
 80021f8:	f7ff fd56 	bl	8001ca8 <SpiritCmdStrobeCommand>
  
  nLockwon=0;
 80021fc:	2300      	movs	r3, #0
 80021fe:	737b      	strb	r3, [r7, #13]
  do{
    SpiritRefreshStatus();
 8002200:	f001 fe54 	bl	8003eac <SpiritRefreshStatus>
    if(g_xStatus.MC_STATE == MC_STATE_LOCKWON)
 8002204:	4b22      	ldr	r3, [pc, #136]	; (8002290 <SpiritManagementWaVcoCalibration+0x17c>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	f3c3 0346 	ubfx	r3, r3, #1, #7
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b13      	cmp	r3, #19
 8002210:	d106      	bne.n	8002220 <SpiritManagementWaVcoCalibration+0x10c>
    {
      if(nLockwon++==5) return 1;
 8002212:	7b7b      	ldrb	r3, [r7, #13]
 8002214:	1c5a      	adds	r2, r3, #1
 8002216:	737a      	strb	r2, [r7, #13]
 8002218:	2b05      	cmp	r3, #5
 800221a:	d101      	bne.n	8002220 <SpiritManagementWaVcoCalibration+0x10c>
 800221c:	2301      	movs	r3, #1
 800221e:	e031      	b.n	8002284 <SpiritManagementWaVcoCalibration+0x170>
    }
  }while(g_xStatus.MC_STATE != MC_STATE_LOCK);
 8002220:	4b1b      	ldr	r3, [pc, #108]	; (8002290 <SpiritManagementWaVcoCalibration+0x17c>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b0f      	cmp	r3, #15
 800222c:	d1e8      	bne.n	8002200 <SpiritManagementWaVcoCalibration+0xec>
  
  s_cVcoWordRx = SpiritCalibrationGetVcoCalData();
 800222e:	f7ff fc8d 	bl	8001b4c <SpiritCalibrationGetVcoCalData>
 8002232:	4603      	mov	r3, r0
 8002234:	70bb      	strb	r3, [r7, #2]
  
  SpiritCmdStrobeReady();
 8002236:	2062      	movs	r0, #98	; 0x62
 8002238:	f7ff fd36 	bl	8001ca8 <SpiritCmdStrobeCommand>
  
  do{
    SpiritRefreshStatus();
 800223c:	f001 fe36 	bl	8003eac <SpiritRefreshStatus>
   
  }while(g_xStatus.MC_STATE != MC_STATE_READY);
 8002240:	4b13      	ldr	r3, [pc, #76]	; (8002290 <SpiritManagementWaVcoCalibration+0x17c>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002248:	b2db      	uxtb	r3, r3
 800224a:	2b03      	cmp	r3, #3
 800224c:	d1f6      	bne.n	800223c <SpiritManagementWaVcoCalibration+0x128>
  
  if(cStandby == 1)
 800224e:	7bbb      	ldrb	r3, [r7, #14]
 8002250:	2b01      	cmp	r3, #1
 8002252:	d102      	bne.n	800225a <SpiritManagementWaVcoCalibration+0x146>
  {
    SpiritCmdStrobeStandby();    
 8002254:	2063      	movs	r0, #99	; 0x63
 8002256:	f7ff fd27 	bl	8001ca8 <SpiritCmdStrobeCommand>
  }
  SpiritCalibrationVco(S_DISABLE);
 800225a:	2000      	movs	r0, #0
 800225c:	f7ff fc3e 	bl	8001adc <SpiritCalibrationVco>
  
  /* Disable the reference divider if the XTAL is between 48 and 52 MHz */
  if(cRestore)
 8002260:	7bfb      	ldrb	r3, [r7, #15]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d005      	beq.n	8002272 <SpiritManagementWaVcoCalibration+0x15e>
  {
    SpiritRadioSetRefDiv(S_DISABLE);    
 8002266:	2000      	movs	r0, #0
 8002268:	f001 fb8e 	bl	8003988 <SpiritRadioSetRefDiv>
    SpiritManagementSetFrequencyBase(nFreq);
 800226c:	6878      	ldr	r0, [r7, #4]
 800226e:	f7ff fe4f 	bl	8001f10 <SpiritManagementSetFrequencyBase>
  }
  
  
  SpiritCalibrationSetVcoCalDataTx(s_cVcoWordTx);
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	4618      	mov	r0, r3
 8002276:	f7ff fc85 	bl	8001b84 <SpiritCalibrationSetVcoCalDataTx>
  SpiritCalibrationSetVcoCalDataRx(s_cVcoWordRx);
 800227a:	78bb      	ldrb	r3, [r7, #2]
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fcb5 	bl	8001bec <SpiritCalibrationSetVcoCalDataRx>
  
  return 0;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	01c9c380 	.word	0x01c9c380
 8002290:	20000128 	.word	0x20000128

08002294 <SpiritManagementWaCmdStrobeRx>:
  }
}


void SpiritManagementWaCmdStrobeRx(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b082      	sub	sp, #8
 8002298:	af00      	add	r7, sp, #0
  if(s_cCommunicationState != COMMUNICATION_STATE_RX)
 800229a:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <SpiritManagementWaCmdStrobeRx+0x34>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d00d      	beq.n	80022c0 <SpiritManagementWaCmdStrobeRx+0x2c>
  {    
    uint8_t tmp = 0x98; SpiritSpiWriteRegisters(PM_CONFIG1_BASE, 1, &tmp); /* Set SMPS switching frequency */    
 80022a4:	2398      	movs	r3, #152	; 0x98
 80022a6:	71fb      	strb	r3, [r7, #7]
 80022a8:	1dfb      	adds	r3, r7, #7
 80022aa:	461a      	mov	r2, r3
 80022ac:	2101      	movs	r1, #1
 80022ae:	20a5      	movs	r0, #165	; 0xa5
 80022b0:	f001 fe2e 	bl	8003f10 <RadioSpiWriteRegisters>
    SpiritRadioSetPACwc(LOAD_0_PF); /* Set the correct CWC parameter */
 80022b4:	2000      	movs	r0, #0
 80022b6:	f001 fadd 	bl	8003874 <SpiritRadioSetPACwc>
    
    s_cCommunicationState = COMMUNICATION_STATE_RX;
 80022ba:	4b03      	ldr	r3, [pc, #12]	; (80022c8 <SpiritManagementWaCmdStrobeRx+0x34>)
 80022bc:	2201      	movs	r2, #1
 80022be:	701a      	strb	r2, [r3, #0]
  }
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	20000004 	.word	0x20000004

080022cc <SpiritManagementWaTRxFcMem>:

void SpiritManagementWaTRxFcMem(uint32_t nDesiredFreq)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  s_cCommunicationState = COMMUNICATION_STATE_NONE;
 80022d4:	4b05      	ldr	r3, [pc, #20]	; (80022ec <SpiritManagementWaTRxFcMem+0x20>)
 80022d6:	2202      	movs	r2, #2
 80022d8:	701a      	strb	r2, [r3, #0]
  s_nDesiredFrequency = nDesiredFreq;
 80022da:	4a05      	ldr	r2, [pc, #20]	; (80022f0 <SpiritManagementWaTRxFcMem+0x24>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6013      	str	r3, [r2, #0]
}
 80022e0:	bf00      	nop
 80022e2:	370c      	adds	r7, #12
 80022e4:	46bd      	mov	sp, r7
 80022e6:	bc80      	pop	{r7}
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	20000004 	.word	0x20000004
 80022f0:	20000120 	.word	0x20000120

080022f4 <SpiritManagementWaExtraCurrent>:


void SpiritManagementWaExtraCurrent(void)
{          
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b082      	sub	sp, #8
 80022f8:	af00      	add	r7, sp, #0
  uint8_t tmp= 0xCA;SpiritSpiWriteRegisters(0xB2, 1, &tmp); 
 80022fa:	23ca      	movs	r3, #202	; 0xca
 80022fc:	71fb      	strb	r3, [r7, #7]
 80022fe:	1dfb      	adds	r3, r7, #7
 8002300:	461a      	mov	r2, r3
 8002302:	2101      	movs	r1, #1
 8002304:	20b2      	movs	r0, #178	; 0xb2
 8002306:	f001 fe03 	bl	8003f10 <RadioSpiWriteRegisters>
  tmp= 0x04;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 800230a:	2304      	movs	r3, #4
 800230c:	71fb      	strb	r3, [r7, #7]
 800230e:	1dfb      	adds	r3, r7, #7
 8002310:	461a      	mov	r2, r3
 8002312:	2101      	movs	r1, #1
 8002314:	20a8      	movs	r0, #168	; 0xa8
 8002316:	f001 fdfb 	bl	8003f10 <RadioSpiWriteRegisters>
  /* just a read to loose some microsecs more */
  SpiritSpiReadRegisters(0xA8, 1, &tmp);
 800231a:	1dfb      	adds	r3, r7, #7
 800231c:	461a      	mov	r2, r3
 800231e:	2101      	movs	r1, #1
 8002320:	20a8      	movs	r0, #168	; 0xa8
 8002322:	f001 fe41 	bl	8003fa8 <RadioSpiReadRegisters>
  tmp= 0x00;SpiritSpiWriteRegisters(0xA8, 1, &tmp); 
 8002326:	2300      	movs	r3, #0
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	1dfb      	adds	r3, r7, #7
 800232c:	461a      	mov	r2, r3
 800232e:	2101      	movs	r1, #1
 8002330:	20a8      	movs	r0, #168	; 0xa8
 8002332:	f001 fded 	bl	8003f10 <RadioSpiWriteRegisters>
}
 8002336:	bf00      	nop
 8002338:	3708      	adds	r7, #8
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
	...

08002340 <SpiritPktBasicInit>:
 * @param  pxPktBasicInit Basic packet init structure.
 *         This parameter is a pointer to @ref PktBasicInit.
 * @retval None.
 */
void SpiritPktBasicInit(PktBasicInit* pxPktBasicInit)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b084      	sub	sp, #16
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xFec));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicInit->xDataWhitening));
  s_assert_param(IS_BASIC_CONTROL_LENGTH(pxPktBasicInit->xControlLength));

  /* Reads the PROTOCOL1 register */
  g_xStatus = SpiritSpiReadRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 8002348:	f107 0308 	add.w	r3, r7, #8
 800234c:	461a      	mov	r2, r3
 800234e:	2101      	movs	r1, #1
 8002350:	2051      	movs	r0, #81	; 0x51
 8002352:	f001 fe29 	bl	8003fa8 <RadioSpiReadRegisters>
 8002356:	4602      	mov	r2, r0
 8002358:	4b63      	ldr	r3, [pc, #396]	; (80024e8 <SpiritPktBasicInit+0x1a8>)
 800235a:	b212      	sxth	r2, r2
 800235c:	4611      	mov	r1, r2
 800235e:	7019      	strb	r1, [r3, #0]
 8002360:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002364:	705a      	strb	r2, [r3, #1]

  /* Mask a reserved bit */
  tempRegValue[0] &= ~0x20;
 8002366:	7a3b      	ldrb	r3, [r7, #8]
 8002368:	f023 0320 	bic.w	r3, r3, #32
 800236c:	b2db      	uxtb	r3, r3
 800236e:	723b      	strb	r3, [r7, #8]

  /* Always set the automatic packet filtering */
  tempRegValue[0] |= PROTOCOL1_AUTO_PCKT_FLT_MASK;
 8002370:	7a3b      	ldrb	r3, [r7, #8]
 8002372:	f043 0301 	orr.w	r3, r3, #1
 8002376:	b2db      	uxtb	r3, r3
 8002378:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PROTOCOL1_BASE, 1, &tempRegValue[0]);
 800237a:	f107 0308 	add.w	r3, r7, #8
 800237e:	461a      	mov	r2, r3
 8002380:	2101      	movs	r1, #1
 8002382:	2051      	movs	r0, #81	; 0x51
 8002384:	f001 fdc4 	bl	8003f10 <RadioSpiWriteRegisters>
 8002388:	4602      	mov	r2, r0
 800238a:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <SpiritPktBasicInit+0x1a8>)
 800238c:	b212      	sxth	r2, r2
 800238e:	4611      	mov	r1, r2
 8002390:	7019      	strb	r1, [r3, #0]
 8002392:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002396:	705a      	strb	r2, [r3, #1]

  /* Reads the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	461a      	mov	r2, r3
 800239e:	2101      	movs	r1, #1
 80023a0:	204f      	movs	r0, #79	; 0x4f
 80023a2:	f001 fe01 	bl	8003fa8 <RadioSpiReadRegisters>
 80023a6:	4602      	mov	r2, r0
 80023a8:	4b4f      	ldr	r3, [pc, #316]	; (80024e8 <SpiritPktBasicInit+0x1a8>)
 80023aa:	b212      	sxth	r2, r2
 80023ac:	4611      	mov	r1, r2
 80023ae:	7019      	strb	r1, [r3, #0]
 80023b0:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023b4:	705a      	strb	r2, [r3, #1]

  /* Always reset the control and source filtering (also if it is not present in basic) */
  tempRegValue[0] &= ~(PCKT_FLT_OPTIONS_SOURCE_FILTERING_MASK | PCKT_FLT_OPTIONS_CONTROL_FILTERING_MASK);
 80023b6:	7a3b      	ldrb	r3, [r7, #8]
 80023b8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	723b      	strb	r3, [r7, #8]

  /* Writes the value on register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80023c0:	f107 0308 	add.w	r3, r7, #8
 80023c4:	461a      	mov	r2, r3
 80023c6:	2101      	movs	r1, #1
 80023c8:	204f      	movs	r0, #79	; 0x4f
 80023ca:	f001 fda1 	bl	8003f10 <RadioSpiWriteRegisters>
 80023ce:	4602      	mov	r2, r0
 80023d0:	4b45      	ldr	r3, [pc, #276]	; (80024e8 <SpiritPktBasicInit+0x1a8>)
 80023d2:	b212      	sxth	r2, r2
 80023d4:	4611      	mov	r1, r2
 80023d6:	7019      	strb	r1, [r3, #0]
 80023d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80023dc:	705a      	strb	r2, [r3, #1]

  if(pxPktBasicInit->xAddressField == S_ENABLE)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	7b1b      	ldrb	r3, [r3, #12]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d102      	bne.n	80023ec <SpiritPktBasicInit+0xac>
  {
    tempRegValue[0]=0x08;
 80023e6:	2308      	movs	r3, #8
 80023e8:	723b      	strb	r3, [r7, #8]
 80023ea:	e001      	b.n	80023f0 <SpiritPktBasicInit+0xb0>
  }
  else
  {
    tempRegValue[0]=0x00;
 80023ec:	2300      	movs	r3, #0
 80023ee:	723b      	strb	r3, [r7, #8]
  }
  /* Address and control length setting */
  tempRegValue[0] |= ((uint8_t) pxPktBasicInit->xControlLength);
 80023f0:	7a3a      	ldrb	r2, [r7, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	7adb      	ldrb	r3, [r3, #11]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	723b      	strb	r3, [r7, #8]

  /* Packet format and width length setting */
  pxPktBasicInit->cPktLengthWidth == 0 ? pxPktBasicInit->cPktLengthWidth=1 : pxPktBasicInit->cPktLengthWidth;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	7a5b      	ldrb	r3, [r3, #9]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d102      	bne.n	800240a <SpiritPktBasicInit+0xca>
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2201      	movs	r2, #1
 8002408:	725a      	strb	r2, [r3, #9]
  tempRegValue[1] = ((uint8_t) PCKTCTRL3_PCKT_FRMT_BASIC) | ((uint8_t)(pxPktBasicInit->cPktLengthWidth-1));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	7a5b      	ldrb	r3, [r3, #9]
 800240e:	3b01      	subs	r3, #1
 8002410:	b2db      	uxtb	r3, r3
 8002412:	727b      	strb	r3, [r7, #9]

  /* Preamble, sync and fixed or variable length setting */
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	781a      	ldrb	r2, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	785b      	ldrb	r3, [r3, #1]
 800241c:	4313      	orrs	r3, r2
 800241e:	b2da      	uxtb	r2, r3
                    ((uint8_t) pxPktBasicInit->xFixVarLength);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	7a1b      	ldrb	r3, [r3, #8]
  tempRegValue[2] = ((uint8_t) pxPktBasicInit->xPreambleLength) | ((uint8_t) pxPktBasicInit->xSyncLength) |
 8002424:	4313      	orrs	r3, r2
 8002426:	b2db      	uxtb	r3, r3
 8002428:	72bb      	strb	r3, [r7, #10]

  /* CRC length, whitening and FEC setting */
  tempRegValue[3] = (uint8_t) pxPktBasicInit->xCrcMode;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	7a9b      	ldrb	r3, [r3, #10]
 800242e:	72fb      	strb	r3, [r7, #11]

  if(pxPktBasicInit->xDataWhitening == S_ENABLE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	7b9b      	ldrb	r3, [r3, #14]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d104      	bne.n	8002442 <SpiritPktBasicInit+0x102>
  {
     tempRegValue[3] |= PCKTCTRL1_WHIT_MASK;
 8002438:	7afb      	ldrb	r3, [r7, #11]
 800243a:	f043 0310 	orr.w	r3, r3, #16
 800243e:	b2db      	uxtb	r3, r3
 8002440:	72fb      	strb	r3, [r7, #11]
  }

  if(pxPktBasicInit->xFec == S_ENABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	7b5b      	ldrb	r3, [r3, #13]
 8002446:	2b01      	cmp	r3, #1
 8002448:	d104      	bne.n	8002454 <SpiritPktBasicInit+0x114>
  {
     tempRegValue[3] |= PCKTCTRL1_FEC_MASK;
 800244a:	7afb      	ldrb	r3, [r7, #11]
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	b2db      	uxtb	r3, r3
 8002452:	72fb      	strb	r3, [r7, #11]
  }

  /* Writes registers */
  SpiritSpiWriteRegisters(PCKTCTRL4_BASE, 4, tempRegValue);
 8002454:	f107 0308 	add.w	r3, r7, #8
 8002458:	461a      	mov	r2, r3
 800245a:	2104      	movs	r1, #4
 800245c:	2030      	movs	r0, #48	; 0x30
 800245e:	f001 fd57 	bl	8003f10 <RadioSpiWriteRegisters>

  /* Sync words setting */
  for(i=0;i<4;i++)
 8002462:	2300      	movs	r3, #0
 8002464:	73fb      	strb	r3, [r7, #15]
 8002466:	e01d      	b.n	80024a4 <SpiritPktBasicInit+0x164>
  {
    if(i<3-(pxPktBasicInit->xSyncLength >>1))
 8002468:	7bfa      	ldrb	r2, [r7, #15]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	785b      	ldrb	r3, [r3, #1]
 800246e:	085b      	lsrs	r3, r3, #1
 8002470:	b2db      	uxtb	r3, r3
 8002472:	f1c3 0303 	rsb	r3, r3, #3
 8002476:	429a      	cmp	r2, r3
 8002478:	da06      	bge.n	8002488 <SpiritPktBasicInit+0x148>
    {
      tempRegValue[i]=0;
 800247a:	7bfb      	ldrb	r3, [r7, #15]
 800247c:	3310      	adds	r3, #16
 800247e:	443b      	add	r3, r7
 8002480:	2200      	movs	r2, #0
 8002482:	f803 2c08 	strb.w	r2, [r3, #-8]
 8002486:	e00a      	b.n	800249e <SpiritPktBasicInit+0x15e>
    }
    else
    {
      tempRegValue[i] = (uint8_t)(pxPktBasicInit->lSyncWords>>(8*i));
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	00db      	lsls	r3, r3, #3
 8002490:	40da      	lsrs	r2, r3
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	b2d2      	uxtb	r2, r2
 8002496:	3310      	adds	r3, #16
 8002498:	443b      	add	r3, r7
 800249a:	f803 2c08 	strb.w	r2, [r3, #-8]
  for(i=0;i<4;i++)
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	3301      	adds	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b03      	cmp	r3, #3
 80024a8:	d9de      	bls.n	8002468 <SpiritPktBasicInit+0x128>
    }
  }

  /* Sets CRC check bit */
  if(pxPktBasicInit->xCrcMode == PKT_NO_CRC)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	7a9b      	ldrb	r3, [r3, #10]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d103      	bne.n	80024ba <SpiritPktBasicInit+0x17a>
  {
    SpiritPktBasicFilterOnCrc(S_DISABLE);
 80024b2:	2000      	movs	r0, #0
 80024b4:	f000 f888 	bl	80025c8 <SpiritPktCommonFilterOnCrc>
 80024b8:	e002      	b.n	80024c0 <SpiritPktBasicInit+0x180>
  }
  else
  {
    SpiritPktBasicFilterOnCrc(S_ENABLE);
 80024ba:	2001      	movs	r0, #1
 80024bc:	f000 f884 	bl	80025c8 <SpiritPktCommonFilterOnCrc>
  }

  
  g_xStatus = SpiritSpiWriteRegisters(SYNC4_BASE, 4, tempRegValue);
 80024c0:	f107 0308 	add.w	r3, r7, #8
 80024c4:	461a      	mov	r2, r3
 80024c6:	2104      	movs	r1, #4
 80024c8:	2036      	movs	r0, #54	; 0x36
 80024ca:	f001 fd21 	bl	8003f10 <RadioSpiWriteRegisters>
 80024ce:	4602      	mov	r2, r0
 80024d0:	4b05      	ldr	r3, [pc, #20]	; (80024e8 <SpiritPktBasicInit+0x1a8>)
 80024d2:	b212      	sxth	r2, r2
 80024d4:	4611      	mov	r1, r2
 80024d6:	7019      	strb	r1, [r3, #0]
 80024d8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80024dc:	705a      	strb	r2, [r3, #1]

}
 80024de:	bf00      	nop
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	20000128 	.word	0x20000128

080024ec <SpiritPktBasicAddressesInit>:
 * @param  pxPktBasicAddresses Basic packet addresses init structure.
 *         This parameter is a pointer to @ref PktBasicAddresses.
 * @retval None.
 */
void SpiritPktBasicAddressesInit(PktBasicAddressesInit* pxPktBasicAddresses)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b084      	sub	sp, #16
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnMulticastAddress));
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(pxPktBasicAddresses->xFilterOnBroadcastAddress));


  /* Reads the PCKT_FLT_OPTIONS ragister */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 80024f4:	f107 030c 	add.w	r3, r7, #12
 80024f8:	461a      	mov	r2, r3
 80024fa:	2101      	movs	r1, #1
 80024fc:	204f      	movs	r0, #79	; 0x4f
 80024fe:	f001 fd53 	bl	8003fa8 <RadioSpiReadRegisters>
 8002502:	4602      	mov	r2, r0
 8002504:	4b2f      	ldr	r3, [pc, #188]	; (80025c4 <SpiritPktBasicAddressesInit+0xd8>)
 8002506:	b212      	sxth	r2, r2
 8002508:	4611      	mov	r1, r2
 800250a:	7019      	strb	r1, [r3, #0]
 800250c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002510:	705a      	strb	r2, [r3, #1]
  
  /* Enables or disables filtering on my address */
  if(pxPktBasicAddresses->xFilterOnMyAddress == S_ENABLE)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b01      	cmp	r3, #1
 8002518:	d105      	bne.n	8002526 <SpiritPktBasicAddressesInit+0x3a>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 800251a:	7b3b      	ldrb	r3, [r7, #12]
 800251c:	f043 0308 	orr.w	r3, r3, #8
 8002520:	b2db      	uxtb	r3, r3
 8002522:	733b      	strb	r3, [r7, #12]
 8002524:	e004      	b.n	8002530 <SpiritPktBasicAddressesInit+0x44>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_TX_ADDR_MASK;
 8002526:	7b3b      	ldrb	r3, [r7, #12]
 8002528:	f023 0308 	bic.w	r3, r3, #8
 800252c:	b2db      	uxtb	r3, r3
 800252e:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on multicast address */
  if(pxPktBasicAddresses->xFilterOnMulticastAddress == S_ENABLE)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	789b      	ldrb	r3, [r3, #2]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d105      	bne.n	8002544 <SpiritPktBasicAddressesInit+0x58>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002538:	7b3b      	ldrb	r3, [r7, #12]
 800253a:	f043 0304 	orr.w	r3, r3, #4
 800253e:	b2db      	uxtb	r3, r3
 8002540:	733b      	strb	r3, [r7, #12]
 8002542:	e004      	b.n	800254e <SpiritPktBasicAddressesInit+0x62>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_MULTICAST_ADDR_MASK;
 8002544:	7b3b      	ldrb	r3, [r7, #12]
 8002546:	f023 0304 	bic.w	r3, r3, #4
 800254a:	b2db      	uxtb	r3, r3
 800254c:	733b      	strb	r3, [r7, #12]
  }
  
  /* Enables or disables filtering on broadcast address */
  if(pxPktBasicAddresses->xFilterOnBroadcastAddress == S_ENABLE)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	791b      	ldrb	r3, [r3, #4]
 8002552:	2b01      	cmp	r3, #1
 8002554:	d105      	bne.n	8002562 <SpiritPktBasicAddressesInit+0x76>
  {
    tempRegValue[0] |= PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002556:	7b3b      	ldrb	r3, [r7, #12]
 8002558:	f043 0302 	orr.w	r3, r3, #2
 800255c:	b2db      	uxtb	r3, r3
 800255e:	733b      	strb	r3, [r7, #12]
 8002560:	e004      	b.n	800256c <SpiritPktBasicAddressesInit+0x80>
  }
  else
  {
    tempRegValue[0] &= ~PCKT_FLT_OPTIONS_DEST_VS_BROADCAST_ADDR_MASK;
 8002562:	7b3b      	ldrb	r3, [r7, #12]
 8002564:	f023 0302 	bic.w	r3, r3, #2
 8002568:	b2db      	uxtb	r3, r3
 800256a:	733b      	strb	r3, [r7, #12]
  }
  
  /* Writes the new value on the PCKT_FLT_OPTIONS register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue[0]);
 800256c:	f107 030c 	add.w	r3, r7, #12
 8002570:	461a      	mov	r2, r3
 8002572:	2101      	movs	r1, #1
 8002574:	204f      	movs	r0, #79	; 0x4f
 8002576:	f001 fccb 	bl	8003f10 <RadioSpiWriteRegisters>
 800257a:	4602      	mov	r2, r0
 800257c:	4b11      	ldr	r3, [pc, #68]	; (80025c4 <SpiritPktBasicAddressesInit+0xd8>)
 800257e:	b212      	sxth	r2, r2
 8002580:	4611      	mov	r1, r2
 8002582:	7019      	strb	r1, [r3, #0]
 8002584:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002588:	705a      	strb	r2, [r3, #1]
  
  /* Fills the array with the addresses passed in the structure */
  tempRegValue[0] = pxPktBasicAddresses->cBroadcastAddress;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	795b      	ldrb	r3, [r3, #5]
 800258e:	733b      	strb	r3, [r7, #12]
  tempRegValue[1] = pxPktBasicAddresses->cMulticastAddress;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	78db      	ldrb	r3, [r3, #3]
 8002594:	737b      	strb	r3, [r7, #13]
  tempRegValue[2] = pxPktBasicAddresses->cMyAddress;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	785b      	ldrb	r3, [r3, #1]
 800259a:	73bb      	strb	r3, [r7, #14]
  
  /* Writes values on the PCKT_FLT_GOALS registers */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_BROADCAST_BASE, 3, tempRegValue);
 800259c:	f107 030c 	add.w	r3, r7, #12
 80025a0:	461a      	mov	r2, r3
 80025a2:	2103      	movs	r1, #3
 80025a4:	204c      	movs	r0, #76	; 0x4c
 80025a6:	f001 fcb3 	bl	8003f10 <RadioSpiWriteRegisters>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <SpiritPktBasicAddressesInit+0xd8>)
 80025ae:	b212      	sxth	r2, r2
 80025b0:	4611      	mov	r1, r2
 80025b2:	7019      	strb	r1, [r3, #0]
 80025b4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025b8:	705a      	strb	r2, [r3, #1]
  
  
}
 80025ba:	bf00      	nop
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	20000128 	.word	0x20000128

080025c8 <SpiritPktCommonFilterOnCrc>:
 * @param  xNewState new state for CRC_CHECK.
 *         This parameter can be S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritPktCommonFilterOnCrc(SpiritFunctionalState xNewState)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	4603      	mov	r3, r0
 80025d0:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 80025d2:	f107 030f 	add.w	r3, r7, #15
 80025d6:	461a      	mov	r2, r3
 80025d8:	2101      	movs	r1, #1
 80025da:	204f      	movs	r0, #79	; 0x4f
 80025dc:	f001 fce4 	bl	8003fa8 <RadioSpiReadRegisters>
 80025e0:	4602      	mov	r2, r0
 80025e2:	4b14      	ldr	r3, [pc, #80]	; (8002634 <SpiritPktCommonFilterOnCrc+0x6c>)
 80025e4:	b212      	sxth	r2, r2
 80025e6:	4611      	mov	r1, r2
 80025e8:	7019      	strb	r1, [r3, #0]
 80025ea:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80025ee:	705a      	strb	r2, [r3, #1]

  /* Modify the register value: enable or disable the CRC filtering */
  if(xNewState == S_ENABLE)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d105      	bne.n	8002602 <SpiritPktCommonFilterOnCrc+0x3a>
  {
    tempRegValue |= PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	f043 0301 	orr.w	r3, r3, #1
 80025fc:	b2db      	uxtb	r3, r3
 80025fe:	73fb      	strb	r3, [r7, #15]
 8002600:	e004      	b.n	800260c <SpiritPktCommonFilterOnCrc+0x44>
  }
  else
  {
    tempRegValue &= ~PCKT_FLT_OPTIONS_CRC_CHECK_MASK;
 8002602:	7bfb      	ldrb	r3, [r7, #15]
 8002604:	f023 0301 	bic.w	r3, r3, #1
 8002608:	b2db      	uxtb	r3, r3
 800260a:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes the PCKT_FLT_OPTIONS register value */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 1, &tempRegValue);
 800260c:	f107 030f 	add.w	r3, r7, #15
 8002610:	461a      	mov	r2, r3
 8002612:	2101      	movs	r1, #1
 8002614:	204f      	movs	r0, #79	; 0x4f
 8002616:	f001 fc7b 	bl	8003f10 <RadioSpiWriteRegisters>
 800261a:	4602      	mov	r2, r0
 800261c:	4b05      	ldr	r3, [pc, #20]	; (8002634 <SpiritPktCommonFilterOnCrc+0x6c>)
 800261e:	b212      	sxth	r2, r2
 8002620:	4611      	mov	r1, r2
 8002622:	7019      	strb	r1, [r3, #0]
 8002624:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002628:	705a      	strb	r2, [r3, #1]

}
 800262a:	bf00      	nop
 800262c:	3710      	adds	r7, #16
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	20000128 	.word	0x20000128

08002638 <SpiritPktCommonSetDestinationAddress>:
 * @param  cAddress Destination address.
 *         This parameter is an uint8_t.
 * @retval None.
 */
void SpiritPktCommonSetDestinationAddress(uint8_t cAddress)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	4603      	mov	r3, r0
 8002640:	71fb      	strb	r3, [r7, #7]
  /* Writes value on PCKT_FLT_GOALS_SOURCE_ADDR register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_GOALS_SOURCE_ADDR_BASE, 1, &cAddress);
 8002642:	1dfb      	adds	r3, r7, #7
 8002644:	461a      	mov	r2, r3
 8002646:	2101      	movs	r1, #1
 8002648:	204b      	movs	r0, #75	; 0x4b
 800264a:	f001 fc61 	bl	8003f10 <RadioSpiWriteRegisters>
 800264e:	4602      	mov	r2, r0
 8002650:	4b05      	ldr	r3, [pc, #20]	; (8002668 <SpiritPktCommonSetDestinationAddress+0x30>)
 8002652:	b212      	sxth	r2, r2
 8002654:	4611      	mov	r1, r2
 8002656:	7019      	strb	r1, [r3, #0]
 8002658:	f3c2 2207 	ubfx	r2, r2, #8, #8
 800265c:	705a      	strb	r2, [r3, #1]

}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	20000128 	.word	0x20000128

0800266c <SpiritQiSqiCheck>:
 * @param  xNewState new state for SQI check.
 *         This parameter can be: S_ENABLE or S_DISABLE.
 * @retval None.
 */
void SpiritQiSqiCheck(SpiritFunctionalState xNewState)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	4603      	mov	r3, r0
 8002674:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 8002676:	f107 030f 	add.w	r3, r7, #15
 800267a:	461a      	mov	r2, r3
 800267c:	2101      	movs	r1, #1
 800267e:	203a      	movs	r0, #58	; 0x3a
 8002680:	f001 fc92 	bl	8003fa8 <RadioSpiReadRegisters>
 8002684:	4602      	mov	r2, r0
 8002686:	4b14      	ldr	r3, [pc, #80]	; (80026d8 <SpiritQiSqiCheck+0x6c>)
 8002688:	b212      	sxth	r2, r2
 800268a:	4611      	mov	r1, r2
 800268c:	7019      	strb	r1, [r3, #0]
 800268e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002692:	705a      	strb	r2, [r3, #1]

  /* Enables or disables the SQI Check bit on the QI_BASE register */
  if(xNewState == S_ENABLE)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d105      	bne.n	80026a6 <SpiritQiSqiCheck+0x3a>
  {
    tempRegValue |= QI_SQI_MASK;
 800269a:	7bfb      	ldrb	r3, [r7, #15]
 800269c:	f043 0302 	orr.w	r3, r3, #2
 80026a0:	b2db      	uxtb	r3, r3
 80026a2:	73fb      	strb	r3, [r7, #15]
 80026a4:	e004      	b.n	80026b0 <SpiritQiSqiCheck+0x44>
  }
  else
  {
    tempRegValue &= ~QI_SQI_MASK;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
 80026a8:	f023 0302 	bic.w	r3, r3, #2
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	73fb      	strb	r3, [r7, #15]
  }

  /* Writes value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 80026b0:	f107 030f 	add.w	r3, r7, #15
 80026b4:	461a      	mov	r2, r3
 80026b6:	2101      	movs	r1, #1
 80026b8:	203a      	movs	r0, #58	; 0x3a
 80026ba:	f001 fc29 	bl	8003f10 <RadioSpiWriteRegisters>
 80026be:	4602      	mov	r2, r0
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <SpiritQiSqiCheck+0x6c>)
 80026c2:	b212      	sxth	r2, r2
 80026c4:	4611      	mov	r1, r2
 80026c6:	7019      	strb	r1, [r3, #0]
 80026c8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80026cc:	705a      	strb	r2, [r3, #1]

}
 80026ce:	bf00      	nop
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
 80026d6:	bf00      	nop
 80026d8:	20000128 	.word	0x20000128

080026dc <SpiritQiSetSqiThreshold>:
 * @param  xSqiThr parameter of the formula above.
 * 	   This parameter is a @ref SqiThreshold.
 * @retval None.
 */
void SpiritQiSetSqiThreshold(SqiThreshold xSqiThr)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b084      	sub	sp, #16
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	4603      	mov	r3, r0
 80026e4:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_SQI_THR(xSqiThr));

  /* Reads the QI register value */
  g_xStatus = SpiritSpiReadRegisters(QI_BASE, 1, &tempRegValue);
 80026e6:	f107 030f 	add.w	r3, r7, #15
 80026ea:	461a      	mov	r2, r3
 80026ec:	2101      	movs	r1, #1
 80026ee:	203a      	movs	r0, #58	; 0x3a
 80026f0:	f001 fc5a 	bl	8003fa8 <RadioSpiReadRegisters>
 80026f4:	4602      	mov	r2, r0
 80026f6:	4b12      	ldr	r3, [pc, #72]	; (8002740 <SpiritQiSetSqiThreshold+0x64>)
 80026f8:	b212      	sxth	r2, r2
 80026fa:	4611      	mov	r1, r2
 80026fc:	7019      	strb	r1, [r3, #0]
 80026fe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002702:	705a      	strb	r2, [r3, #1]

  /* Build the SQI threshold value to be written */
  tempRegValue &= 0x3F;
 8002704:	7bfb      	ldrb	r3, [r7, #15]
 8002706:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800270a:	b2db      	uxtb	r3, r3
 800270c:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= ((uint8_t)xSqiThr);
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	79fb      	ldrb	r3, [r7, #7]
 8002712:	4313      	orrs	r3, r2
 8002714:	b2db      	uxtb	r3, r3
 8002716:	73fb      	strb	r3, [r7, #15]

  /* Writes the new value on the QI register */
  g_xStatus = SpiritSpiWriteRegisters(QI_BASE, 1, &tempRegValue);
 8002718:	f107 030f 	add.w	r3, r7, #15
 800271c:	461a      	mov	r2, r3
 800271e:	2101      	movs	r1, #1
 8002720:	203a      	movs	r0, #58	; 0x3a
 8002722:	f001 fbf5 	bl	8003f10 <RadioSpiWriteRegisters>
 8002726:	4602      	mov	r2, r0
 8002728:	4b05      	ldr	r3, [pc, #20]	; (8002740 <SpiritQiSetSqiThreshold+0x64>)
 800272a:	b212      	sxth	r2, r2
 800272c:	4611      	mov	r1, r2
 800272e:	7019      	strb	r1, [r3, #0]
 8002730:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002734:	705a      	strb	r2, [r3, #1]

}
 8002736:	bf00      	nop
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000128 	.word	0x20000128

08002744 <SpiritQiSetRssiThresholddBm>:
 * @param  nDbmValue RSSI threshold reported in dBm.
 *         This parameter must be a sint32_t.
 * @retval None.
 */
void SpiritQiSetRssiThresholddBm(int32_t nDbmValue)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue=2*(nDbmValue+130);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	3382      	adds	r3, #130	; 0x82
 8002750:	b2db      	uxtb	r3, r3
 8002752:	005b      	lsls	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  s_assert_param(IS_RSSI_THR_DBM(nDbmValue));

  /* Writes the new value on the RSSI_TH register */
  g_xStatus = SpiritSpiWriteRegisters(RSSI_TH_BASE, 1, &tempRegValue);
 8002758:	f107 030f 	add.w	r3, r7, #15
 800275c:	461a      	mov	r2, r3
 800275e:	2101      	movs	r1, #1
 8002760:	2022      	movs	r0, #34	; 0x22
 8002762:	f001 fbd5 	bl	8003f10 <RadioSpiWriteRegisters>
 8002766:	4602      	mov	r2, r0
 8002768:	4b05      	ldr	r3, [pc, #20]	; (8002780 <SpiritQiSetRssiThresholddBm+0x3c>)
 800276a:	b212      	sxth	r2, r2
 800276c:	4611      	mov	r1, r2
 800276e:	7019      	strb	r1, [r3, #0]
 8002770:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002774:	705a      	strb	r2, [r3, #1]

}
 8002776:	bf00      	nop
 8002778:	3710      	adds	r7, #16
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000128 	.word	0x20000128

08002784 <SpiritRadioInit>:
* @param  pxSRadioInitStruct pointer to a SRadioInit structure that
*         contains the configuration information for the analog radio part of SPIRIT.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioInit(SRadioInit* pxSRadioInitStruct)
{
 8002784:	b590      	push	{r4, r7, lr}
 8002786:	b08d      	sub	sp, #52	; 0x34
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  uint8_t anaRadioRegArray[8], digRadioRegArray[4];
  int16_t xtalOffsetFactor;
  uint8_t drM, drE, FdevM, FdevE, bwM, bwE;
    
  /* Workaround for Vtune */
  uint8_t value = 0xA0; SpiritSpiWriteRegisters(0x9F, 1, &value);
 800278c:	23a0      	movs	r3, #160	; 0xa0
 800278e:	747b      	strb	r3, [r7, #17]
 8002790:	f107 0311 	add.w	r3, r7, #17
 8002794:	461a      	mov	r2, r3
 8002796:	2101      	movs	r1, #1
 8002798:	209f      	movs	r0, #159	; 0x9f
 800279a:	f001 fbb9 	bl	8003f10 <RadioSpiWriteRegisters>
  
  /* Calculates the offset respect to RF frequency and according to xtal_ppm parameter: (xtal_ppm*FBase)/10^6 */
  FOffsetTmp = (int32_t)(((float)pxSRadioInitStruct->nXtalOffsetPpm*pxSRadioInitStruct->lFrequencyBase)/PPM_FACTOR);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fe f9b7 	bl	8000b18 <__aeabi_i2f>
 80027aa:	4604      	mov	r4, r0
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7fe f9ad 	bl	8000b10 <__aeabi_ui2f>
 80027b6:	4603      	mov	r3, r0
 80027b8:	4619      	mov	r1, r3
 80027ba:	4620      	mov	r0, r4
 80027bc:	f7fe fa00 	bl	8000bc0 <__aeabi_fmul>
 80027c0:	4603      	mov	r3, r0
 80027c2:	49a0      	ldr	r1, [pc, #640]	; (8002a44 <SpiritRadioInit+0x2c0>)
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7fe faaf 	bl	8000d28 <__aeabi_fdiv>
 80027ca:	4603      	mov	r3, r0
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7fe fbbd 	bl	8000f4c <__aeabi_f2iz>
 80027d2:	4603      	mov	r3, r0
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  s_assert_param(IS_FREQUENCY_OFFSET(FOffsetTmp,s_lXtalFrequency));
  s_assert_param(IS_CHANNEL_SPACE(pxSRadioInitStruct->nChannelSpace,s_lXtalFrequency));
  s_assert_param(IS_F_DEV(pxSRadioInitStruct->lFreqDev,s_lXtalFrequency));
  
  /* Disable the digital, ADC, SMPS reference clock divider if fXO>24MHz or fXO<26MHz */
  SpiritSpiCommandStrobes(COMMAND_STANDBY);    
 80027d6:	2063      	movs	r0, #99	; 0x63
 80027d8:	f001 fc32 	bl	8004040 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 80027dc:	2300      	movs	r3, #0
 80027de:	73bb      	strb	r3, [r7, #14]
 80027e0:	e004      	b.n	80027ec <SpiritRadioInit+0x68>
 80027e2:	7bbb      	ldrb	r3, [r7, #14]
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	3301      	adds	r3, #1
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	73bb      	strb	r3, [r7, #14]
 80027ec:	7bbb      	ldrb	r3, [r7, #14]
 80027ee:	b2db      	uxtb	r3, r3
 80027f0:	2bff      	cmp	r3, #255	; 0xff
 80027f2:	d1f6      	bne.n	80027e2 <SpiritRadioInit+0x5e>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 80027f4:	f001 fb5a 	bl	8003eac <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_STANDBY);
 80027f8:	4b93      	ldr	r3, [pc, #588]	; (8002a48 <SpiritRadioInit+0x2c4>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b40      	cmp	r3, #64	; 0x40
 8002804:	d1ea      	bne.n	80027dc <SpiritRadioInit+0x58>
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 8002806:	4b91      	ldr	r3, [pc, #580]	; (8002a4c <SpiritRadioInit+0x2c8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a91      	ldr	r2, [pc, #580]	; (8002a50 <SpiritRadioInit+0x2cc>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d803      	bhi.n	8002818 <SpiritRadioInit+0x94>
  {
    SpiritRadioSetDigDiv(S_DISABLE);
 8002810:	2000      	movs	r0, #0
 8002812:	f001 f90b 	bl	8003a2c <SpiritRadioSetDigDiv>
 8002816:	e002      	b.n	800281e <SpiritRadioInit+0x9a>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,s_lXtalFrequency));
  }
  else
  {      
    SpiritRadioSetDigDiv(S_ENABLE);
 8002818:	2001      	movs	r0, #1
 800281a:	f001 f907 	bl	8003a2c <SpiritRadioSetDigDiv>
    s_assert_param(IS_CH_BW(pxSRadioInitStruct->lBandwidth,(s_lXtalFrequency>>1)));
  }
  
  /* Goes in READY state */
  SpiritSpiCommandStrobes(COMMAND_READY);
 800281e:	2062      	movs	r0, #98	; 0x62
 8002820:	f001 fc0e 	bl	8004040 <RadioSpiCommandStrobes>
  do{
    /* Delay for state transition */
    for(volatile uint8_t i=0; i!=0xFF; i++);
 8002824:	2300      	movs	r3, #0
 8002826:	737b      	strb	r3, [r7, #13]
 8002828:	e004      	b.n	8002834 <SpiritRadioInit+0xb0>
 800282a:	7b7b      	ldrb	r3, [r7, #13]
 800282c:	b2db      	uxtb	r3, r3
 800282e:	3301      	adds	r3, #1
 8002830:	b2db      	uxtb	r3, r3
 8002832:	737b      	strb	r3, [r7, #13]
 8002834:	7b7b      	ldrb	r3, [r7, #13]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	2bff      	cmp	r3, #255	; 0xff
 800283a:	d1f6      	bne.n	800282a <SpiritRadioInit+0xa6>
    
    /* Reads the MC_STATUS register */
    SpiritRefreshStatus();
 800283c:	f001 fb36 	bl	8003eac <SpiritRefreshStatus>
  }while(g_xStatus.MC_STATE!=MC_STATE_READY);
 8002840:	4b81      	ldr	r3, [pc, #516]	; (8002a48 <SpiritRadioInit+0x2c4>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8002848:	b2db      	uxtb	r3, r3
 800284a:	2b03      	cmp	r3, #3
 800284c:	d1ea      	bne.n	8002824 <SpiritRadioInit+0xa0>
  
  /* Calculates the FC_OFFSET parameter and cast as signed int: FOffsetTmp = (Fxtal/2^18)*FC_OFFSET */
  xtalOffsetFactor = (int16_t)(((float)FOffsetTmp*FBASE_DIVIDER)/s_lXtalFrequency);
 800284e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002850:	f7fe f962 	bl	8000b18 <__aeabi_i2f>
 8002854:	4603      	mov	r3, r0
 8002856:	f04f 4191 	mov.w	r1, #1216348160	; 0x48800000
 800285a:	4618      	mov	r0, r3
 800285c:	f7fe f9b0 	bl	8000bc0 <__aeabi_fmul>
 8002860:	4603      	mov	r3, r0
 8002862:	461c      	mov	r4, r3
 8002864:	4b79      	ldr	r3, [pc, #484]	; (8002a4c <SpiritRadioInit+0x2c8>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4618      	mov	r0, r3
 800286a:	f7fe f951 	bl	8000b10 <__aeabi_ui2f>
 800286e:	4603      	mov	r3, r0
 8002870:	4619      	mov	r1, r3
 8002872:	4620      	mov	r0, r4
 8002874:	f7fe fa58 	bl	8000d28 <__aeabi_fdiv>
 8002878:	4603      	mov	r3, r0
 800287a:	4618      	mov	r0, r3
 800287c:	f7fe fb66 	bl	8000f4c <__aeabi_f2iz>
 8002880:	4603      	mov	r3, r0
 8002882:	857b      	strh	r3, [r7, #42]	; 0x2a
  anaRadioRegArray[2] = (uint8_t)((((uint16_t)xtalOffsetFactor)>>8)&0x0F);
 8002884:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002886:	0a1b      	lsrs	r3, r3, #8
 8002888:	b29b      	uxth	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	f003 030f 	and.w	r3, r3, #15
 8002890:	b2db      	uxtb	r3, r3
 8002892:	77bb      	strb	r3, [r7, #30]
  anaRadioRegArray[3] = (uint8_t)(xtalOffsetFactor);
 8002894:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002896:	b2db      	uxtb	r3, r3
 8002898:	77fb      	strb	r3, [r7, #31]
  
  /* Calculates the channel space factor */
  anaRadioRegArray[0] =((uint32_t)pxSRadioInitStruct->nChannelSpace<<9)/(s_lXtalFrequency>>6)+1;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	025a      	lsls	r2, r3, #9
 80028a0:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <SpiritRadioInit+0x2c8>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	099b      	lsrs	r3, r3, #6
 80028a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	3301      	adds	r3, #1
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	773b      	strb	r3, [r7, #28]
  
  SpiritManagementWaTRxFcMem(pxSRadioInitStruct->lFrequencyBase);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7ff fd08 	bl	80022cc <SpiritManagementWaTRxFcMem>
  
  /* 2nd order DEM algorithm enabling */
  uint8_t tmpreg; SpiritSpiReadRegisters(0xA3, 1, &tmpreg);
 80028bc:	f107 0310 	add.w	r3, r7, #16
 80028c0:	461a      	mov	r2, r3
 80028c2:	2101      	movs	r1, #1
 80028c4:	20a3      	movs	r0, #163	; 0xa3
 80028c6:	f001 fb6f 	bl	8003fa8 <RadioSpiReadRegisters>
  tmpreg &= ~0x02; SpiritSpiWriteRegisters(0xA3, 1, &tmpreg);
 80028ca:	7c3b      	ldrb	r3, [r7, #16]
 80028cc:	f023 0302 	bic.w	r3, r3, #2
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	743b      	strb	r3, [r7, #16]
 80028d4:	f107 0310 	add.w	r3, r7, #16
 80028d8:	461a      	mov	r2, r3
 80028da:	2101      	movs	r1, #1
 80028dc:	20a3      	movs	r0, #163	; 0xa3
 80028de:	f001 fb17 	bl	8003f10 <RadioSpiWriteRegisters>
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND((pxSRadioInitStruct->lFrequencyBase + ((xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER) + pxSRadioInitStruct->nChannelSpace * pxSRadioInitStruct->cChannelNumber)));  
  
  /* Calculates the datarate mantissa and exponent */
  SpiritRadioSearchDatarateME(pxSRadioInitStruct->lDatarate, &drM, &drE);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	f107 0216 	add.w	r2, r7, #22
 80028ea:	f107 0117 	add.w	r1, r7, #23
 80028ee:	4618      	mov	r0, r3
 80028f0:	f000 fc38 	bl	8003164 <SpiritRadioSearchDatarateME>
  digRadioRegArray[0] = (uint8_t)(drM);
 80028f4:	7dfb      	ldrb	r3, [r7, #23]
 80028f6:	763b      	strb	r3, [r7, #24]
  digRadioRegArray[1] = (uint8_t)(0x00 | pxSRadioInitStruct->xModulationSelect |drE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	7b5a      	ldrb	r2, [r3, #13]
 80028fc:	7dbb      	ldrb	r3, [r7, #22]
 80028fe:	4313      	orrs	r3, r2
 8002900:	b2db      	uxtb	r3, r3
 8002902:	767b      	strb	r3, [r7, #25]
  
  /* Read the fdev register to preserve the clock recovery algo bit */
  SpiritSpiReadRegisters(0x1C, 1, &tmpreg);
 8002904:	f107 0310 	add.w	r3, r7, #16
 8002908:	461a      	mov	r2, r3
 800290a:	2101      	movs	r1, #1
 800290c:	201c      	movs	r0, #28
 800290e:	f001 fb4b 	bl	8003fa8 <RadioSpiReadRegisters>
  
  /* Calculates the frequency deviation mantissa and exponent */
  SpiritRadioSearchFreqDevME(pxSRadioInitStruct->lFreqDev, &FdevM, &FdevE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	695b      	ldr	r3, [r3, #20]
 8002916:	f107 0214 	add.w	r2, r7, #20
 800291a:	f107 0115 	add.w	r1, r7, #21
 800291e:	4618      	mov	r0, r3
 8002920:	f000 fdb8 	bl	8003494 <SpiritRadioSearchFreqDevME>
  digRadioRegArray[2] = (uint8_t)((FdevE<<4) | (tmpreg&0x08) | FdevM);
 8002924:	7d3b      	ldrb	r3, [r7, #20]
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	b25a      	sxtb	r2, r3
 800292a:	7c3b      	ldrb	r3, [r7, #16]
 800292c:	b25b      	sxtb	r3, r3
 800292e:	f003 0308 	and.w	r3, r3, #8
 8002932:	b25b      	sxtb	r3, r3
 8002934:	4313      	orrs	r3, r2
 8002936:	b25a      	sxtb	r2, r3
 8002938:	7d7b      	ldrb	r3, [r7, #21]
 800293a:	b25b      	sxtb	r3, r3
 800293c:	4313      	orrs	r3, r2
 800293e:	b25b      	sxtb	r3, r3
 8002940:	b2db      	uxtb	r3, r3
 8002942:	76bb      	strb	r3, [r7, #26]
  
  /* Calculates the channel filter mantissa and exponent */
  SpiritRadioSearchChannelBwME(pxSRadioInitStruct->lBandwidth, &bwM, &bwE);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	f107 0212 	add.w	r2, r7, #18
 800294c:	f107 0113 	add.w	r1, r7, #19
 8002950:	4618      	mov	r0, r3
 8002952:	f000 fcb9 	bl	80032c8 <SpiritRadioSearchChannelBwME>
  
  digRadioRegArray[3] = (uint8_t)((bwM<<4) | bwE);
 8002956:	7cfb      	ldrb	r3, [r7, #19]
 8002958:	011b      	lsls	r3, r3, #4
 800295a:	b25a      	sxtb	r2, r3
 800295c:	7cbb      	ldrb	r3, [r7, #18]
 800295e:	b25b      	sxtb	r3, r3
 8002960:	4313      	orrs	r3, r2
 8002962:	b25b      	sxtb	r3, r3
 8002964:	b2db      	uxtb	r3, r3
 8002966:	76fb      	strb	r3, [r7, #27]
 
  float if_off=(3.0f*480140)/(s_lXtalFrequency>>12)-64;  /* #1035-D */
 8002968:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <SpiritRadioInit+0x2c8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	0b1b      	lsrs	r3, r3, #12
 800296e:	4618      	mov	r0, r3
 8002970:	f7fe f8ce 	bl	8000b10 <__aeabi_ui2f>
 8002974:	4603      	mov	r3, r0
 8002976:	4619      	mov	r1, r3
 8002978:	4836      	ldr	r0, [pc, #216]	; (8002a54 <SpiritRadioInit+0x2d0>)
 800297a:	f7fe f9d5 	bl	8000d28 <__aeabi_fdiv>
 800297e:	4603      	mov	r3, r0
 8002980:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 8002984:	4618      	mov	r0, r3
 8002986:	f7fe f811 	bl	80009ac <__aeabi_fsub>
 800298a:	4603      	mov	r3, r0
 800298c:	627b      	str	r3, [r7, #36]	; 0x24
  
  uint8_t ifOffsetAna = ROUND(if_off);
 800298e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002990:	f7fe fb02 	bl	8000f98 <__aeabi_f2uiz>
 8002994:	4603      	mov	r3, r0
 8002996:	4618      	mov	r0, r3
 8002998:	f7fe f8ba 	bl	8000b10 <__aeabi_ui2f>
 800299c:	4603      	mov	r3, r0
 800299e:	4619      	mov	r1, r3
 80029a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029a2:	f7fe f803 	bl	80009ac <__aeabi_fsub>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7fe fac3 	bl	8000f38 <__aeabi_fcmpgt>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d007      	beq.n	80029c8 <SpiritRadioInit+0x244>
 80029b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029ba:	f7fe faed 	bl	8000f98 <__aeabi_f2uiz>
 80029be:	4603      	mov	r3, r0
 80029c0:	b2db      	uxtb	r3, r3
 80029c2:	3301      	adds	r3, #1
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	e004      	b.n	80029d2 <SpiritRadioInit+0x24e>
 80029c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80029ca:	f7fe fae5 	bl	8000f98 <__aeabi_f2uiz>
 80029ce:	4603      	mov	r3, r0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	73fb      	strb	r3, [r7, #15]
  
  if(s_lXtalFrequency<DOUBLE_XTAL_THR)
 80029d4:	4b1d      	ldr	r3, [pc, #116]	; (8002a4c <SpiritRadioInit+0x2c8>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a1d      	ldr	r2, [pc, #116]	; (8002a50 <SpiritRadioInit+0x2cc>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d802      	bhi.n	80029e4 <SpiritRadioInit+0x260>
  {
    /* if offset digital is the same in case of single xtal */
    anaRadioRegArray[1] = ifOffsetAna;
 80029de:	7bfb      	ldrb	r3, [r7, #15]
 80029e0:	777b      	strb	r3, [r7, #29]
 80029e2:	e03f      	b.n	8002a64 <SpiritRadioInit+0x2e0>
  }
  else
  {
    if_off=(3.0f*480140)/(s_lXtalFrequency>>13)-64;      /* #1035-D */
 80029e4:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <SpiritRadioInit+0x2c8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	0b5b      	lsrs	r3, r3, #13
 80029ea:	4618      	mov	r0, r3
 80029ec:	f7fe f890 	bl	8000b10 <__aeabi_ui2f>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4619      	mov	r1, r3
 80029f4:	4817      	ldr	r0, [pc, #92]	; (8002a54 <SpiritRadioInit+0x2d0>)
 80029f6:	f7fe f997 	bl	8000d28 <__aeabi_fdiv>
 80029fa:	4603      	mov	r3, r0
 80029fc:	f04f 4185 	mov.w	r1, #1115684864	; 0x42800000
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd ffd3 	bl	80009ac <__aeabi_fsub>
 8002a06:	4603      	mov	r3, r0
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
    
    /* ... otherwise recompute it */
    anaRadioRegArray[1] = ROUND(if_off);
 8002a0a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a0c:	f7fe fac4 	bl	8000f98 <__aeabi_f2uiz>
 8002a10:	4603      	mov	r3, r0
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe f87c 	bl	8000b10 <__aeabi_ui2f>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a1e:	f7fd ffc5 	bl	80009ac <__aeabi_fsub>
 8002a22:	4603      	mov	r3, r0
 8002a24:	f04f 517c 	mov.w	r1, #1056964608	; 0x3f000000
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fa85 	bl	8000f38 <__aeabi_fcmpgt>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d011      	beq.n	8002a58 <SpiritRadioInit+0x2d4>
 8002a34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a36:	f7fe faaf 	bl	8000f98 <__aeabi_f2uiz>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	3301      	adds	r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e00e      	b.n	8002a62 <SpiritRadioInit+0x2de>
 8002a44:	49742400 	.word	0x49742400
 8002a48:	20000128 	.word	0x20000128
 8002a4c:	20000124 	.word	0x20000124
 8002a50:	01c9c37f 	.word	0x01c9c37f
 8002a54:	49afd520 	.word	0x49afd520
 8002a58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002a5a:	f7fe fa9d 	bl	8000f98 <__aeabi_f2uiz>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	777b      	strb	r3, [r7, #29]
  }
  
  g_xStatus = SpiritSpiWriteRegisters(IF_OFFSET_ANA_BASE, 1, &ifOffsetAna);
 8002a64:	f107 030f 	add.w	r3, r7, #15
 8002a68:	461a      	mov	r2, r3
 8002a6a:	2101      	movs	r1, #1
 8002a6c:	2007      	movs	r0, #7
 8002a6e:	f001 fa4f 	bl	8003f10 <RadioSpiWriteRegisters>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b34      	ldr	r3, [pc, #208]	; (8002b48 <SpiritRadioInit+0x3c4>)
 8002a76:	b212      	sxth	r2, r2
 8002a78:	4611      	mov	r1, r2
 8002a7a:	7019      	strb	r1, [r3, #0]
 8002a7c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002a80:	705a      	strb	r2, [r3, #1]

  
  /* Sets Xtal configuration */
  if(s_lXtalFrequency>DOUBLE_XTAL_THR)
 8002a82:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <SpiritRadioInit+0x3c8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a32      	ldr	r2, [pc, #200]	; (8002b50 <SpiritRadioInit+0x3cc>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d90b      	bls.n	8002aa4 <SpiritRadioInit+0x320>
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG((s_lXtalFrequency/2)));
 8002a8c:	4b2f      	ldr	r3, [pc, #188]	; (8002b4c <SpiritRadioInit+0x3c8>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a30      	ldr	r2, [pc, #192]	; (8002b54 <SpiritRadioInit+0x3d0>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	bf8c      	ite	hi
 8002a96:	2301      	movhi	r3, #1
 8002a98:	2300      	movls	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f000 f85d 	bl	8002b5c <SpiritRadioSetXtalFlag>
 8002aa2:	e00a      	b.n	8002aba <SpiritRadioInit+0x336>
  }
  else
  {
    SpiritRadioSetXtalFlag(XTAL_FLAG(s_lXtalFrequency));
 8002aa4:	4b29      	ldr	r3, [pc, #164]	; (8002b4c <SpiritRadioInit+0x3c8>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a2b      	ldr	r2, [pc, #172]	; (8002b58 <SpiritRadioInit+0x3d4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	bf8c      	ite	hi
 8002aae:	2301      	movhi	r3, #1
 8002ab0:	2300      	movls	r3, #0
 8002ab2:	b2db      	uxtb	r3, r3
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f000 f851 	bl	8002b5c <SpiritRadioSetXtalFlag>
  }
  
  /* Sets the channel number in the corresponding register */
  SpiritSpiWriteRegisters(CHNUM_BASE, 1, &pxSRadioInitStruct->cChannelNumber);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	330c      	adds	r3, #12
 8002abe:	461a      	mov	r2, r3
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	206c      	movs	r0, #108	; 0x6c
 8002ac4:	f001 fa24 	bl	8003f10 <RadioSpiWriteRegisters>
  
  /* Configures the Analog Radio registers */
  SpiritSpiWriteRegisters(CHSPACE_BASE, 4, anaRadioRegArray);
 8002ac8:	f107 031c 	add.w	r3, r7, #28
 8002acc:	461a      	mov	r2, r3
 8002ace:	2104      	movs	r1, #4
 8002ad0:	200c      	movs	r0, #12
 8002ad2:	f001 fa1d 	bl	8003f10 <RadioSpiWriteRegisters>
  
  /* Configures the Digital Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(MOD1_BASE, 4, digRadioRegArray);
 8002ad6:	f107 0318 	add.w	r3, r7, #24
 8002ada:	461a      	mov	r2, r3
 8002adc:	2104      	movs	r1, #4
 8002ade:	201a      	movs	r0, #26
 8002ae0:	f001 fa16 	bl	8003f10 <RadioSpiWriteRegisters>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b18      	ldr	r3, [pc, #96]	; (8002b48 <SpiritRadioInit+0x3c4>)
 8002ae8:	b212      	sxth	r2, r2
 8002aea:	4611      	mov	r1, r2
 8002aec:	7019      	strb	r1, [r3, #0]
 8002aee:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002af2:	705a      	strb	r2, [r3, #1]
  
  /* Enable the freeze option of the AFC on the SYNC word */
  SpiritRadioAFCFreezeOnSync(S_ENABLE);
 8002af4:	2001      	movs	r0, #1
 8002af6:	f000 ff15 	bl	8003924 <SpiritRadioAFCFreezeOnSync>
  
  /* Set the IQC correction optimal value */
  anaRadioRegArray[0]=0x80;
 8002afa:	2380      	movs	r3, #128	; 0x80
 8002afc:	773b      	strb	r3, [r7, #28]
  anaRadioRegArray[1]=0xE3;
 8002afe:	23e3      	movs	r3, #227	; 0xe3
 8002b00:	777b      	strb	r3, [r7, #29]
  g_xStatus = SpiritSpiWriteRegisters(0x99, 2, anaRadioRegArray);
 8002b02:	f107 031c 	add.w	r3, r7, #28
 8002b06:	461a      	mov	r2, r3
 8002b08:	2102      	movs	r1, #2
 8002b0a:	2099      	movs	r0, #153	; 0x99
 8002b0c:	f001 fa00 	bl	8003f10 <RadioSpiWriteRegisters>
 8002b10:	4602      	mov	r2, r0
 8002b12:	4b0d      	ldr	r3, [pc, #52]	; (8002b48 <SpiritRadioInit+0x3c4>)
 8002b14:	b212      	sxth	r2, r2
 8002b16:	4611      	mov	r1, r2
 8002b18:	7019      	strb	r1, [r3, #0]
 8002b1a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b1e:	705a      	strb	r2, [r3, #1]
  
  anaRadioRegArray[0]=0x22;
 8002b20:	2322      	movs	r3, #34	; 0x22
 8002b22:	773b      	strb	r3, [r7, #28]
  SpiritSpiWriteRegisters(0xBC, 1, anaRadioRegArray);
 8002b24:	f107 031c 	add.w	r3, r7, #28
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	20bc      	movs	r0, #188	; 0xbc
 8002b2e:	f001 f9ef 	bl	8003f10 <RadioSpiWriteRegisters>
  
  return SpiritRadioSetFrequencyBase(pxSRadioInitStruct->lFrequencyBase);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f9ae 	bl	8002e98 <SpiritRadioSetFrequencyBase>
 8002b3c:	4603      	mov	r3, r0
  
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3734      	adds	r7, #52	; 0x34
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bd90      	pop	{r4, r7, pc}
 8002b46:	bf00      	nop
 8002b48:	20000128 	.word	0x20000128
 8002b4c:	20000124 	.word	0x20000124
 8002b50:	01c9c380 	.word	0x01c9c380
 8002b54:	02faf07f 	.word	0x02faf07f
 8002b58:	017d783f 	.word	0x017d783f

08002b5c <SpiritRadioSetXtalFlag>:
*         @arg XTAL_FLAG_24_MHz:  in case of 24 MHz crystal
*         @arg XTAL_FLAG_26_MHz:  in case of 26 MHz crystal
* @retval None.
*/
void SpiritRadioSetXtalFlag(XtalFlag xXtal)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b084      	sub	sp, #16
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	4603      	mov	r3, r0
 8002b64:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 8002b66:	2300      	movs	r3, #0
 8002b68:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_XTAL_FLAG(xXtal));
  
  /* Reads the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiReadRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002b6a:	f107 030f 	add.w	r3, r7, #15
 8002b6e:	461a      	mov	r2, r3
 8002b70:	2101      	movs	r1, #1
 8002b72:	2001      	movs	r0, #1
 8002b74:	f001 fa18 	bl	8003fa8 <RadioSpiReadRegisters>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	4b14      	ldr	r3, [pc, #80]	; (8002bcc <SpiritRadioSetXtalFlag+0x70>)
 8002b7c:	b212      	sxth	r2, r2
 8002b7e:	4611      	mov	r1, r2
 8002b80:	7019      	strb	r1, [r3, #0]
 8002b82:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002b86:	705a      	strb	r2, [r3, #1]
  if(xXtal == XTAL_FLAG_26_MHz)
 8002b88:	79fb      	ldrb	r3, [r7, #7]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d105      	bne.n	8002b9a <SpiritRadioSetXtalFlag+0x3e>
  {
    tempRegValue|=SELECT_24_26_MHZ_MASK;
 8002b8e:	7bfb      	ldrb	r3, [r7, #15]
 8002b90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	73fb      	strb	r3, [r7, #15]
 8002b98:	e004      	b.n	8002ba4 <SpiritRadioSetXtalFlag+0x48>
  }
  else
  {
    tempRegValue &= (~SELECT_24_26_MHZ_MASK);
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ba0:	b2db      	uxtb	r3, r3
 8002ba2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the 24_26MHz_SELECT field in the ANA_FUNC_CONF_0 register */
  g_xStatus = SpiritSpiWriteRegisters(ANA_FUNC_CONF0_BASE, 1, &tempRegValue);
 8002ba4:	f107 030f 	add.w	r3, r7, #15
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2101      	movs	r1, #1
 8002bac:	2001      	movs	r0, #1
 8002bae:	f001 f9af 	bl	8003f10 <RadioSpiWriteRegisters>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	4b05      	ldr	r3, [pc, #20]	; (8002bcc <SpiritRadioSetXtalFlag+0x70>)
 8002bb6:	b212      	sxth	r2, r2
 8002bb8:	4611      	mov	r1, r2
 8002bba:	7019      	strb	r1, [r3, #0]
 8002bbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002bc0:	705a      	strb	r2, [r3, #1]
  
}
 8002bc2:	bf00      	nop
 8002bc4:	3710      	adds	r7, #16
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}
 8002bca:	bf00      	nop
 8002bcc:	20000128 	.word	0x20000128

08002bd0 <SpiritRadioSearchWCP>:
*         <li> Low Band: from 300 MHz to 348 MHz </li>
*         <li> Very low Band: from 150 MHz to 174 MHz </li> </ul>
* @retval uint8_t Charge pump word.
*/
uint8_t SpiritRadioSearchWCP(uint32_t lFc)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  int8_t i=0;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	73fb      	strb	r3, [r7, #15]
  uint32_t vcofreq=0;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
  uint8_t BFactor=0;
 8002be0:	2300      	movs	r3, #0
 8002be2:	73bb      	strb	r3, [r7, #14]
  
  /* Check the channel center frequency is in one of the possible range */
  s_assert_param(IS_FREQUENCY_BAND(lFc));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFc))
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a3a      	ldr	r2, [pc, #232]	; (8002cd0 <SpiritRadioSearchWCP+0x100>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d306      	bcc.n	8002bfa <SpiritRadioSearchWCP+0x2a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a39      	ldr	r2, [pc, #228]	; (8002cd4 <SpiritRadioSearchWCP+0x104>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d802      	bhi.n	8002bfa <SpiritRadioSearchWCP+0x2a>
  {
    BFactor = HIGH_BAND_FACTOR;
 8002bf4:	2306      	movs	r3, #6
 8002bf6:	73bb      	strb	r3, [r7, #14]
 8002bf8:	e01f      	b.n	8002c3a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFc))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a36      	ldr	r2, [pc, #216]	; (8002cd8 <SpiritRadioSearchWCP+0x108>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d906      	bls.n	8002c10 <SpiritRadioSearchWCP+0x40>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a35      	ldr	r2, [pc, #212]	; (8002cdc <SpiritRadioSearchWCP+0x10c>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d802      	bhi.n	8002c10 <SpiritRadioSearchWCP+0x40>
  {
    BFactor = MIDDLE_BAND_FACTOR;
 8002c0a:	230c      	movs	r3, #12
 8002c0c:	73bb      	strb	r3, [r7, #14]
 8002c0e:	e014      	b.n	8002c3a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFc))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	4a33      	ldr	r2, [pc, #204]	; (8002ce0 <SpiritRadioSearchWCP+0x110>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d906      	bls.n	8002c26 <SpiritRadioSearchWCP+0x56>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	4a32      	ldr	r2, [pc, #200]	; (8002ce4 <SpiritRadioSearchWCP+0x114>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d802      	bhi.n	8002c26 <SpiritRadioSearchWCP+0x56>
  {
    BFactor = LOW_BAND_FACTOR;
 8002c20:	2310      	movs	r3, #16
 8002c22:	73bb      	strb	r3, [r7, #14]
 8002c24:	e009      	b.n	8002c3a <SpiritRadioSearchWCP+0x6a>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFc))
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a2f      	ldr	r2, [pc, #188]	; (8002ce8 <SpiritRadioSearchWCP+0x118>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d905      	bls.n	8002c3a <SpiritRadioSearchWCP+0x6a>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a2e      	ldr	r2, [pc, #184]	; (8002cec <SpiritRadioSearchWCP+0x11c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d801      	bhi.n	8002c3a <SpiritRadioSearchWCP+0x6a>
  {
    BFactor = VERY_LOW_BAND_FACTOR;
 8002c36:	2320      	movs	r3, #32
 8002c38:	73bb      	strb	r3, [r7, #14]
  }
  
  /* Calculates the VCO frequency VCOFreq = lFc*B */
  vcofreq = lFc/1000*BFactor;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a2c      	ldr	r2, [pc, #176]	; (8002cf0 <SpiritRadioSearchWCP+0x120>)
 8002c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c42:	099b      	lsrs	r3, r3, #6
 8002c44:	7bba      	ldrb	r2, [r7, #14]
 8002c46:	fb02 f303 	mul.w	r3, r2, r3
 8002c4a:	60bb      	str	r3, [r7, #8]
  
  /* Search in the vco frequency array the charge pump word */
  if(vcofreq>=((uint32_t)s_vectnVCOFreq[15])*1000)
 8002c4c:	f241 631f 	movw	r3, #5663	; 0x161f
 8002c50:	461a      	mov	r2, r3
 8002c52:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d302      	bcc.n	8002c66 <SpiritRadioSearchWCP+0x96>
  {
    i=15;
 8002c60:	230f      	movs	r3, #15
 8002c62:	73fb      	strb	r3, [r7, #15]
 8002c64:	e023      	b.n	8002cae <SpiritRadioSearchWCP+0xde>
  }
  else
  {
    /* Search the value */
    for(i=0 ; i<15 && vcofreq>((uint32_t)s_vectnVCOFreq[i])*1000 ; i++);
 8002c66:	2300      	movs	r3, #0
 8002c68:	73fb      	strb	r3, [r7, #15]
 8002c6a:	e005      	b.n	8002c78 <SpiritRadioSearchWCP+0xa8>
 8002c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	3301      	adds	r3, #1
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	73fb      	strb	r3, [r7, #15]
 8002c78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c7c:	2b0e      	cmp	r3, #14
 8002c7e:	dc0c      	bgt.n	8002c9a <SpiritRadioSearchWCP+0xca>
 8002c80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c84:	4a1b      	ldr	r2, [pc, #108]	; (8002cf4 <SpiritRadioSearchWCP+0x124>)
 8002c86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002c8a:	461a      	mov	r2, r3
 8002c8c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002c90:	fb02 f303 	mul.w	r3, r2, r3
 8002c94:	68ba      	ldr	r2, [r7, #8]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d8e8      	bhi.n	8002c6c <SpiritRadioSearchWCP+0x9c>
    
    /* Be sure that it is the best approssimation */
    if (i!=0)
 8002c9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <SpiritRadioSearchWCP+0xde>
      i--;
 8002ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	3b01      	subs	r3, #1
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return index */
  return (i%8);
 8002cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cb2:	425a      	negs	r2, r3
 8002cb4:	f003 0307 	and.w	r3, r3, #7
 8002cb8:	f002 0207 	and.w	r2, r2, #7
 8002cbc:	bf58      	it	pl
 8002cbe:	4253      	negpl	r3, r2
 8002cc0:	b25b      	sxtb	r3, r3
 8002cc2:	b2db      	uxtb	r3, r3
  
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3714      	adds	r7, #20
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bc80      	pop	{r7}
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	2e5f5680 	.word	0x2e5f5680
 8002cd4:	390c2fe0 	.word	0x390c2fe0
 8002cd8:	1701e47f 	.word	0x1701e47f
 8002cdc:	1c146a60 	.word	0x1c146a60
 8002ce0:	11d260bf 	.word	0x11d260bf
 8002ce4:	14ced7e0 	.word	0x14ced7e0
 8002ce8:	08e18f3f 	.word	0x08e18f3f
 8002cec:	0a6fd060 	.word	0x0a6fd060
 8002cf0:	10624dd3 	.word	0x10624dd3
 8002cf4:	08007178 	.word	0x08007178

08002cf8 <SpiritRadioGetSynthWord>:
* @brief  Returns the synth word.
* @param  None.
* @retval uint32_t Synth word.
*/
uint32_t SpiritRadioGetSynthWord(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b082      	sub	sp, #8
 8002cfc:	af00      	add	r7, sp, #0
  uint8_t regArray[4];
  
  /* Reads the SYNTH registers, build the synth word and return it */
  g_xStatus = SpiritSpiReadRegisters(SYNT3_BASE, 4, regArray);
 8002cfe:	1d3b      	adds	r3, r7, #4
 8002d00:	461a      	mov	r2, r3
 8002d02:	2104      	movs	r1, #4
 8002d04:	2008      	movs	r0, #8
 8002d06:	f001 f94f 	bl	8003fa8 <RadioSpiReadRegisters>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <SpiritRadioGetSynthWord+0x48>)
 8002d0e:	b212      	sxth	r2, r2
 8002d10:	4611      	mov	r1, r2
 8002d12:	7019      	strb	r1, [r3, #0]
 8002d14:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d18:	705a      	strb	r2, [r3, #1]
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002d1a:	793b      	ldrb	r3, [r7, #4]
 8002d1c:	055b      	lsls	r3, r3, #21
 8002d1e:	f003 7278 	and.w	r2, r3, #65011712	; 0x3e00000
 8002d22:	797b      	ldrb	r3, [r7, #5]
 8002d24:	035b      	lsls	r3, r3, #13
 8002d26:	441a      	add	r2, r3
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002d28:	79bb      	ldrb	r3, [r7, #6]
 8002d2a:	015b      	lsls	r3, r3, #5
  return ((((uint32_t)(regArray[0]&0x1F))<<21)+(((uint32_t)(regArray[1]))<<13)+\
 8002d2c:	4413      	add	r3, r2
    (((uint32_t)(regArray[2]))<<5)+(((uint32_t)(regArray[3]))>>3));
 8002d2e:	79fa      	ldrb	r2, [r7, #7]
 8002d30:	08d2      	lsrs	r2, r2, #3
 8002d32:	b2d2      	uxtb	r2, r2
 8002d34:	4413      	add	r3, r2
  
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	20000128 	.word	0x20000128

08002d44 <SpiritRadioGetBand>:
*         @arg  MIDDLE_BAND: Middle Band selected: from 387 MHz to 470 MHz
*         @arg  LOW_BAND:  Low Band selected: from 300 MHz to 348 MHz
*         @arg  VERY_LOW_BAND:  Very low Band selected: from 150 MHz to 174 MHz
*/
BandSelect SpiritRadioGetBand(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the SYNT0 register */
  g_xStatus = SpiritSpiReadRegisters(SYNT0_BASE, 1, &tempRegValue);
 8002d4a:	1dfb      	adds	r3, r7, #7
 8002d4c:	461a      	mov	r2, r3
 8002d4e:	2101      	movs	r1, #1
 8002d50:	200b      	movs	r0, #11
 8002d52:	f001 f929 	bl	8003fa8 <RadioSpiReadRegisters>
 8002d56:	4602      	mov	r2, r0
 8002d58:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <SpiritRadioGetBand+0x58>)
 8002d5a:	b212      	sxth	r2, r2
 8002d5c:	4611      	mov	r1, r2
 8002d5e:	7019      	strb	r1, [r3, #0]
 8002d60:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002d64:	705a      	strb	r2, [r3, #1]
  
  /* Mask the Band selected field */
  if((tempRegValue & 0x07) == SYNT0_BS_6)
 8002d66:	79fb      	ldrb	r3, [r7, #7]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d101      	bne.n	8002d74 <SpiritRadioGetBand+0x30>
  {
    return HIGH_BAND;
 8002d70:	2300      	movs	r3, #0
 8002d72:	e00e      	b.n	8002d92 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_12)
 8002d74:	79fb      	ldrb	r3, [r7, #7]
 8002d76:	f003 0307 	and.w	r3, r3, #7
 8002d7a:	2b03      	cmp	r3, #3
 8002d7c:	d101      	bne.n	8002d82 <SpiritRadioGetBand+0x3e>
  {
    return MIDDLE_BAND;
 8002d7e:	2301      	movs	r3, #1
 8002d80:	e007      	b.n	8002d92 <SpiritRadioGetBand+0x4e>
  }
  else if ((tempRegValue & 0x07) == SYNT0_BS_16)
 8002d82:	79fb      	ldrb	r3, [r7, #7]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d101      	bne.n	8002d90 <SpiritRadioGetBand+0x4c>
  {
    return LOW_BAND;
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e000      	b.n	8002d92 <SpiritRadioGetBand+0x4e>
  }
  else
  {
    return VERY_LOW_BAND;
 8002d90:	2303      	movs	r3, #3
  }
  
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3708      	adds	r7, #8
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000128 	.word	0x20000128

08002da0 <SpiritRadioGetChannel>:
* @brief  Returns the actual channel number.
* @param  None.
* @retval uint8_t Actual channel number.
*/
uint8_t SpiritRadioGetChannel(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b082      	sub	sp, #8
 8002da4:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  /* Reads the CHNUM register and return the value */
  g_xStatus = SpiritSpiReadRegisters(CHNUM_BASE, 1, &tempRegValue);
 8002da6:	1dfb      	adds	r3, r7, #7
 8002da8:	461a      	mov	r2, r3
 8002daa:	2101      	movs	r1, #1
 8002dac:	206c      	movs	r0, #108	; 0x6c
 8002dae:	f001 f8fb 	bl	8003fa8 <RadioSpiReadRegisters>
 8002db2:	4602      	mov	r2, r0
 8002db4:	4b05      	ldr	r3, [pc, #20]	; (8002dcc <SpiritRadioGetChannel+0x2c>)
 8002db6:	b212      	sxth	r2, r2
 8002db8:	4611      	mov	r1, r2
 8002dba:	7019      	strb	r1, [r3, #0]
 8002dbc:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002dc0:	705a      	strb	r2, [r3, #1]
  
  return tempRegValue;
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
  
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3708      	adds	r7, #8
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}
 8002dcc:	20000128 	.word	0x20000128

08002dd0 <SpiritRadioGetChannelSpace>:
* @param  None.
* @retval uint32_t Channel space. The channel space is: CS = channel_space_factor x XtalFrequency/2^15
*         where channel_space_factor is the CHSPACE register value.
*/
uint32_t SpiritRadioGetChannelSpace(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  uint8_t channelSpaceFactor;
  
  /* Reads the CHSPACE register, calculate the channel space and return it */
  g_xStatus = SpiritSpiReadRegisters(CHSPACE_BASE, 1, &channelSpaceFactor);
 8002dd6:	1dfb      	adds	r3, r7, #7
 8002dd8:	461a      	mov	r2, r3
 8002dda:	2101      	movs	r1, #1
 8002ddc:	200c      	movs	r0, #12
 8002dde:	f001 f8e3 	bl	8003fa8 <RadioSpiReadRegisters>
 8002de2:	4602      	mov	r2, r0
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <SpiritRadioGetChannelSpace+0x38>)
 8002de6:	b212      	sxth	r2, r2
 8002de8:	4611      	mov	r1, r2
 8002dea:	7019      	strb	r1, [r3, #0]
 8002dec:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002df0:	705a      	strb	r2, [r3, #1]
  
  /* Compute the Hertz value and return it */
  return ((channelSpaceFactor*s_lXtalFrequency)/CHSPACE_DIVIDER);
 8002df2:	79fb      	ldrb	r3, [r7, #7]
 8002df4:	461a      	mov	r2, r3
 8002df6:	4b05      	ldr	r3, [pc, #20]	; (8002e0c <SpiritRadioGetChannelSpace+0x3c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	fb02 f303 	mul.w	r3, r2, r3
 8002dfe:	0bdb      	lsrs	r3, r3, #15
  
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	20000128 	.word	0x20000128
 8002e0c:	20000124 	.word	0x20000124

08002e10 <SpiritRadioGetFrequencyOffset>:
* @brief  Returns the actual frequency offset.
* @param  None.
* @retval int32_t Frequency offset expressed in Hz as signed word.
*/
int32_t SpiritRadioGetFrequencyOffset(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
  uint8_t tempArray[2];
  int16_t xtalOffsetFactor;
  
  /* Reads the FC_OFFSET registers */
  g_xStatus = SpiritSpiReadRegisters(FC_OFFSET1_BASE, 2, tempArray);
 8002e16:	1d3b      	adds	r3, r7, #4
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2102      	movs	r1, #2
 8002e1c:	200e      	movs	r0, #14
 8002e1e:	f001 f8c3 	bl	8003fa8 <RadioSpiReadRegisters>
 8002e22:	4602      	mov	r2, r0
 8002e24:	4b1a      	ldr	r3, [pc, #104]	; (8002e90 <SpiritRadioGetFrequencyOffset+0x80>)
 8002e26:	b212      	sxth	r2, r2
 8002e28:	4611      	mov	r1, r2
 8002e2a:	7019      	strb	r1, [r3, #0]
 8002e2c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8002e30:	705a      	strb	r2, [r3, #1]
  
  /* Calculates the Offset Factor */
  uint16_t xtalOffTemp = ((((uint16_t)tempArray[0])<<8)+((uint16_t)tempArray[1]));
 8002e32:	793b      	ldrb	r3, [r7, #4]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	021b      	lsls	r3, r3, #8
 8002e38:	b29a      	uxth	r2, r3
 8002e3a:	797b      	ldrb	r3, [r7, #5]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	807b      	strh	r3, [r7, #2]
  
  if(xtalOffTemp & 0x0800)
 8002e44:	887b      	ldrh	r3, [r7, #2]
 8002e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d007      	beq.n	8002e5e <SpiritRadioGetFrequencyOffset+0x4e>
  {
    xtalOffTemp = xtalOffTemp | 0xF000;
 8002e4e:	887b      	ldrh	r3, [r7, #2]
 8002e50:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8002e54:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	807b      	strh	r3, [r7, #2]
 8002e5c:	e004      	b.n	8002e68 <SpiritRadioGetFrequencyOffset+0x58>
  }
  else
  {
    xtalOffTemp = xtalOffTemp & 0x0FFF;
 8002e5e:	887b      	ldrh	r3, [r7, #2]
 8002e60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e64:	b29b      	uxth	r3, r3
 8002e66:	807b      	strh	r3, [r7, #2]
  }
  
  xtalOffsetFactor = *((int16_t*)(&xtalOffTemp));
 8002e68:	1cbb      	adds	r3, r7, #2
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	80fb      	strh	r3, [r7, #6]
  
  /* Calculates the frequency offset and return it */
  return ((int32_t)(xtalOffsetFactor*s_lXtalFrequency)/FBASE_DIVIDER);
 8002e6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e72:	4a08      	ldr	r2, [pc, #32]	; (8002e94 <SpiritRadioGetFrequencyOffset+0x84>)
 8002e74:	6812      	ldr	r2, [r2, #0]
 8002e76:	fb02 f303 	mul.w	r3, r2, r3
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	da03      	bge.n	8002e86 <SpiritRadioGetFrequencyOffset+0x76>
 8002e7e:	f503 337f 	add.w	r3, r3, #261120	; 0x3fc00
 8002e82:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 8002e86:	149b      	asrs	r3, r3, #18
  
}
 8002e88:	4618      	mov	r0, r3
 8002e8a:	3708      	adds	r7, #8
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	20000128 	.word	0x20000128
 8002e94:	20000124 	.word	0x20000124

08002e98 <SpiritRadioSetFrequencyBase>:
*         the corresponding register. The user shall fix it before call this API.
* @param  lFBase the base carrier frequency expressed in Hz as unsigned word.
* @retval Error code: 0=no error, 1=error during calibration of VCO.
*/
uint8_t SpiritRadioSetFrequencyBase(uint32_t lFBase)
{
 8002e98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e9c:	b08a      	sub	sp, #40	; 0x28
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	6078      	str	r0, [r7, #4]
  uint32_t synthWord, Fc;
  uint8_t band=0, anaRadioRegArray[4], wcp;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  /* Check the parameter */
  s_assert_param(IS_FREQUENCY_BAND(lFBase));
  
  /* Search the operating band */
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a79      	ldr	r2, [pc, #484]	; (8003090 <SpiritRadioSetFrequencyBase+0x1f8>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d307      	bcc.n	8002ec0 <SpiritRadioSetFrequencyBase+0x28>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a78      	ldr	r2, [pc, #480]	; (8003094 <SpiritRadioSetFrequencyBase+0x1fc>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d803      	bhi.n	8002ec0 <SpiritRadioSetFrequencyBase+0x28>
  {
    band = HIGH_BAND;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ebe:	e022      	b.n	8002f06 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a75      	ldr	r2, [pc, #468]	; (8003098 <SpiritRadioSetFrequencyBase+0x200>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d907      	bls.n	8002ed8 <SpiritRadioSetFrequencyBase+0x40>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	4a74      	ldr	r2, [pc, #464]	; (800309c <SpiritRadioSetFrequencyBase+0x204>)
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d803      	bhi.n	8002ed8 <SpiritRadioSetFrequencyBase+0x40>
  {
    band = MIDDLE_BAND;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002ed6:	e016      	b.n	8002f06 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a71      	ldr	r2, [pc, #452]	; (80030a0 <SpiritRadioSetFrequencyBase+0x208>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d907      	bls.n	8002ef0 <SpiritRadioSetFrequencyBase+0x58>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a70      	ldr	r2, [pc, #448]	; (80030a4 <SpiritRadioSetFrequencyBase+0x20c>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d803      	bhi.n	8002ef0 <SpiritRadioSetFrequencyBase+0x58>
  {
    band = LOW_BAND;
 8002ee8:	2302      	movs	r3, #2
 8002eea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8002eee:	e00a      	b.n	8002f06 <SpiritRadioSetFrequencyBase+0x6e>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a6d      	ldr	r2, [pc, #436]	; (80030a8 <SpiritRadioSetFrequencyBase+0x210>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d906      	bls.n	8002f06 <SpiritRadioSetFrequencyBase+0x6e>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a6c      	ldr	r2, [pc, #432]	; (80030ac <SpiritRadioSetFrequencyBase+0x214>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d802      	bhi.n	8002f06 <SpiritRadioSetFrequencyBase+0x6e>
  {
    band = VERY_LOW_BAND;
 8002f00:	2303      	movs	r3, #3
 8002f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }
  
  int32_t FOffset  = SpiritRadioGetFrequencyOffset();
 8002f06:	f7ff ff83 	bl	8002e10 <SpiritRadioGetFrequencyOffset>
 8002f0a:	6238      	str	r0, [r7, #32]
  uint32_t lChannelSpace  = SpiritRadioGetChannelSpace();
 8002f0c:	f7ff ff60 	bl	8002dd0 <SpiritRadioGetChannelSpace>
 8002f10:	61f8      	str	r0, [r7, #28]
  uint8_t cChannelNum = SpiritRadioGetChannel();
 8002f12:	f7ff ff45 	bl	8002da0 <SpiritRadioGetChannel>
 8002f16:	4603      	mov	r3, r0
 8002f18:	76fb      	strb	r3, [r7, #27]
  
  /* Calculates the channel center frequency */
  Fc = lFBase + FOffset + lChannelSpace*cChannelNum;
 8002f1a:	6a3a      	ldr	r2, [r7, #32]
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	441a      	add	r2, r3
 8002f20:	7efb      	ldrb	r3, [r7, #27]
 8002f22:	69f9      	ldr	r1, [r7, #28]
 8002f24:	fb01 f303 	mul.w	r3, r1, r3
 8002f28:	4413      	add	r3, r2
 8002f2a:	617b      	str	r3, [r7, #20]
  
  /* Reads the reference divider */
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv()+1;
 8002f2c:	f000 fd5c 	bl	80039e8 <SpiritRadioGetRefDiv>
 8002f30:	4603      	mov	r3, r0
 8002f32:	3301      	adds	r3, #1
 8002f34:	74fb      	strb	r3, [r7, #19]
  
  /* Selects the VCO */
  switch(band)
 8002f36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f3a:	2b03      	cmp	r3, #3
 8002f3c:	d839      	bhi.n	8002fb2 <SpiritRadioSetFrequencyBase+0x11a>
 8002f3e:	a201      	add	r2, pc, #4	; (adr r2, 8002f44 <SpiritRadioSetFrequencyBase+0xac>)
 8002f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f44:	08002f9d 	.word	0x08002f9d
 8002f48:	08002f85 	.word	0x08002f85
 8002f4c:	08002f6d 	.word	0x08002f6d
 8002f50:	08002f55 	.word	0x08002f55
  {
  case VERY_LOW_BAND:
    if(Fc<161281250)
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	4a56      	ldr	r2, [pc, #344]	; (80030b0 <SpiritRadioSetFrequencyBase+0x218>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d803      	bhi.n	8002f64 <SpiritRadioSetFrequencyBase+0xcc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002f5c:	2000      	movs	r0, #0
 8002f5e:	f7fe fe79 	bl	8001c54 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002f62:	e026      	b.n	8002fb2 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002f64:	2001      	movs	r0, #1
 8002f66:	f7fe fe75 	bl	8001c54 <SpiritCalibrationSelectVco>
    break;
 8002f6a:	e022      	b.n	8002fb2 <SpiritRadioSetFrequencyBase+0x11a>
    
  case LOW_BAND:
    if(Fc<322562500)
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	4a51      	ldr	r2, [pc, #324]	; (80030b4 <SpiritRadioSetFrequencyBase+0x21c>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d803      	bhi.n	8002f7c <SpiritRadioSetFrequencyBase+0xe4>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002f74:	2000      	movs	r0, #0
 8002f76:	f7fe fe6d 	bl	8001c54 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002f7a:	e01a      	b.n	8002fb2 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002f7c:	2001      	movs	r0, #1
 8002f7e:	f7fe fe69 	bl	8001c54 <SpiritCalibrationSelectVco>
    break;
 8002f82:	e016      	b.n	8002fb2 <SpiritRadioSetFrequencyBase+0x11a>
    
  case MIDDLE_BAND:
    if(Fc<430083334)
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	4a4c      	ldr	r2, [pc, #304]	; (80030b8 <SpiritRadioSetFrequencyBase+0x220>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d803      	bhi.n	8002f94 <SpiritRadioSetFrequencyBase+0xfc>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002f8c:	2000      	movs	r0, #0
 8002f8e:	f7fe fe61 	bl	8001c54 <SpiritCalibrationSelectVco>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
    }
    break;
 8002f92:	e00e      	b.n	8002fb2 <SpiritRadioSetFrequencyBase+0x11a>
      SpiritCalibrationSelectVco(VCO_H);
 8002f94:	2001      	movs	r0, #1
 8002f96:	f7fe fe5d 	bl	8001c54 <SpiritCalibrationSelectVco>
    break;
 8002f9a:	e00a      	b.n	8002fb2 <SpiritRadioSetFrequencyBase+0x11a>
    
  case HIGH_BAND:
    if(Fc<860166667)
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	4a47      	ldr	r2, [pc, #284]	; (80030bc <SpiritRadioSetFrequencyBase+0x224>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d803      	bhi.n	8002fac <SpiritRadioSetFrequencyBase+0x114>
    {
      SpiritCalibrationSelectVco(VCO_L);
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	f7fe fe55 	bl	8001c54 <SpiritCalibrationSelectVco>
 8002faa:	e002      	b.n	8002fb2 <SpiritRadioSetFrequencyBase+0x11a>
    }
    else
    {
      SpiritCalibrationSelectVco(VCO_H);
 8002fac:	2001      	movs	r0, #1
 8002fae:	f7fe fe51 	bl	8001c54 <SpiritCalibrationSelectVco>
    }
  }
  
  /* Search the VCO charge pump word and set the corresponding register */
  wcp = SpiritRadioSearchWCP(Fc);
 8002fb2:	6978      	ldr	r0, [r7, #20]
 8002fb4:	f7ff fe0c 	bl	8002bd0 <SpiritRadioSearchWCP>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	74bb      	strb	r3, [r7, #18]
  
  synthWord = (uint32_t)(lFBase*s_vectcBHalfFactor[band]*(((double)(FBASE_DIVIDER*cRefDiv))/s_lXtalFrequency));
 8002fbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002fc0:	4a3f      	ldr	r2, [pc, #252]	; (80030c0 <SpiritRadioSetFrequencyBase+0x228>)
 8002fc2:	5cd3      	ldrb	r3, [r2, r3]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	fb02 f303 	mul.w	r3, r2, r3
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fa3d 	bl	800044c <__aeabi_ui2d>
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	460d      	mov	r5, r1
 8002fd6:	7cfb      	ldrb	r3, [r7, #19]
 8002fd8:	049b      	lsls	r3, r3, #18
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd fa46 	bl	800046c <__aeabi_i2d>
 8002fe0:	4680      	mov	r8, r0
 8002fe2:	4689      	mov	r9, r1
 8002fe4:	4b37      	ldr	r3, [pc, #220]	; (80030c4 <SpiritRadioSetFrequencyBase+0x22c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd fa2f 	bl	800044c <__aeabi_ui2d>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4640      	mov	r0, r8
 8002ff4:	4649      	mov	r1, r9
 8002ff6:	f7fd fbcd 	bl	8000794 <__aeabi_ddiv>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4620      	mov	r0, r4
 8003000:	4629      	mov	r1, r5
 8003002:	f7fd fa9d 	bl	8000540 <__aeabi_dmul>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4610      	mov	r0, r2
 800300c:	4619      	mov	r1, r3
 800300e:	f7fd fca9 	bl	8000964 <__aeabi_d2uiz>
 8003012:	4603      	mov	r3, r0
 8003014:	60fb      	str	r3, [r7, #12]
  
  /* Build the array of registers values for the analog part */
  anaRadioRegArray[0] = (uint8_t)(((synthWord>>21)&(0x0000001F))|(wcp<<5));
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	0d5b      	lsrs	r3, r3, #21
 800301a:	b2db      	uxtb	r3, r3
 800301c:	f003 031f 	and.w	r3, r3, #31
 8003020:	b2da      	uxtb	r2, r3
 8003022:	7cbb      	ldrb	r3, [r7, #18]
 8003024:	015b      	lsls	r3, r3, #5
 8003026:	b2db      	uxtb	r3, r3
 8003028:	4313      	orrs	r3, r2
 800302a:	b2db      	uxtb	r3, r3
 800302c:	723b      	strb	r3, [r7, #8]
  anaRadioRegArray[1] = (uint8_t)((synthWord>>13)&(0x000000FF));
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	0b5b      	lsrs	r3, r3, #13
 8003032:	b2db      	uxtb	r3, r3
 8003034:	727b      	strb	r3, [r7, #9]
  anaRadioRegArray[2] = (uint8_t)((synthWord>>5)&(0x000000FF));
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	095b      	lsrs	r3, r3, #5
 800303a:	b2db      	uxtb	r3, r3
 800303c:	72bb      	strb	r3, [r7, #10]
  anaRadioRegArray[3] = (uint8_t)(((synthWord&0x0000001F)<<3)| s_vectcBandRegValue[band]);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	b2db      	uxtb	r3, r3
 8003042:	00db      	lsls	r3, r3, #3
 8003044:	b2da      	uxtb	r2, r3
 8003046:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800304a:	491f      	ldr	r1, [pc, #124]	; (80030c8 <SpiritRadioSetFrequencyBase+0x230>)
 800304c:	5ccb      	ldrb	r3, [r1, r3]
 800304e:	4313      	orrs	r3, r2
 8003050:	b2db      	uxtb	r3, r3
 8003052:	72fb      	strb	r3, [r7, #11]
  
  /* Configures the needed Analog Radio registers */
  g_xStatus = SpiritSpiWriteRegisters(SYNT3_BASE, 4, anaRadioRegArray);
 8003054:	f107 0308 	add.w	r3, r7, #8
 8003058:	461a      	mov	r2, r3
 800305a:	2104      	movs	r1, #4
 800305c:	2008      	movs	r0, #8
 800305e:	f000 ff57 	bl	8003f10 <RadioSpiWriteRegisters>
 8003062:	4602      	mov	r2, r0
 8003064:	4b19      	ldr	r3, [pc, #100]	; (80030cc <SpiritRadioSetFrequencyBase+0x234>)
 8003066:	b212      	sxth	r2, r2
 8003068:	4611      	mov	r1, r2
 800306a:	7019      	strb	r1, [r3, #0]
 800306c:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003070:	705a      	strb	r2, [r3, #1]
  
  if(xDoVcoCalibrationWA==S_ENABLE)
 8003072:	4b17      	ldr	r3, [pc, #92]	; (80030d0 <SpiritRadioSetFrequencyBase+0x238>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d103      	bne.n	8003082 <SpiritRadioSetFrequencyBase+0x1ea>
    return SpiritManagementWaVcoCalibration();
 800307a:	f7ff f84b 	bl	8002114 <SpiritManagementWaVcoCalibration>
 800307e:	4603      	mov	r3, r0
 8003080:	e000      	b.n	8003084 <SpiritRadioSetFrequencyBase+0x1ec>
  
  return 0;
 8003082:	2300      	movs	r3, #0
}
 8003084:	4618      	mov	r0, r3
 8003086:	3728      	adds	r7, #40	; 0x28
 8003088:	46bd      	mov	sp, r7
 800308a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800308e:	bf00      	nop
 8003090:	2e5f5680 	.word	0x2e5f5680
 8003094:	390c2fe0 	.word	0x390c2fe0
 8003098:	1701e47f 	.word	0x1701e47f
 800309c:	1c146a60 	.word	0x1c146a60
 80030a0:	11d260bf 	.word	0x11d260bf
 80030a4:	14ced7e0 	.word	0x14ced7e0
 80030a8:	08e18f3f 	.word	0x08e18f3f
 80030ac:	0a6fd060 	.word	0x0a6fd060
 80030b0:	099cf4e1 	.word	0x099cf4e1
 80030b4:	1339e9c3 	.word	0x1339e9c3
 80030b8:	19a28d05 	.word	0x19a28d05
 80030bc:	33451a0a 	.word	0x33451a0a
 80030c0:	080070bc 	.word	0x080070bc
 80030c4:	20000124 	.word	0x20000124
 80030c8:	080070c0 	.word	0x080070c0
 80030cc:	20000128 	.word	0x20000128
 80030d0:	20000005 	.word	0x20000005

080030d4 <SpiritRadioGetFrequencyBase>:
* @brief  Returns the base carrier frequency.
* @param  None.
* @retval uint32_t Base carrier frequency expressed in Hz as unsigned word.
*/
uint32_t SpiritRadioGetFrequencyBase(void)
{
 80030d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
  uint32_t synthWord;
  BandSelect band;
  
  /* Reads the synth word */
  synthWord = SpiritRadioGetSynthWord();
 80030dc:	f7ff fe0c 	bl	8002cf8 <SpiritRadioGetSynthWord>
 80030e0:	6078      	str	r0, [r7, #4]
  
  /* Reads the operating band */
  band = SpiritRadioGetBand();
 80030e2:	f7ff fe2f 	bl	8002d44 <SpiritRadioGetBand>
 80030e6:	4603      	mov	r3, r0
 80030e8:	70fb      	strb	r3, [r7, #3]
  
  uint8_t cRefDiv = (uint8_t)SpiritRadioGetRefDiv() + 1;
 80030ea:	f000 fc7d 	bl	80039e8 <SpiritRadioGetRefDiv>
 80030ee:	4603      	mov	r3, r0
 80030f0:	3301      	adds	r3, #1
 80030f2:	70bb      	strb	r3, [r7, #2]
  
  /* Calculates the frequency base and return it */
  return (uint32_t)round(synthWord*(((double)s_lXtalFrequency)/(FBASE_DIVIDER*cRefDiv*s_vectcBHalfFactor[band])));
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f7fd f9a9 	bl	800044c <__aeabi_ui2d>
 80030fa:	4604      	mov	r4, r0
 80030fc:	460d      	mov	r5, r1
 80030fe:	4b17      	ldr	r3, [pc, #92]	; (800315c <SpiritRadioGetFrequencyBase+0x88>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4618      	mov	r0, r3
 8003104:	f7fd f9a2 	bl	800044c <__aeabi_ui2d>
 8003108:	4680      	mov	r8, r0
 800310a:	4689      	mov	r9, r1
 800310c:	78bb      	ldrb	r3, [r7, #2]
 800310e:	78fa      	ldrb	r2, [r7, #3]
 8003110:	4913      	ldr	r1, [pc, #76]	; (8003160 <SpiritRadioGetFrequencyBase+0x8c>)
 8003112:	5c8a      	ldrb	r2, [r1, r2]
 8003114:	fb02 f303 	mul.w	r3, r2, r3
 8003118:	049b      	lsls	r3, r3, #18
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd f9a6 	bl	800046c <__aeabi_i2d>
 8003120:	4602      	mov	r2, r0
 8003122:	460b      	mov	r3, r1
 8003124:	4640      	mov	r0, r8
 8003126:	4649      	mov	r1, r9
 8003128:	f7fd fb34 	bl	8000794 <__aeabi_ddiv>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4620      	mov	r0, r4
 8003132:	4629      	mov	r1, r5
 8003134:	f7fd fa04 	bl	8000540 <__aeabi_dmul>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	f003 ff14 	bl	8006f6c <round>
 8003144:	4602      	mov	r2, r0
 8003146:	460b      	mov	r3, r1
 8003148:	4610      	mov	r0, r2
 800314a:	4619      	mov	r1, r3
 800314c:	f7fd fc0a 	bl	8000964 <__aeabi_d2uiz>
 8003150:	4603      	mov	r3, r0
}
 8003152:	4618      	mov	r0, r3
 8003154:	3708      	adds	r7, #8
 8003156:	46bd      	mov	sp, r7
 8003158:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800315c:	20000124 	.word	0x20000124
 8003160:	080070bc 	.word	0x080070bc

08003164 <SpiritRadioSearchDatarateME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchDatarateME(uint32_t lDatarate, uint8_t* pcM, uint8_t* pcE)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b088      	sub	sp, #32
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  volatile SpiritBool find = S_FALSE;
 8003170:	2300      	movs	r3, #0
 8003172:	763b      	strb	r3, [r7, #24]
  int8_t i=15;
 8003174:	230f      	movs	r3, #15
 8003176:	77fb      	strb	r3, [r7, #31]
  uint8_t cMantissaTmp;
  uint8_t cDivider = 0;
 8003178:	2300      	movs	r3, #0
 800317a:	76bb      	strb	r3, [r7, #26]
  
  /* Check the parameters */
  s_assert_param(IS_DATARATE(lDatarate));
  
  cDivider = (uint8_t)SpiritRadioGetDigDiv();
 800317c:	f000 fc86 	bl	8003a8c <SpiritRadioGetDigDiv>
 8003180:	4603      	mov	r3, r0
 8003182:	76bb      	strb	r3, [r7, #26]
  
  /* Search in the datarate array the exponent value */
  while(!find && i>=0)
 8003184:	e015      	b.n	80031b2 <SpiritRadioSearchDatarateME+0x4e>
  {
    if(lDatarate>=(s_lXtalFrequency>>(20-i+cDivider)))
 8003186:	4b4f      	ldr	r3, [pc, #316]	; (80032c4 <SpiritRadioSearchDatarateME+0x160>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800318e:	f1c3 0114 	rsb	r1, r3, #20
 8003192:	7ebb      	ldrb	r3, [r7, #26]
 8003194:	440b      	add	r3, r1
 8003196:	fa22 f303 	lsr.w	r3, r2, r3
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	429a      	cmp	r2, r3
 800319e:	d302      	bcc.n	80031a6 <SpiritRadioSearchDatarateME+0x42>
    {
      find = S_TRUE;
 80031a0:	2301      	movs	r3, #1
 80031a2:	763b      	strb	r3, [r7, #24]
 80031a4:	e005      	b.n	80031b2 <SpiritRadioSearchDatarateME+0x4e>
    }
    else
    {
      i--;
 80031a6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031aa:	b2db      	uxtb	r3, r3
 80031ac:	3b01      	subs	r3, #1
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	77fb      	strb	r3, [r7, #31]
  while(!find && i>=0)
 80031b2:	7e3b      	ldrb	r3, [r7, #24]
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d103      	bne.n	80031c2 <SpiritRadioSearchDatarateME+0x5e>
 80031ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	dae1      	bge.n	8003186 <SpiritRadioSearchDatarateME+0x22>
    }
  }
  i<0 ? i=0 : i;
 80031c2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	da01      	bge.n	80031ce <SpiritRadioSearchDatarateME+0x6a>
 80031ca:	2300      	movs	r3, #0
 80031cc:	77fb      	strb	r3, [r7, #31]
  *pcE = i;
 80031ce:	7ffa      	ldrb	r2, [r7, #31]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	701a      	strb	r2, [r3, #0]
  
  /* Calculates the mantissa value according to the datarate formula */
  cMantissaTmp = (lDatarate*((uint32_t)1<<(23-i)))/(s_lXtalFrequency>>(5+cDivider))-256;
 80031d4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80031d8:	f1c3 0317 	rsb	r3, r3, #23
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	409a      	lsls	r2, r3
 80031e0:	4b38      	ldr	r3, [pc, #224]	; (80032c4 <SpiritRadioSearchDatarateME+0x160>)
 80031e2:	6819      	ldr	r1, [r3, #0]
 80031e4:	7ebb      	ldrb	r3, [r7, #26]
 80031e6:	3305      	adds	r3, #5
 80031e8:	fa21 f303 	lsr.w	r3, r1, r3
 80031ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f0:	767b      	strb	r3, [r7, #25]
  
  /* Finds the mantissa value with less approximation */
  int16_t mantissaCalculation[3];
  for(uint8_t j=0;j<3;j++)
 80031f2:	2300      	movs	r3, #0
 80031f4:	77bb      	strb	r3, [r7, #30]
 80031f6:	e031      	b.n	800325c <SpiritRadioSearchDatarateME+0xf8>
  {
    if((cMantissaTmp+j-1))
 80031f8:	7e7a      	ldrb	r2, [r7, #25]
 80031fa:	7fbb      	ldrb	r3, [r7, #30]
 80031fc:	4413      	add	r3, r2
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d021      	beq.n	8003246 <SpiritRadioSearchDatarateME+0xe2>
    {
      mantissaCalculation[j]=lDatarate-(((256+cMantissaTmp+j-1)*(s_lXtalFrequency>>(5+cDivider)))>>(23-i));
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	b29a      	uxth	r2, r3
 8003206:	7e7b      	ldrb	r3, [r7, #25]
 8003208:	f503 7180 	add.w	r1, r3, #256	; 0x100
 800320c:	7fbb      	ldrb	r3, [r7, #30]
 800320e:	440b      	add	r3, r1
 8003210:	3b01      	subs	r3, #1
 8003212:	4618      	mov	r0, r3
 8003214:	4b2b      	ldr	r3, [pc, #172]	; (80032c4 <SpiritRadioSearchDatarateME+0x160>)
 8003216:	6819      	ldr	r1, [r3, #0]
 8003218:	7ebb      	ldrb	r3, [r7, #26]
 800321a:	3305      	adds	r3, #5
 800321c:	fa21 f303 	lsr.w	r3, r1, r3
 8003220:	fb03 f100 	mul.w	r1, r3, r0
 8003224:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003228:	f1c3 0317 	rsb	r3, r3, #23
 800322c:	fa21 f303 	lsr.w	r3, r1, r3
 8003230:	b29b      	uxth	r3, r3
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	b29a      	uxth	r2, r3
 8003236:	7fbb      	ldrb	r3, [r7, #30]
 8003238:	b212      	sxth	r2, r2
 800323a:	005b      	lsls	r3, r3, #1
 800323c:	3320      	adds	r3, #32
 800323e:	443b      	add	r3, r7
 8003240:	f823 2c10 	strh.w	r2, [r3, #-16]
 8003244:	e007      	b.n	8003256 <SpiritRadioSearchDatarateME+0xf2>
    }
    else
    {
      mantissaCalculation[j]=0x7FFF;
 8003246:	7fbb      	ldrb	r3, [r7, #30]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	3320      	adds	r3, #32
 800324c:	443b      	add	r3, r7
 800324e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8003252:	f823 2c10 	strh.w	r2, [r3, #-16]
  for(uint8_t j=0;j<3;j++)
 8003256:	7fbb      	ldrb	r3, [r7, #30]
 8003258:	3301      	adds	r3, #1
 800325a:	77bb      	strb	r3, [r7, #30]
 800325c:	7fbb      	ldrb	r3, [r7, #30]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d9ca      	bls.n	80031f8 <SpiritRadioSearchDatarateME+0x94>
    }
  }
  uint16_t mantissaCalculationDelta = 0xFFFF;
 8003262:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003266:	83bb      	strh	r3, [r7, #28]
  for(uint8_t j=0;j<3;j++)
 8003268:	2300      	movs	r3, #0
 800326a:	76fb      	strb	r3, [r7, #27]
 800326c:	e021      	b.n	80032b2 <SpiritRadioSearchDatarateME+0x14e>
  {
    if(S_ABS(mantissaCalculation[j])<mantissaCalculationDelta)
 800326e:	7efb      	ldrb	r3, [r7, #27]
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	3320      	adds	r3, #32
 8003274:	443b      	add	r3, r7
 8003276:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 800327a:	2b00      	cmp	r3, #0
 800327c:	bfb8      	it	lt
 800327e:	425b      	neglt	r3, r3
 8003280:	b29b      	uxth	r3, r3
 8003282:	8bba      	ldrh	r2, [r7, #28]
 8003284:	429a      	cmp	r2, r3
 8003286:	d911      	bls.n	80032ac <SpiritRadioSearchDatarateME+0x148>
    {
      mantissaCalculationDelta = S_ABS(mantissaCalculation[j]);
 8003288:	7efb      	ldrb	r3, [r7, #27]
 800328a:	005b      	lsls	r3, r3, #1
 800328c:	3320      	adds	r3, #32
 800328e:	443b      	add	r3, r7
 8003290:	f933 3c10 	ldrsh.w	r3, [r3, #-16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	bfb8      	it	lt
 8003298:	425b      	neglt	r3, r3
 800329a:	83bb      	strh	r3, [r7, #28]
      *pcM = cMantissaTmp+j-1;
 800329c:	7e7a      	ldrb	r2, [r7, #25]
 800329e:	7efb      	ldrb	r3, [r7, #27]
 80032a0:	4413      	add	r3, r2
 80032a2:	b2db      	uxtb	r3, r3
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	701a      	strb	r2, [r3, #0]
  for(uint8_t j=0;j<3;j++)
 80032ac:	7efb      	ldrb	r3, [r7, #27]
 80032ae:	3301      	adds	r3, #1
 80032b0:	76fb      	strb	r3, [r7, #27]
 80032b2:	7efb      	ldrb	r3, [r7, #27]
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d9da      	bls.n	800326e <SpiritRadioSearchDatarateME+0x10a>
    }
  }
  
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	3720      	adds	r7, #32
 80032be:	46bd      	mov	sp, r7
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	bf00      	nop
 80032c4:	20000124 	.word	0x20000124

080032c8 <SpiritRadioSearchChannelBwME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchChannelBwME(uint32_t lBandwidth, uint8_t* pcM, uint8_t* pcE)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	607a      	str	r2, [r7, #4]
  int8_t i, i_tmp;
  uint8_t cDivider = 1;
 80032d4:	2301      	movs	r3, #1
 80032d6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  
    /* Search in the channel filter bandwidth table the exponent value */
  if(SpiritRadioGetDigDiv())
 80032da:	f000 fbd7 	bl	8003a8c <SpiritRadioGetDigDiv>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d003      	beq.n	80032ec <SpiritRadioSearchChannelBwME+0x24>
  {
    cDivider = 2;
 80032e4:	2302      	movs	r3, #2
 80032e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80032ea:	e002      	b.n	80032f2 <SpiritRadioSearchChannelBwME+0x2a>
  }
  else
  {
    cDivider = 1;
 80032ec:	2301      	movs	r3, #1
 80032ee:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  }
    
  s_assert_param(IS_CH_BW(lBandwidth,s_lXtalFrequency/cDivider));
  
  uint32_t lChfltFactor = (s_lXtalFrequency/cDivider)/100;
 80032f2:	4b63      	ldr	r3, [pc, #396]	; (8003480 <SpiritRadioSearchChannelBwME+0x1b8>)
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80032fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80032fe:	4a61      	ldr	r2, [pc, #388]	; (8003484 <SpiritRadioSearchChannelBwME+0x1bc>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	095b      	lsrs	r3, r3, #5
 8003306:	61fb      	str	r3, [r7, #28]
  
  for(i=0;i<90 && (lBandwidth<(uint32_t)((s_vectnBandwidth26M[i]*lChfltFactor)/2600));i++);
 8003308:	2300      	movs	r3, #0
 800330a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800330e:	e006      	b.n	800331e <SpiritRadioSearchChannelBwME+0x56>
 8003310:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003314:	b2db      	uxtb	r3, r3
 8003316:	3301      	adds	r3, #1
 8003318:	b2db      	uxtb	r3, r3
 800331a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800331e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003322:	2b59      	cmp	r3, #89	; 0x59
 8003324:	dc0f      	bgt.n	8003346 <SpiritRadioSearchChannelBwME+0x7e>
 8003326:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800332a:	4a57      	ldr	r2, [pc, #348]	; (8003488 <SpiritRadioSearchChannelBwME+0x1c0>)
 800332c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003330:	461a      	mov	r2, r3
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fb02 f303 	mul.w	r3, r2, r3
 8003338:	4a54      	ldr	r2, [pc, #336]	; (800348c <SpiritRadioSearchChannelBwME+0x1c4>)
 800333a:	fba2 2303 	umull	r2, r3, r2, r3
 800333e:	0adb      	lsrs	r3, r3, #11
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	429a      	cmp	r2, r3
 8003344:	d3e4      	bcc.n	8003310 <SpiritRadioSearchChannelBwME+0x48>
  
  if(i!=0)
 8003346:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800334a:	2b00      	cmp	r3, #0
 800334c:	d077      	beq.n	800343e <SpiritRadioSearchChannelBwME+0x176>
  {
    /* Finds the mantissa value with less approximation */
    i_tmp=i;
 800334e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003352:	76fb      	strb	r3, [r7, #27]
    int16_t chfltCalculation[3];
    for(uint8_t j=0;j<3;j++) 
 8003354:	2300      	movs	r3, #0
 8003356:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800335a:	e03a      	b.n	80033d2 <SpiritRadioSearchChannelBwME+0x10a>
    {
      if(((i_tmp+j-1)>=0) || ((i_tmp+j-1)<=89))
 800335c:	f997 201b 	ldrsb.w	r2, [r7, #27]
 8003360:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003364:	4413      	add	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	dc06      	bgt.n	8003378 <SpiritRadioSearchChannelBwME+0xb0>
 800336a:	f997 201b 	ldrsb.w	r2, [r7, #27]
 800336e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003372:	4413      	add	r3, r2
 8003374:	2b5a      	cmp	r3, #90	; 0x5a
 8003376:	dc1e      	bgt.n	80033b6 <SpiritRadioSearchChannelBwME+0xee>
      {
        chfltCalculation[j] = lBandwidth - (uint32_t)((s_vectnBandwidth26M[i_tmp+j-1]*lChfltFactor)/2600);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	b29a      	uxth	r2, r3
 800337c:	f997 101b 	ldrsb.w	r1, [r7, #27]
 8003380:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003384:	440b      	add	r3, r1
 8003386:	3b01      	subs	r3, #1
 8003388:	493f      	ldr	r1, [pc, #252]	; (8003488 <SpiritRadioSearchChannelBwME+0x1c0>)
 800338a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800338e:	4619      	mov	r1, r3
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	fb01 f303 	mul.w	r3, r1, r3
 8003396:	493d      	ldr	r1, [pc, #244]	; (800348c <SpiritRadioSearchChannelBwME+0x1c4>)
 8003398:	fba1 1303 	umull	r1, r3, r1, r3
 800339c:	0adb      	lsrs	r3, r3, #11
 800339e:	b29b      	uxth	r3, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033a8:	b212      	sxth	r2, r2
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	3328      	adds	r3, #40	; 0x28
 80033ae:	443b      	add	r3, r7
 80033b0:	f823 2c14 	strh.w	r2, [r3, #-20]
 80033b4:	e008      	b.n	80033c8 <SpiritRadioSearchChannelBwME+0x100>
      }
      else
      {
        chfltCalculation[j] = 0x7FFF;
 80033b6:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	3328      	adds	r3, #40	; 0x28
 80033be:	443b      	add	r3, r7
 80033c0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80033c4:	f823 2c14 	strh.w	r2, [r3, #-20]
    for(uint8_t j=0;j<3;j++) 
 80033c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033cc:	3301      	adds	r3, #1
 80033ce:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80033d2:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80033d6:	2b02      	cmp	r3, #2
 80033d8:	d9c0      	bls.n	800335c <SpiritRadioSearchChannelBwME+0x94>
      }
    }
    uint16_t chfltDelta = 0xFFFF;
 80033da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033de:	847b      	strh	r3, [r7, #34]	; 0x22
    
    for(uint8_t j=0;j<3;j++)
 80033e0:	2300      	movs	r3, #0
 80033e2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80033e6:	e026      	b.n	8003436 <SpiritRadioSearchChannelBwME+0x16e>
    {
      if(S_ABS(chfltCalculation[j])<chfltDelta)
 80033e8:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	3328      	adds	r3, #40	; 0x28
 80033f0:	443b      	add	r3, r7
 80033f2:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	bfb8      	it	lt
 80033fa:	425b      	neglt	r3, r3
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003400:	429a      	cmp	r2, r3
 8003402:	d913      	bls.n	800342c <SpiritRadioSearchChannelBwME+0x164>
      {
        chfltDelta = S_ABS(chfltCalculation[j]);
 8003404:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	3328      	adds	r3, #40	; 0x28
 800340c:	443b      	add	r3, r7
 800340e:	f933 3c14 	ldrsh.w	r3, [r3, #-20]
 8003412:	2b00      	cmp	r3, #0
 8003414:	bfb8      	it	lt
 8003416:	425b      	neglt	r3, r3
 8003418:	847b      	strh	r3, [r7, #34]	; 0x22
        i=i_tmp+j-1;
 800341a:	7efa      	ldrb	r2, [r7, #27]
 800341c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003420:	4413      	add	r3, r2
 8003422:	b2db      	uxtb	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b2db      	uxtb	r3, r3
 8003428:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    for(uint8_t j=0;j<3;j++)
 800342c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8003430:	3301      	adds	r3, #1
 8003432:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8003436:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800343a:	2b02      	cmp	r3, #2
 800343c:	d9d4      	bls.n	80033e8 <SpiritRadioSearchChannelBwME+0x120>
      }    
    }
  }
  (*pcE) = (uint8_t)(i/9);
 800343e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003442:	4a13      	ldr	r2, [pc, #76]	; (8003490 <SpiritRadioSearchChannelBwME+0x1c8>)
 8003444:	fb82 1203 	smull	r1, r2, r2, r3
 8003448:	1052      	asrs	r2, r2, #1
 800344a:	17db      	asrs	r3, r3, #31
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	b25b      	sxtb	r3, r3
 8003450:	b2da      	uxtb	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	701a      	strb	r2, [r3, #0]
  (*pcM) = (uint8_t)(i%9);
 8003456:	f997 2027 	ldrsb.w	r2, [r7, #39]	; 0x27
 800345a:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <SpiritRadioSearchChannelBwME+0x1c8>)
 800345c:	fb83 1302 	smull	r1, r3, r3, r2
 8003460:	1059      	asrs	r1, r3, #1
 8003462:	17d3      	asrs	r3, r2, #31
 8003464:	1ac9      	subs	r1, r1, r3
 8003466:	460b      	mov	r3, r1
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	440b      	add	r3, r1
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	b25b      	sxtb	r3, r3
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	701a      	strb	r2, [r3, #0]
  
}
 8003476:	bf00      	nop
 8003478:	3728      	adds	r7, #40	; 0x28
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop
 8003480:	20000124 	.word	0x20000124
 8003484:	51eb851f 	.word	0x51eb851f
 8003488:	080070c4 	.word	0x080070c4
 800348c:	c9a633fd 	.word	0xc9a633fd
 8003490:	38e38e39 	.word	0x38e38e39

08003494 <SpiritRadioSearchFreqDevME>:
* @param  pcM pointer to the returned mantissa value.
* @param  pcE pointer to the returned exponent value.
* @retval None.
*/
void SpiritRadioSearchFreqDevME(uint32_t lFDev, uint8_t* pcM, uint8_t* pcE)
{
 8003494:	b5b0      	push	{r4, r5, r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	607a      	str	r2, [r7, #4]
  uint8_t i;
  uint32_t a,bp,b=0;
 80034a0:	2300      	movs	r3, #0
 80034a2:	61fb      	str	r3, [r7, #28]
  float xtalDivtmp=(float)s_lXtalFrequency/(((uint32_t)1)<<18);
 80034a4:	4b55      	ldr	r3, [pc, #340]	; (80035fc <SpiritRadioSearchFreqDevME+0x168>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd fb31 	bl	8000b10 <__aeabi_ui2f>
 80034ae:	4603      	mov	r3, r0
 80034b0:	f04f 4191 	mov.w	r1, #1216348160	; 0x48800000
 80034b4:	4618      	mov	r0, r3
 80034b6:	f7fd fc37 	bl	8000d28 <__aeabi_fdiv>
 80034ba:	4603      	mov	r3, r0
 80034bc:	61bb      	str	r3, [r7, #24]
  
  /* Check the parameters */
  s_assert_param(IS_F_DEV(lFDev,s_lXtalFrequency));
  
  for(i=0;i<10;i++)
 80034be:	2300      	movs	r3, #0
 80034c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80034c4:	e02a      	b.n	800351c <SpiritRadioSearchFreqDevME+0x88>
  {
    a=(uint32_t)(xtalDivtmp*(uint32_t)(7.5*(1<<i)));
 80034c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80034ca:	2201      	movs	r2, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fc ffcb 	bl	800046c <__aeabi_i2d>
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	4b49      	ldr	r3, [pc, #292]	; (8003600 <SpiritRadioSearchFreqDevME+0x16c>)
 80034dc:	f7fd f830 	bl	8000540 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f7fd fa3c 	bl	8000964 <__aeabi_d2uiz>
 80034ec:	4603      	mov	r3, r0
 80034ee:	4618      	mov	r0, r3
 80034f0:	f7fd fb0e 	bl	8000b10 <__aeabi_ui2f>
 80034f4:	4603      	mov	r3, r0
 80034f6:	69b9      	ldr	r1, [r7, #24]
 80034f8:	4618      	mov	r0, r3
 80034fa:	f7fd fb61 	bl	8000bc0 <__aeabi_fmul>
 80034fe:	4603      	mov	r3, r0
 8003500:	4618      	mov	r0, r3
 8003502:	f7fd fd49 	bl	8000f98 <__aeabi_f2uiz>
 8003506:	4603      	mov	r3, r0
 8003508:	617b      	str	r3, [r7, #20]
    if(lFDev<a)
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	697b      	ldr	r3, [r7, #20]
 800350e:	429a      	cmp	r2, r3
 8003510:	d309      	bcc.n	8003526 <SpiritRadioSearchFreqDevME+0x92>
  for(i=0;i<10;i++)
 8003512:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003516:	3301      	adds	r3, #1
 8003518:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800351c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003520:	2b09      	cmp	r3, #9
 8003522:	d9d0      	bls.n	80034c6 <SpiritRadioSearchFreqDevME+0x32>
 8003524:	e000      	b.n	8003528 <SpiritRadioSearchFreqDevME+0x94>
      break;
 8003526:	bf00      	nop
  }
  (*pcE) = i;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800352e:	701a      	strb	r2, [r3, #0]
  
  for(i=0;i<8;i++)
 8003530:	2300      	movs	r3, #0
 8003532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003536:	e045      	b.n	80035c4 <SpiritRadioSearchFreqDevME+0x130>
  {
    bp=b;
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	623b      	str	r3, [r7, #32]
    b=(uint32_t)(xtalDivtmp*(uint32_t)((8.0+i)/2*(1<<(*pcE))));
 800353c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003540:	4618      	mov	r0, r3
 8003542:	f7fc ff93 	bl	800046c <__aeabi_i2d>
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	4b2e      	ldr	r3, [pc, #184]	; (8003604 <SpiritRadioSearchFreqDevME+0x170>)
 800354c:	f7fc fe42 	bl	80001d4 <__adddf3>
 8003550:	4602      	mov	r2, r0
 8003552:	460b      	mov	r3, r1
 8003554:	4610      	mov	r0, r2
 8003556:	4619      	mov	r1, r3
 8003558:	f04f 0200 	mov.w	r2, #0
 800355c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003560:	f7fd f918 	bl	8000794 <__aeabi_ddiv>
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4614      	mov	r4, r2
 800356a:	461d      	mov	r5, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	461a      	mov	r2, r3
 8003572:	2301      	movs	r3, #1
 8003574:	4093      	lsls	r3, r2
 8003576:	4618      	mov	r0, r3
 8003578:	f7fc ff78 	bl	800046c <__aeabi_i2d>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4620      	mov	r0, r4
 8003582:	4629      	mov	r1, r5
 8003584:	f7fc ffdc 	bl	8000540 <__aeabi_dmul>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4610      	mov	r0, r2
 800358e:	4619      	mov	r1, r3
 8003590:	f7fd f9e8 	bl	8000964 <__aeabi_d2uiz>
 8003594:	4603      	mov	r3, r0
 8003596:	4618      	mov	r0, r3
 8003598:	f7fd faba 	bl	8000b10 <__aeabi_ui2f>
 800359c:	4603      	mov	r3, r0
 800359e:	69b9      	ldr	r1, [r7, #24]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7fd fb0d 	bl	8000bc0 <__aeabi_fmul>
 80035a6:	4603      	mov	r3, r0
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7fd fcf5 	bl	8000f98 <__aeabi_f2uiz>
 80035ae:	4603      	mov	r3, r0
 80035b0:	61fb      	str	r3, [r7, #28]
    if(lFDev<b)
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d309      	bcc.n	80035ce <SpiritRadioSearchFreqDevME+0x13a>
  for(i=0;i<8;i++)
 80035ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035be:	3301      	adds	r3, #1
 80035c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80035c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035c8:	2b07      	cmp	r3, #7
 80035ca:	d9b5      	bls.n	8003538 <SpiritRadioSearchFreqDevME+0xa4>
 80035cc:	e000      	b.n	80035d0 <SpiritRadioSearchFreqDevME+0x13c>
      break;
 80035ce:	bf00      	nop
  }
  
  (*pcM)=i;
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80035d6:	701a      	strb	r2, [r3, #0]
  if((lFDev-bp)<(b-lFDev))
 80035d8:	68fa      	ldr	r2, [r7, #12]
 80035da:	6a3b      	ldr	r3, [r7, #32]
 80035dc:	1ad2      	subs	r2, r2, r3
 80035de:	69f9      	ldr	r1, [r7, #28]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	1acb      	subs	r3, r1, r3
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d205      	bcs.n	80035f4 <SpiritRadioSearchFreqDevME+0x160>
    (*pcM)--;
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	701a      	strb	r2, [r3, #0]
  
}
 80035f4:	bf00      	nop
 80035f6:	3728      	adds	r7, #40	; 0x28
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bdb0      	pop	{r4, r5, r7, pc}
 80035fc:	20000124 	.word	0x20000124
 8003600:	401e0000 	.word	0x401e0000
 8003604:	40200000 	.word	0x40200000

08003608 <SpiritRadioGetdBm2Reg>:
* @retval Register value as byte.
* @note The power interpolation curves used by this function have been extracted
*       by measurements done on the divisional evaluation boards.
*/
uint8_t SpiritRadioGetdBm2Reg(uint32_t lFBase, float fPowerdBm)
{
 8003608:	b590      	push	{r4, r7, lr}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]
  uint8_t i=0;
 8003612:	2300      	movs	r3, #0
 8003614:	73fb      	strb	r3, [r7, #15]
  uint8_t j=0;
 8003616:	2300      	movs	r3, #0
 8003618:	73bb      	strb	r3, [r7, #14]
  float fReg;
  
  if(IS_FREQUENCY_BAND_HIGH(lFBase))
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a74      	ldr	r2, [pc, #464]	; (80037f0 <SpiritRadioGetdBm2Reg+0x1e8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d30c      	bcc.n	800363c <SpiritRadioGetdBm2Reg+0x34>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a73      	ldr	r2, [pc, #460]	; (80037f4 <SpiritRadioGetdBm2Reg+0x1ec>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d808      	bhi.n	800363c <SpiritRadioGetdBm2Reg+0x34>
  {
    i=0;
 800362a:	2300      	movs	r3, #0
 800362c:	73fb      	strb	r3, [r7, #15]
    if(lFBase<900000000) i=1;// 868   
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a71      	ldr	r2, [pc, #452]	; (80037f8 <SpiritRadioGetdBm2Reg+0x1f0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d822      	bhi.n	800367c <SpiritRadioGetdBm2Reg+0x74>
 8003636:	2301      	movs	r3, #1
 8003638:	73fb      	strb	r3, [r7, #15]
 800363a:	e01f      	b.n	800367c <SpiritRadioGetdBm2Reg+0x74>
  }
  else if(IS_FREQUENCY_BAND_MIDDLE(lFBase))
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	4a6f      	ldr	r2, [pc, #444]	; (80037fc <SpiritRadioGetdBm2Reg+0x1f4>)
 8003640:	4293      	cmp	r3, r2
 8003642:	d906      	bls.n	8003652 <SpiritRadioGetdBm2Reg+0x4a>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	4a6e      	ldr	r2, [pc, #440]	; (8003800 <SpiritRadioGetdBm2Reg+0x1f8>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d802      	bhi.n	8003652 <SpiritRadioGetdBm2Reg+0x4a>
  {
    i=2;
 800364c:	2302      	movs	r3, #2
 800364e:	73fb      	strb	r3, [r7, #15]
 8003650:	e014      	b.n	800367c <SpiritRadioGetdBm2Reg+0x74>
  }
  else if(IS_FREQUENCY_BAND_LOW(lFBase))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a6b      	ldr	r2, [pc, #428]	; (8003804 <SpiritRadioGetdBm2Reg+0x1fc>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d906      	bls.n	8003668 <SpiritRadioGetdBm2Reg+0x60>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a6a      	ldr	r2, [pc, #424]	; (8003808 <SpiritRadioGetdBm2Reg+0x200>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d802      	bhi.n	8003668 <SpiritRadioGetdBm2Reg+0x60>
  {
    i=3;
 8003662:	2303      	movs	r3, #3
 8003664:	73fb      	strb	r3, [r7, #15]
 8003666:	e009      	b.n	800367c <SpiritRadioGetdBm2Reg+0x74>
  }
  else if(IS_FREQUENCY_BAND_VERY_LOW(lFBase))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a68      	ldr	r2, [pc, #416]	; (800380c <SpiritRadioGetdBm2Reg+0x204>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d905      	bls.n	800367c <SpiritRadioGetdBm2Reg+0x74>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a67      	ldr	r2, [pc, #412]	; (8003810 <SpiritRadioGetdBm2Reg+0x208>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d801      	bhi.n	800367c <SpiritRadioGetdBm2Reg+0x74>
  {
    i=4;
 8003678:	2304      	movs	r3, #4
 800367a:	73fb      	strb	r3, [r7, #15]
  }
  
  j=1;
 800367c:	2301      	movs	r3, #1
 800367e:	73bb      	strb	r3, [r7, #14]
  if(fPowerdBm>0 && 13.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]<fPowerdBm) /* #1035-D */
 8003680:	f04f 0100 	mov.w	r1, #0
 8003684:	6838      	ldr	r0, [r7, #0]
 8003686:	f7fd fc57 	bl	8000f38 <__aeabi_fcmpgt>
 800368a:	4603      	mov	r3, r0
 800368c:	2b00      	cmp	r3, #0
 800368e:	d033      	beq.n	80036f8 <SpiritRadioGetdBm2Reg+0xf0>
 8003690:	7bfa      	ldrb	r2, [r7, #15]
 8003692:	4960      	ldr	r1, [pc, #384]	; (8003814 <SpiritRadioGetdBm2Reg+0x20c>)
 8003694:	4613      	mov	r3, r2
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	4413      	add	r3, r2
 800369a:	00db      	lsls	r3, r3, #3
 800369c:	440b      	add	r3, r1
 800369e:	3308      	adds	r3, #8
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4619      	mov	r1, r3
 80036a4:	485c      	ldr	r0, [pc, #368]	; (8003818 <SpiritRadioGetdBm2Reg+0x210>)
 80036a6:	f7fd fb3f 	bl	8000d28 <__aeabi_fdiv>
 80036aa:	4603      	mov	r3, r0
 80036ac:	461c      	mov	r4, r3
 80036ae:	7bfa      	ldrb	r2, [r7, #15]
 80036b0:	4958      	ldr	r1, [pc, #352]	; (8003814 <SpiritRadioGetdBm2Reg+0x20c>)
 80036b2:	4613      	mov	r3, r2
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	4413      	add	r3, r2
 80036b8:	00db      	lsls	r3, r3, #3
 80036ba:	440b      	add	r3, r1
 80036bc:	330c      	adds	r3, #12
 80036be:	6818      	ldr	r0, [r3, #0]
 80036c0:	7bfa      	ldrb	r2, [r7, #15]
 80036c2:	4954      	ldr	r1, [pc, #336]	; (8003814 <SpiritRadioGetdBm2Reg+0x20c>)
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	00db      	lsls	r3, r3, #3
 80036cc:	440b      	add	r3, r1
 80036ce:	3308      	adds	r3, #8
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4619      	mov	r1, r3
 80036d4:	f7fd fb28 	bl	8000d28 <__aeabi_fdiv>
 80036d8:	4603      	mov	r3, r0
 80036da:	4619      	mov	r1, r3
 80036dc:	4620      	mov	r0, r4
 80036de:	f7fd f965 	bl	80009ac <__aeabi_fsub>
 80036e2:	4603      	mov	r3, r0
 80036e4:	4619      	mov	r1, r3
 80036e6:	6838      	ldr	r0, [r7, #0]
 80036e8:	f7fd fc26 	bl	8000f38 <__aeabi_fcmpgt>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <SpiritRadioGetdBm2Reg+0xf0>
      j=0;
 80036f2:	2300      	movs	r3, #0
 80036f4:	73bb      	strb	r3, [r7, #14]
 80036f6:	e03a      	b.n	800376e <SpiritRadioGetdBm2Reg+0x166>
  else if(fPowerdBm<=0 && 40.0f/fPowerFactors[i][2]-fPowerFactors[i][3]/fPowerFactors[i][2]>fPowerdBm) /* #1035-D */
 80036f8:	f04f 0100 	mov.w	r1, #0
 80036fc:	6838      	ldr	r0, [r7, #0]
 80036fe:	f7fd fc07 	bl	8000f10 <__aeabi_fcmple>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d032      	beq.n	800376e <SpiritRadioGetdBm2Reg+0x166>
 8003708:	7bfa      	ldrb	r2, [r7, #15]
 800370a:	4942      	ldr	r1, [pc, #264]	; (8003814 <SpiritRadioGetdBm2Reg+0x20c>)
 800370c:	4613      	mov	r3, r2
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	4413      	add	r3, r2
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	440b      	add	r3, r1
 8003716:	3308      	adds	r3, #8
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4619      	mov	r1, r3
 800371c:	483f      	ldr	r0, [pc, #252]	; (800381c <SpiritRadioGetdBm2Reg+0x214>)
 800371e:	f7fd fb03 	bl	8000d28 <__aeabi_fdiv>
 8003722:	4603      	mov	r3, r0
 8003724:	461c      	mov	r4, r3
 8003726:	7bfa      	ldrb	r2, [r7, #15]
 8003728:	493a      	ldr	r1, [pc, #232]	; (8003814 <SpiritRadioGetdBm2Reg+0x20c>)
 800372a:	4613      	mov	r3, r2
 800372c:	005b      	lsls	r3, r3, #1
 800372e:	4413      	add	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	440b      	add	r3, r1
 8003734:	330c      	adds	r3, #12
 8003736:	6818      	ldr	r0, [r3, #0]
 8003738:	7bfa      	ldrb	r2, [r7, #15]
 800373a:	4936      	ldr	r1, [pc, #216]	; (8003814 <SpiritRadioGetdBm2Reg+0x20c>)
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	00db      	lsls	r3, r3, #3
 8003744:	440b      	add	r3, r1
 8003746:	3308      	adds	r3, #8
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4619      	mov	r1, r3
 800374c:	f7fd faec 	bl	8000d28 <__aeabi_fdiv>
 8003750:	4603      	mov	r3, r0
 8003752:	4619      	mov	r1, r3
 8003754:	4620      	mov	r0, r4
 8003756:	f7fd f929 	bl	80009ac <__aeabi_fsub>
 800375a:	4603      	mov	r3, r0
 800375c:	4619      	mov	r1, r3
 800375e:	6838      	ldr	r0, [r7, #0]
 8003760:	f7fd fbcc 	bl	8000efc <__aeabi_fcmplt>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <SpiritRadioGetdBm2Reg+0x166>
      j=2;
 800376a:	2302      	movs	r3, #2
 800376c:	73bb      	strb	r3, [r7, #14]

  fReg=fPowerFactors[i][2*j]*fPowerdBm+fPowerFactors[i][2*j+1];
 800376e:	7bfa      	ldrb	r2, [r7, #15]
 8003770:	7bbb      	ldrb	r3, [r7, #14]
 8003772:	0059      	lsls	r1, r3, #1
 8003774:	4827      	ldr	r0, [pc, #156]	; (8003814 <SpiritRadioGetdBm2Reg+0x20c>)
 8003776:	4613      	mov	r3, r2
 8003778:	005b      	lsls	r3, r3, #1
 800377a:	4413      	add	r3, r2
 800377c:	005b      	lsls	r3, r3, #1
 800377e:	440b      	add	r3, r1
 8003780:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8003784:	6839      	ldr	r1, [r7, #0]
 8003786:	4618      	mov	r0, r3
 8003788:	f7fd fa1a 	bl	8000bc0 <__aeabi_fmul>
 800378c:	4603      	mov	r3, r0
 800378e:	461c      	mov	r4, r3
 8003790:	7bfa      	ldrb	r2, [r7, #15]
 8003792:	7bbb      	ldrb	r3, [r7, #14]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	1c59      	adds	r1, r3, #1
 8003798:	481e      	ldr	r0, [pc, #120]	; (8003814 <SpiritRadioGetdBm2Reg+0x20c>)
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	005b      	lsls	r3, r3, #1
 80037a2:	440b      	add	r3, r1
 80037a4:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80037a8:	4619      	mov	r1, r3
 80037aa:	4620      	mov	r0, r4
 80037ac:	f7fd f900 	bl	80009b0 <__addsf3>
 80037b0:	4603      	mov	r3, r0
 80037b2:	60bb      	str	r3, [r7, #8]
  
  if(fReg<1)
 80037b4:	f04f 517e 	mov.w	r1, #1065353216	; 0x3f800000
 80037b8:	68b8      	ldr	r0, [r7, #8]
 80037ba:	f7fd fb9f 	bl	8000efc <__aeabi_fcmplt>
 80037be:	4603      	mov	r3, r0
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d003      	beq.n	80037cc <SpiritRadioGetdBm2Reg+0x1c4>
    fReg=1;
 80037c4:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	e008      	b.n	80037de <SpiritRadioGetdBm2Reg+0x1d6>
  else if(fReg>90) 
 80037cc:	4914      	ldr	r1, [pc, #80]	; (8003820 <SpiritRadioGetdBm2Reg+0x218>)
 80037ce:	68b8      	ldr	r0, [r7, #8]
 80037d0:	f7fd fbb2 	bl	8000f38 <__aeabi_fcmpgt>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <SpiritRadioGetdBm2Reg+0x1d6>
    fReg=90;
 80037da:	4b11      	ldr	r3, [pc, #68]	; (8003820 <SpiritRadioGetdBm2Reg+0x218>)
 80037dc:	60bb      	str	r3, [r7, #8]
  
  return ((uint8_t)fReg);
 80037de:	68b8      	ldr	r0, [r7, #8]
 80037e0:	f7fd fbda 	bl	8000f98 <__aeabi_f2uiz>
 80037e4:	4603      	mov	r3, r0
 80037e6:	b2db      	uxtb	r3, r3
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	3714      	adds	r7, #20
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd90      	pop	{r4, r7, pc}
 80037f0:	2e5f5680 	.word	0x2e5f5680
 80037f4:	390c2fe0 	.word	0x390c2fe0
 80037f8:	35a4e8ff 	.word	0x35a4e8ff
 80037fc:	1701e47f 	.word	0x1701e47f
 8003800:	1c146a60 	.word	0x1c146a60
 8003804:	11d260bf 	.word	0x11d260bf
 8003808:	14ced7e0 	.word	0x14ced7e0
 800380c:	08e18f3f 	.word	0x08e18f3f
 8003810:	0a6fd060 	.word	0x0a6fd060
 8003814:	08007198 	.word	0x08007198
 8003818:	41500000 	.word	0x41500000
 800381c:	42200000 	.word	0x42200000
 8003820:	42b40000 	.word	0x42b40000

08003824 <SpiritRadioSetPALeveldBm>:
* @retval None.
* @note This function makes use of the @ref SpiritRadioGetdBm2Reg fcn to interpolate the 
*       power value.
*/
void SpiritRadioSetPALeveldBm(uint8_t cIndex, float fPowerdBm)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	4603      	mov	r3, r0
 800382c:	6039      	str	r1, [r7, #0]
 800382e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  s_assert_param(IS_PAPOWER_DBM(fPowerdBm));
  
  /* interpolate the power level */
  paLevelValue=SpiritRadioGetdBm2Reg(SpiritRadioGetFrequencyBase(),fPowerdBm);
 8003830:	f7ff fc50 	bl	80030d4 <SpiritRadioGetFrequencyBase>
 8003834:	4603      	mov	r3, r0
 8003836:	6839      	ldr	r1, [r7, #0]
 8003838:	4618      	mov	r0, r3
 800383a:	f7ff fee5 	bl	8003608 <SpiritRadioGetdBm2Reg>
 800383e:	4603      	mov	r3, r0
 8003840:	73bb      	strb	r3, [r7, #14]

  /* Sets the base address */
  address=PA_POWER8_BASE+7-cIndex;
 8003842:	79fb      	ldrb	r3, [r7, #7]
 8003844:	f1c3 0317 	rsb	r3, r3, #23
 8003848:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_LEVEL register */
  g_xStatus = SpiritSpiWriteRegisters(address, 1, &paLevelValue);
 800384a:	f107 020e 	add.w	r2, r7, #14
 800384e:	7bfb      	ldrb	r3, [r7, #15]
 8003850:	2101      	movs	r1, #1
 8003852:	4618      	mov	r0, r3
 8003854:	f000 fb5c 	bl	8003f10 <RadioSpiWriteRegisters>
 8003858:	4602      	mov	r2, r0
 800385a:	4b05      	ldr	r3, [pc, #20]	; (8003870 <SpiritRadioSetPALeveldBm+0x4c>)
 800385c:	b212      	sxth	r2, r2
 800385e:	4611      	mov	r1, r2
 8003860:	7019      	strb	r1, [r3, #0]
 8003862:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003866:	705a      	strb	r2, [r3, #1]
  
}
 8003868:	bf00      	nop
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}
 8003870:	20000128 	.word	0x20000128

08003874 <SpiritRadioSetPACwc>:
*         @arg LOAD_2_4_PF  2.4pF additional PA load capacitor
*         @arg LOAD_3_6_PF  3.6pF additional PA load capacitor
* @retval None.
*/
void SpiritRadioSetPACwc(PALoadCapacitor xCLoad)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	b084      	sub	sp, #16
 8003878:	af00      	add	r7, sp, #0
 800387a:	4603      	mov	r3, r0
 800387c:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_LOAD_CAP(xCLoad));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 800387e:	f107 030f 	add.w	r3, r7, #15
 8003882:	461a      	mov	r2, r3
 8003884:	2101      	movs	r1, #1
 8003886:	2018      	movs	r0, #24
 8003888:	f000 fb8e 	bl	8003fa8 <RadioSpiReadRegisters>
  
  /* Mask the CWC[1:0] field and write the new value */
  tempRegValue &= 0x3F;
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003892:	b2db      	uxtb	r3, r3
 8003894:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= xCLoad;
 8003896:	7bfa      	ldrb	r2, [r7, #15]
 8003898:	79fb      	ldrb	r3, [r7, #7]
 800389a:	4313      	orrs	r3, r2
 800389c:	b2db      	uxtb	r3, r3
 800389e:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80038a0:	f107 030f 	add.w	r3, r7, #15
 80038a4:	461a      	mov	r2, r3
 80038a6:	2101      	movs	r1, #1
 80038a8:	2018      	movs	r0, #24
 80038aa:	f000 fb31 	bl	8003f10 <RadioSpiWriteRegisters>
 80038ae:	4602      	mov	r2, r0
 80038b0:	4b05      	ldr	r3, [pc, #20]	; (80038c8 <SpiritRadioSetPACwc+0x54>)
 80038b2:	b212      	sxth	r2, r2
 80038b4:	4611      	mov	r1, r2
 80038b6:	7019      	strb	r1, [r3, #0]
 80038b8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80038bc:	705a      	strb	r2, [r3, #1]
  
}
 80038be:	bf00      	nop
 80038c0:	3710      	adds	r7, #16
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000128 	.word	0x20000128

080038cc <SpiritRadioSetPALevelMaxIndex>:
* @brief  Sets a specific PA_LEVEL_MAX_INDEX.
* @param  cIndex PA_LEVEL_MAX_INDEX to set. This parameter shall be in the range [0:7].
* @retval None
*/
void SpiritRadioSetPALevelMaxIndex(uint8_t cIndex)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	4603      	mov	r3, r0
 80038d4:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_PA_MAX_INDEX(cIndex));
  
  /* Reads the PA_POWER_0 register */
  SpiritSpiReadRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80038d6:	f107 030f 	add.w	r3, r7, #15
 80038da:	461a      	mov	r2, r3
 80038dc:	2101      	movs	r1, #1
 80038de:	2018      	movs	r0, #24
 80038e0:	f000 fb62 	bl	8003fa8 <RadioSpiReadRegisters>
  
  /* Mask the PA_LEVEL_MAX_INDEX[1:0] field and write the new value */
  tempRegValue &= 0xF8;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
 80038e6:	f023 0307 	bic.w	r3, r3, #7
 80038ea:	b2db      	uxtb	r3, r3
 80038ec:	73fb      	strb	r3, [r7, #15]
  tempRegValue |= cIndex;
 80038ee:	7bfa      	ldrb	r2, [r7, #15]
 80038f0:	79fb      	ldrb	r3, [r7, #7]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	73fb      	strb	r3, [r7, #15]
  
  /* Configures the PA_POWER_0 register */
  g_xStatus = SpiritSpiWriteRegisters(PA_POWER0_BASE, 1, &tempRegValue);
 80038f8:	f107 030f 	add.w	r3, r7, #15
 80038fc:	461a      	mov	r2, r3
 80038fe:	2101      	movs	r1, #1
 8003900:	2018      	movs	r0, #24
 8003902:	f000 fb05 	bl	8003f10 <RadioSpiWriteRegisters>
 8003906:	4602      	mov	r2, r0
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <SpiritRadioSetPALevelMaxIndex+0x54>)
 800390a:	b212      	sxth	r2, r2
 800390c:	4611      	mov	r1, r2
 800390e:	7019      	strb	r1, [r3, #0]
 8003910:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003914:	705a      	strb	r2, [r3, #1]
  
}
 8003916:	bf00      	nop
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}
 800391e:	bf00      	nop
 8003920:	20000128 	.word	0x20000128

08003924 <SpiritRadioAFCFreezeOnSync>:
* @param  xNewState new state for AFC freeze on sync word detection.
*         This parameter can be: S_ENABLE or S_DISABLE.
* @retval None.
*/
void SpiritRadioAFCFreezeOnSync(SpiritFunctionalState xNewState)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b084      	sub	sp, #16
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
  uint8_t tempRegValue = 0x00;
 800392e:	2300      	movs	r3, #0
 8003930:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the AFC_2 register and configure the AFC Freeze on Sync field */
  SpiritSpiReadRegisters(AFC2_BASE, 1, &tempRegValue);
 8003932:	f107 030f 	add.w	r3, r7, #15
 8003936:	461a      	mov	r2, r3
 8003938:	2101      	movs	r1, #1
 800393a:	201e      	movs	r0, #30
 800393c:	f000 fb34 	bl	8003fa8 <RadioSpiReadRegisters>
  if(xNewState == S_ENABLE)
 8003940:	79fb      	ldrb	r3, [r7, #7]
 8003942:	2b01      	cmp	r3, #1
 8003944:	d105      	bne.n	8003952 <SpiritRadioAFCFreezeOnSync+0x2e>
  {
    tempRegValue |= AFC2_AFC_FREEZE_ON_SYNC_MASK;
 8003946:	7bfb      	ldrb	r3, [r7, #15]
 8003948:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800394c:	b2db      	uxtb	r3, r3
 800394e:	73fb      	strb	r3, [r7, #15]
 8003950:	e004      	b.n	800395c <SpiritRadioAFCFreezeOnSync+0x38>
  }
  else
  {
    tempRegValue &= (~AFC2_AFC_FREEZE_ON_SYNC_MASK);
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003958:	b2db      	uxtb	r3, r3
 800395a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Sets the AFC_2 register */
  g_xStatus = SpiritSpiWriteRegisters(AFC2_BASE, 1, &tempRegValue);
 800395c:	f107 030f 	add.w	r3, r7, #15
 8003960:	461a      	mov	r2, r3
 8003962:	2101      	movs	r1, #1
 8003964:	201e      	movs	r0, #30
 8003966:	f000 fad3 	bl	8003f10 <RadioSpiWriteRegisters>
 800396a:	4602      	mov	r2, r0
 800396c:	4b05      	ldr	r3, [pc, #20]	; (8003984 <SpiritRadioAFCFreezeOnSync+0x60>)
 800396e:	b212      	sxth	r2, r2
 8003970:	4611      	mov	r1, r2
 8003972:	7019      	strb	r1, [r3, #0]
 8003974:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003978:	705a      	strb	r2, [r3, #1]
  
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
 8003982:	bf00      	nop
 8003984:	20000128 	.word	0x20000128

08003988 <SpiritRadioSetRefDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetRefDiv(SpiritFunctionalState xNewState)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b084      	sub	sp, #16
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the SYNTH_CONFIG1_BASE and mask the REFDIV bit field */
  SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 8003992:	f107 030f 	add.w	r3, r7, #15
 8003996:	461a      	mov	r2, r3
 8003998:	2101      	movs	r1, #1
 800399a:	209e      	movs	r0, #158	; 0x9e
 800399c:	f000 fb04 	bl	8003fa8 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 80039a0:	79fb      	ldrb	r3, [r7, #7]
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d105      	bne.n	80039b2 <SpiritRadioSetRefDiv+0x2a>
  {
    tempRegValue |= 0x80;
 80039a6:	7bfb      	ldrb	r3, [r7, #15]
 80039a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	73fb      	strb	r3, [r7, #15]
 80039b0:	e004      	b.n	80039bc <SpiritRadioSetRefDiv+0x34>
  }
  else
  {
    tempRegValue &= 0x7F;
 80039b2:	7bfb      	ldrb	r3, [r7, #15]
 80039b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the SYNTH_CONFIG1_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80039bc:	f107 030f 	add.w	r3, r7, #15
 80039c0:	461a      	mov	r2, r3
 80039c2:	2101      	movs	r1, #1
 80039c4:	209e      	movs	r0, #158	; 0x9e
 80039c6:	f000 faa3 	bl	8003f10 <RadioSpiWriteRegisters>
 80039ca:	4602      	mov	r2, r0
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <SpiritRadioSetRefDiv+0x5c>)
 80039ce:	b212      	sxth	r2, r2
 80039d0:	4611      	mov	r1, r2
 80039d2:	7019      	strb	r1, [r3, #0]
 80039d4:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80039d8:	705a      	strb	r2, [r3, #1]
  
}
 80039da:	bf00      	nop
 80039dc:	3710      	adds	r7, #16
 80039de:	46bd      	mov	sp, r7
 80039e0:	bd80      	pop	{r7, pc}
 80039e2:	bf00      	nop
 80039e4:	20000128 	.word	0x20000128

080039e8 <SpiritRadioGetRefDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetRefDiv(void)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b082      	sub	sp, #8
 80039ec:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(SYNTH_CONFIG1_BASE, 1, &tempRegValue);
 80039ee:	1dfb      	adds	r3, r7, #7
 80039f0:	461a      	mov	r2, r3
 80039f2:	2101      	movs	r1, #1
 80039f4:	209e      	movs	r0, #158	; 0x9e
 80039f6:	f000 fad7 	bl	8003fa8 <RadioSpiReadRegisters>
 80039fa:	4602      	mov	r2, r0
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <SpiritRadioGetRefDiv+0x40>)
 80039fe:	b212      	sxth	r2, r2
 8003a00:	4611      	mov	r1, r2
 8003a02:	7019      	strb	r1, [r3, #0]
 8003a04:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a08:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>7)&0x1))
 8003a0a:	79fb      	ldrb	r3, [r7, #7]
 8003a0c:	09db      	lsrs	r3, r3, #7
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d001      	beq.n	8003a1c <SpiritRadioGetRefDiv+0x34>
  {
    return S_ENABLE;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e000      	b.n	8003a1e <SpiritRadioGetRefDiv+0x36>
  }
  else
  {
    return S_DISABLE;
 8003a1c:	2300      	movs	r3, #0
  }
  
}
 8003a1e:	4618      	mov	r0, r3
 8003a20:	3708      	adds	r7, #8
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000128 	.word	0x20000128

08003a2c <SpiritRadioSetDigDiv>:
* @param  xNewState new state for synthesizer reference divider.
*         This parameter can be: S_ENABLE or S_DISABLE .
* @retval None.
*/
void SpiritRadioSetDigDiv(SpiritFunctionalState xNewState)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b084      	sub	sp, #16
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	4603      	mov	r3, r0
 8003a34:	71fb      	strb	r3, [r7, #7]
  
  /* Check the parameters */
  s_assert_param(IS_SPIRIT_FUNCTIONAL_STATE(xNewState));
  
  /* Reads the XO_RCO_TEST_BASE and mask the PD_CLKDIV bit field */
  SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003a36:	f107 030f 	add.w	r3, r7, #15
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	20b4      	movs	r0, #180	; 0xb4
 8003a40:	f000 fab2 	bl	8003fa8 <RadioSpiReadRegisters>
  
  if(xNewState == S_ENABLE)
 8003a44:	79fb      	ldrb	r3, [r7, #7]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <SpiritRadioSetDigDiv+0x2a>
  {
    tempRegValue &= 0xf7;
 8003a4a:	7bfb      	ldrb	r3, [r7, #15]
 8003a4c:	f023 0308 	bic.w	r3, r3, #8
 8003a50:	b2db      	uxtb	r3, r3
 8003a52:	73fb      	strb	r3, [r7, #15]
 8003a54:	e004      	b.n	8003a60 <SpiritRadioSetDigDiv+0x34>
  }
  else
  {
    
    tempRegValue |= 0x08;
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	f043 0308 	orr.w	r3, r3, #8
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Writes the new value in the XO_RCO_TEST_BASE register */
  g_xStatus = SpiritSpiWriteRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003a60:	f107 030f 	add.w	r3, r7, #15
 8003a64:	461a      	mov	r2, r3
 8003a66:	2101      	movs	r1, #1
 8003a68:	20b4      	movs	r0, #180	; 0xb4
 8003a6a:	f000 fa51 	bl	8003f10 <RadioSpiWriteRegisters>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	4b05      	ldr	r3, [pc, #20]	; (8003a88 <SpiritRadioSetDigDiv+0x5c>)
 8003a72:	b212      	sxth	r2, r2
 8003a74:	4611      	mov	r1, r2
 8003a76:	7019      	strb	r1, [r3, #0]
 8003a78:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003a7c:	705a      	strb	r2, [r3, #1]
  
}
 8003a7e:	bf00      	nop
 8003a80:	3710      	adds	r7, #16
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	20000128 	.word	0x20000128

08003a8c <SpiritRadioGetDigDiv>:
* @brief  Get the the synthesizer reference divider state.
* @param  void.
* @retval None.
*/
SpiritFunctionalState SpiritRadioGetDigDiv(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
  uint8_t tempRegValue;
  
  g_xStatus = SpiritSpiReadRegisters(XO_RCO_TEST_BASE, 1, &tempRegValue);
 8003a92:	1dfb      	adds	r3, r7, #7
 8003a94:	461a      	mov	r2, r3
 8003a96:	2101      	movs	r1, #1
 8003a98:	20b4      	movs	r0, #180	; 0xb4
 8003a9a:	f000 fa85 	bl	8003fa8 <RadioSpiReadRegisters>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	; (8003acc <SpiritRadioGetDigDiv+0x40>)
 8003aa2:	b212      	sxth	r2, r2
 8003aa4:	4611      	mov	r1, r2
 8003aa6:	7019      	strb	r1, [r3, #0]
 8003aa8:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003aac:	705a      	strb	r2, [r3, #1]
  
  if(((tempRegValue>>3)&0x1))
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	08db      	lsrs	r3, r3, #3
 8003ab2:	b2db      	uxtb	r3, r3
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <SpiritRadioGetDigDiv+0x34>
  {
    return S_DISABLE;
 8003abc:	2300      	movs	r3, #0
 8003abe:	e000      	b.n	8003ac2 <SpiritRadioGetDigDiv+0x36>
  }
  else
  {
    return S_ENABLE;
 8003ac0:	2301      	movs	r3, #1
  }
  
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3708      	adds	r7, #8
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	20000128 	.word	0x20000128

08003ad0 <SpiritRadioGetXtalFrequency>:
* @brief  Returns the XTAL frequency.
* @param  void.
* @retval uint32_t XTAL frequency.
*/
uint32_t SpiritRadioGetXtalFrequency(void)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	af00      	add	r7, sp, #0
  return s_lXtalFrequency; 
 8003ad4:	4b02      	ldr	r3, [pc, #8]	; (8003ae0 <SpiritRadioGetXtalFrequency+0x10>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bc80      	pop	{r7}
 8003ade:	4770      	bx	lr
 8003ae0:	20000124 	.word	0x20000124

08003ae4 <SpiritRadioSetXtalFrequency>:
* @brief  Sets the XTAL frequency.
* @param  uint32_t XTAL frequency.
* @retval void.
*/
void SpiritRadioSetXtalFrequency(uint32_t lXtalFrequency)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b083      	sub	sp, #12
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  s_lXtalFrequency = lXtalFrequency; 
 8003aec:	4a03      	ldr	r2, [pc, #12]	; (8003afc <SpiritRadioSetXtalFrequency+0x18>)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6013      	str	r3, [r2, #0]
}
 8003af2:	bf00      	nop
 8003af4:	370c      	adds	r7, #12
 8003af6:	46bd      	mov	sp, r7
 8003af8:	bc80      	pop	{r7}
 8003afa:	4770      	bx	lr
 8003afc:	20000124 	.word	0x20000124

08003b00 <SpiritTimerSetRxTimeoutMs>:
 *         This parameter must be a float.
 * @retval None
 */

void SpiritTimerSetRxTimeoutMs(float fDesiredMsec)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint8_t tempRegValue[2];

  /* Computes the counter and prescaler value */
  SpiritTimerComputeRxTimeoutValues(fDesiredMsec , &tempRegValue[1] , &tempRegValue[0]);
 8003b08:	f107 020c 	add.w	r2, r7, #12
 8003b0c:	f107 030c 	add.w	r3, r7, #12
 8003b10:	3301      	adds	r3, #1
 8003b12:	4619      	mov	r1, r3
 8003b14:	6878      	ldr	r0, [r7, #4]
 8003b16:	f000 f815 	bl	8003b44 <SpiritTimerComputeRxTimeoutValues>

  /* Writes the prescaler and counter value for RX timeout in the corresponding register */
  g_xStatus = SpiritSpiWriteRegisters(TIMERS5_RX_TIMEOUT_PRESCALER_BASE, 2, tempRegValue);
 8003b1a:	f107 030c 	add.w	r3, r7, #12
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2102      	movs	r1, #2
 8003b22:	2053      	movs	r0, #83	; 0x53
 8003b24:	f000 f9f4 	bl	8003f10 <RadioSpiWriteRegisters>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	4b05      	ldr	r3, [pc, #20]	; (8003b40 <SpiritTimerSetRxTimeoutMs+0x40>)
 8003b2c:	b212      	sxth	r2, r2
 8003b2e:	4611      	mov	r1, r2
 8003b30:	7019      	strb	r1, [r3, #0]
 8003b32:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003b36:	705a      	strb	r2, [r3, #1]

}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}
 8003b40:	20000128 	.word	0x20000128

08003b44 <SpiritTimerComputeRxTimeoutValues>:
 * @param  pcPrescaler pointer to the variable in which the value for the rx_timeout prescaler has to be stored.
 *         This parameter must be an uint8_t*.
 * @retval None
 */
void SpiritTimerComputeRxTimeoutValues(float fDesiredMsec , uint8_t* pcCounter , uint8_t* pcPrescaler)
{
 8003b44:	b590      	push	{r4, r7, lr}
 8003b46:	b089      	sub	sp, #36	; 0x24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
  uint32_t nXtalFrequency = SpiritRadioGetXtalFrequency();
 8003b50:	f7ff ffbe 	bl	8003ad0 <SpiritRadioGetXtalFrequency>
 8003b54:	61f8      	str	r0, [r7, #28]
  uint32_t n;
  float err;
  
  /* if xtal is doubled divide it by 2 */
  if(nXtalFrequency>DOUBLE_XTAL_THR) {
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	4a86      	ldr	r2, [pc, #536]	; (8003d74 <SpiritTimerComputeRxTimeoutValues+0x230>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d902      	bls.n	8003b64 <SpiritTimerComputeRxTimeoutValues+0x20>
    nXtalFrequency >>= 1;
 8003b5e:	69fb      	ldr	r3, [r7, #28]
 8003b60:	085b      	lsrs	r3, r3, #1
 8003b62:	61fb      	str	r3, [r7, #28]
  
  /* N cycles in the time base of the timer: 
     - clock of the timer is xtal/1210
     - divide times 1000 more because we have an input in ms
  */
  n=(uint32_t)(fDesiredMsec*nXtalFrequency/1210000);
 8003b64:	69f8      	ldr	r0, [r7, #28]
 8003b66:	f7fc ffd3 	bl	8000b10 <__aeabi_ui2f>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	68f9      	ldr	r1, [r7, #12]
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7fd f826 	bl	8000bc0 <__aeabi_fmul>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4980      	ldr	r1, [pc, #512]	; (8003d78 <SpiritTimerComputeRxTimeoutValues+0x234>)
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f7fd f8d5 	bl	8000d28 <__aeabi_fdiv>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7fd fa09 	bl	8000f98 <__aeabi_f2uiz>
 8003b86:	4603      	mov	r3, r0
 8003b88:	61bb      	str	r3, [r7, #24]
  
  /* check if it is possible to reach that target with prescaler and counter of spirit1 */
  if(n/0xFF>0xFD)
 8003b8a:	69bb      	ldr	r3, [r7, #24]
 8003b8c:	f64f 5201 	movw	r2, #64769	; 0xfd01
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d906      	bls.n	8003ba2 <SpiritTimerComputeRxTimeoutValues+0x5e>
  {
    /* if not return the maximum possible value */
    (*pcCounter) = 0xFF;
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	22ff      	movs	r2, #255	; 0xff
 8003b98:	701a      	strb	r2, [r3, #0]
    (*pcPrescaler) = 0xFF;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	22ff      	movs	r2, #255	; 0xff
 8003b9e:	701a      	strb	r2, [r3, #0]
    return;
 8003ba0:	e137      	b.n	8003e12 <SpiritTimerComputeRxTimeoutValues+0x2ce>
  }
  
  /* prescaler is really 2 as min value */
  (*pcPrescaler)=(n/0xFF)+2;
 8003ba2:	69bb      	ldr	r3, [r7, #24]
 8003ba4:	4a75      	ldr	r2, [pc, #468]	; (8003d7c <SpiritTimerComputeRxTimeoutValues+0x238>)
 8003ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8003baa:	09db      	lsrs	r3, r3, #7
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	3302      	adds	r3, #2
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	701a      	strb	r2, [r3, #0]
  (*pcCounter) = n / (*pcPrescaler);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	781b      	ldrb	r3, [r3, #0]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	69bb      	ldr	r3, [r7, #24]
 8003bbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bc2:	b2da      	uxtb	r2, r3
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	701a      	strb	r2, [r3, #0]
  
  /* check if the error is minimum */
  err=S_ABS((float)(*pcCounter)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec);
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	4618      	mov	r0, r3
 8003bce:	f7fc ff9f 	bl	8000b10 <__aeabi_ui2f>
 8003bd2:	4604      	mov	r4, r0
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f7fc ff9d 	bl	8000b18 <__aeabi_i2f>
 8003bde:	4603      	mov	r3, r0
 8003be0:	4619      	mov	r1, r3
 8003be2:	4620      	mov	r0, r4
 8003be4:	f7fc ffec 	bl	8000bc0 <__aeabi_fmul>
 8003be8:	4603      	mov	r3, r0
 8003bea:	4963      	ldr	r1, [pc, #396]	; (8003d78 <SpiritTimerComputeRxTimeoutValues+0x234>)
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7fc ffe7 	bl	8000bc0 <__aeabi_fmul>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	461c      	mov	r4, r3
 8003bf6:	69f8      	ldr	r0, [r7, #28]
 8003bf8:	f7fc ff8a 	bl	8000b10 <__aeabi_ui2f>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4619      	mov	r1, r3
 8003c00:	4620      	mov	r0, r4
 8003c02:	f7fd f891 	bl	8000d28 <__aeabi_fdiv>
 8003c06:	4603      	mov	r3, r0
 8003c08:	68f9      	ldr	r1, [r7, #12]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7fc fece 	bl	80009ac <__aeabi_fsub>
 8003c10:	4603      	mov	r3, r0
 8003c12:	f04f 0100 	mov.w	r1, #0
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fd f98e 	bl	8000f38 <__aeabi_fcmpgt>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d025      	beq.n	8003c6e <SpiritTimerComputeRxTimeoutValues+0x12a>
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	4618      	mov	r0, r3
 8003c28:	f7fc ff72 	bl	8000b10 <__aeabi_ui2f>
 8003c2c:	4604      	mov	r4, r0
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	781b      	ldrb	r3, [r3, #0]
 8003c32:	4618      	mov	r0, r3
 8003c34:	f7fc ff70 	bl	8000b18 <__aeabi_i2f>
 8003c38:	4603      	mov	r3, r0
 8003c3a:	4619      	mov	r1, r3
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	f7fc ffbf 	bl	8000bc0 <__aeabi_fmul>
 8003c42:	4603      	mov	r3, r0
 8003c44:	494c      	ldr	r1, [pc, #304]	; (8003d78 <SpiritTimerComputeRxTimeoutValues+0x234>)
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7fc ffba 	bl	8000bc0 <__aeabi_fmul>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	461c      	mov	r4, r3
 8003c50:	69f8      	ldr	r0, [r7, #28]
 8003c52:	f7fc ff5d 	bl	8000b10 <__aeabi_ui2f>
 8003c56:	4603      	mov	r3, r0
 8003c58:	4619      	mov	r1, r3
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f7fd f864 	bl	8000d28 <__aeabi_fdiv>
 8003c60:	4603      	mov	r3, r0
 8003c62:	68f9      	ldr	r1, [r7, #12]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fc fea1 	bl	80009ac <__aeabi_fsub>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	e026      	b.n	8003cbc <SpiritTimerComputeRxTimeoutValues+0x178>
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	781b      	ldrb	r3, [r3, #0]
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7fc ff4c 	bl	8000b10 <__aeabi_ui2f>
 8003c78:	4604      	mov	r4, r0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	4618      	mov	r0, r3
 8003c80:	f7fc ff4a 	bl	8000b18 <__aeabi_i2f>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4619      	mov	r1, r3
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f7fc ff99 	bl	8000bc0 <__aeabi_fmul>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4939      	ldr	r1, [pc, #228]	; (8003d78 <SpiritTimerComputeRxTimeoutValues+0x234>)
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fc ff94 	bl	8000bc0 <__aeabi_fmul>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	461c      	mov	r4, r3
 8003c9c:	69f8      	ldr	r0, [r7, #28]
 8003c9e:	f7fc ff37 	bl	8000b10 <__aeabi_ui2f>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	4620      	mov	r0, r4
 8003ca8:	f7fd f83e 	bl	8000d28 <__aeabi_fdiv>
 8003cac:	4603      	mov	r3, r0
 8003cae:	68f9      	ldr	r1, [r7, #12]
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f7fc fe7b 	bl	80009ac <__aeabi_fsub>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003cbc:	617b      	str	r3, [r7, #20]
  
  if((*pcCounter)<=254)
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2bff      	cmp	r3, #255	; 0xff
 8003cc4:	f000 8091 	beq.w	8003dea <SpiritTimerComputeRxTimeoutValues+0x2a6>
  {
    if(S_ABS((float)((*pcCounter)+1)*(*pcPrescaler)*1210000/nXtalFrequency-fDesiredMsec)<err)
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	3301      	adds	r3, #1
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f7fc ff22 	bl	8000b18 <__aeabi_i2f>
 8003cd4:	4604      	mov	r4, r0
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	4618      	mov	r0, r3
 8003cdc:	f7fc ff1c 	bl	8000b18 <__aeabi_i2f>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	4620      	mov	r0, r4
 8003ce6:	f7fc ff6b 	bl	8000bc0 <__aeabi_fmul>
 8003cea:	4603      	mov	r3, r0
 8003cec:	4922      	ldr	r1, [pc, #136]	; (8003d78 <SpiritTimerComputeRxTimeoutValues+0x234>)
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f7fc ff66 	bl	8000bc0 <__aeabi_fmul>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	461c      	mov	r4, r3
 8003cf8:	69f8      	ldr	r0, [r7, #28]
 8003cfa:	f7fc ff09 	bl	8000b10 <__aeabi_ui2f>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	4619      	mov	r1, r3
 8003d02:	4620      	mov	r0, r4
 8003d04:	f7fd f810 	bl	8000d28 <__aeabi_fdiv>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	68f9      	ldr	r1, [r7, #12]
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f7fc fe4d 	bl	80009ac <__aeabi_fsub>
 8003d12:	4603      	mov	r3, r0
 8003d14:	f04f 0100 	mov.w	r1, #0
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7fd f90d 	bl	8000f38 <__aeabi_fcmpgt>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d02d      	beq.n	8003d80 <SpiritTimerComputeRxTimeoutValues+0x23c>
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fc fef4 	bl	8000b18 <__aeabi_i2f>
 8003d30:	4604      	mov	r4, r0
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	781b      	ldrb	r3, [r3, #0]
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fc feee 	bl	8000b18 <__aeabi_i2f>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	4619      	mov	r1, r3
 8003d40:	4620      	mov	r0, r4
 8003d42:	f7fc ff3d 	bl	8000bc0 <__aeabi_fmul>
 8003d46:	4603      	mov	r3, r0
 8003d48:	490b      	ldr	r1, [pc, #44]	; (8003d78 <SpiritTimerComputeRxTimeoutValues+0x234>)
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f7fc ff38 	bl	8000bc0 <__aeabi_fmul>
 8003d50:	4603      	mov	r3, r0
 8003d52:	461c      	mov	r4, r3
 8003d54:	69f8      	ldr	r0, [r7, #28]
 8003d56:	f7fc fedb 	bl	8000b10 <__aeabi_ui2f>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4620      	mov	r0, r4
 8003d60:	f7fc ffe2 	bl	8000d28 <__aeabi_fdiv>
 8003d64:	4603      	mov	r3, r0
 8003d66:	68f9      	ldr	r1, [r7, #12]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7fc fe1f 	bl	80009ac <__aeabi_fsub>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	e02e      	b.n	8003dd0 <SpiritTimerComputeRxTimeoutValues+0x28c>
 8003d72:	bf00      	nop
 8003d74:	01c9c380 	.word	0x01c9c380
 8003d78:	4993b480 	.word	0x4993b480
 8003d7c:	80808081 	.word	0x80808081
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	3301      	adds	r3, #1
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fc fec6 	bl	8000b18 <__aeabi_i2f>
 8003d8c:	4604      	mov	r4, r0
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	4618      	mov	r0, r3
 8003d94:	f7fc fec0 	bl	8000b18 <__aeabi_i2f>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4620      	mov	r0, r4
 8003d9e:	f7fc ff0f 	bl	8000bc0 <__aeabi_fmul>
 8003da2:	4603      	mov	r3, r0
 8003da4:	491c      	ldr	r1, [pc, #112]	; (8003e18 <SpiritTimerComputeRxTimeoutValues+0x2d4>)
 8003da6:	4618      	mov	r0, r3
 8003da8:	f7fc ff0a 	bl	8000bc0 <__aeabi_fmul>
 8003dac:	4603      	mov	r3, r0
 8003dae:	461c      	mov	r4, r3
 8003db0:	69f8      	ldr	r0, [r7, #28]
 8003db2:	f7fc fead 	bl	8000b10 <__aeabi_ui2f>
 8003db6:	4603      	mov	r3, r0
 8003db8:	4619      	mov	r1, r3
 8003dba:	4620      	mov	r0, r4
 8003dbc:	f7fc ffb4 	bl	8000d28 <__aeabi_fdiv>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	68f9      	ldr	r1, [r7, #12]
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7fc fdf1 	bl	80009ac <__aeabi_fsub>
 8003dca:	4603      	mov	r3, r0
 8003dcc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003dd0:	6979      	ldr	r1, [r7, #20]
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f7fd f892 	bl	8000efc <__aeabi_fcmplt>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d005      	beq.n	8003dea <SpiritTimerComputeRxTimeoutValues+0x2a6>
      (*pcCounter)=(*pcCounter)+1;
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	3301      	adds	r3, #1
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	701a      	strb	r2, [r3, #0]
  }
    
  /* decrement prescaler and counter according to the logic of this timer in spirit1 */
  (*pcPrescaler)--;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	3b01      	subs	r3, #1
 8003df0:	b2da      	uxtb	r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	701a      	strb	r2, [r3, #0]
  if((*pcCounter)>1)
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d906      	bls.n	8003e0c <SpiritTimerComputeRxTimeoutValues+0x2c8>
    (*pcCounter)--;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	3b01      	subs	r3, #1
 8003e04:	b2da      	uxtb	r2, r3
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	701a      	strb	r2, [r3, #0]
 8003e0a:	e002      	b.n	8003e12 <SpiritTimerComputeRxTimeoutValues+0x2ce>
  else
    (*pcCounter)=1;
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	701a      	strb	r2, [r3, #0]
}
 8003e12:	3724      	adds	r7, #36	; 0x24
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd90      	pop	{r4, r7, pc}
 8003e18:	4993b480 	.word	0x4993b480

08003e1c <SpiritTimerSetRxTimeoutStopCondition>:
 * @param  xStopCondition new stop condition.
 *         This parameter can be any value of @ref RxTimeoutStopCondition.
 * @retval None
 */
void SpiritTimerSetRxTimeoutStopCondition(RxTimeoutStopCondition xStopCondition)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	4603      	mov	r3, r0
 8003e24:	71fb      	strb	r3, [r7, #7]

  /* Check the parameters */
  s_assert_param(IS_RX_TIMEOUT_STOP_CONDITION(xStopCondition));

  /* Reads value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiReadRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003e26:	f107 030c 	add.w	r3, r7, #12
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	2102      	movs	r1, #2
 8003e2e:	204f      	movs	r0, #79	; 0x4f
 8003e30:	f000 f8ba 	bl	8003fa8 <RadioSpiReadRegisters>
 8003e34:	4602      	mov	r2, r0
 8003e36:	4b1c      	ldr	r3, [pc, #112]	; (8003ea8 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003e38:	b212      	sxth	r2, r2
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	7019      	strb	r1, [r3, #0]
 8003e3e:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e42:	705a      	strb	r2, [r3, #1]

  tempRegValue[0] &= 0xBF;
 8003e44:	7b3b      	ldrb	r3, [r7, #12]
 8003e46:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e4a:	b2db      	uxtb	r3, r3
 8003e4c:	733b      	strb	r3, [r7, #12]
  tempRegValue[0] |= ((xStopCondition & 0x08)  << 3);
 8003e4e:	7b3b      	ldrb	r3, [r7, #12]
 8003e50:	b25a      	sxtb	r2, r3
 8003e52:	79fb      	ldrb	r3, [r7, #7]
 8003e54:	00db      	lsls	r3, r3, #3
 8003e56:	b25b      	sxtb	r3, r3
 8003e58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	b25b      	sxtb	r3, r3
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	733b      	strb	r3, [r7, #12]

  tempRegValue[1] &= 0x1F;
 8003e66:	7b7b      	ldrb	r3, [r7, #13]
 8003e68:	f003 031f 	and.w	r3, r3, #31
 8003e6c:	b2db      	uxtb	r3, r3
 8003e6e:	737b      	strb	r3, [r7, #13]
  tempRegValue[1] |= (xStopCondition << 5);
 8003e70:	7b7b      	ldrb	r3, [r7, #13]
 8003e72:	b25a      	sxtb	r2, r3
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	015b      	lsls	r3, r3, #5
 8003e78:	b25b      	sxtb	r3, r3
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	b25b      	sxtb	r3, r3
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	737b      	strb	r3, [r7, #13]

  /* Writes value on the PKT_FLT_OPTIONS and PROTOCOL2 register */
  g_xStatus = SpiritSpiWriteRegisters(PCKT_FLT_OPTIONS_BASE, 2, tempRegValue);
 8003e82:	f107 030c 	add.w	r3, r7, #12
 8003e86:	461a      	mov	r2, r3
 8003e88:	2102      	movs	r1, #2
 8003e8a:	204f      	movs	r0, #79	; 0x4f
 8003e8c:	f000 f840 	bl	8003f10 <RadioSpiWriteRegisters>
 8003e90:	4602      	mov	r2, r0
 8003e92:	4b05      	ldr	r3, [pc, #20]	; (8003ea8 <SpiritTimerSetRxTimeoutStopCondition+0x8c>)
 8003e94:	b212      	sxth	r2, r2
 8003e96:	4611      	mov	r1, r2
 8003e98:	7019      	strb	r1, [r3, #0]
 8003e9a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 8003e9e:	705a      	strb	r2, [r3, #1]

}
 8003ea0:	bf00      	nop
 8003ea2:	3710      	adds	r7, #16
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd80      	pop	{r7, pc}
 8003ea8:	20000128 	.word	0x20000128

08003eac <SpiritRefreshStatus>:
 *         reading the MC_STATE register of SPIRIT.
 * @param  None
 * @retval None
 */
void SpiritRefreshStatus(void)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
  /* Read the status both from register and from SPI header and exit when they match.
      This will protect against possible transition state changes */
  do
  {
    /* Reads the MC_STATUS register to update the g_xStatus */
    g_xStatus = SpiritSpiReadRegisters(MC_STATE1_BASE, 2, tempRegValue);
 8003eb2:	1d3b      	adds	r3, r7, #4
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	20c0      	movs	r0, #192	; 0xc0
 8003eba:	f000 f875 	bl	8003fa8 <RadioSpiReadRegisters>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <SpiritRefreshStatus+0x3c>)
 8003ec2:	8013      	strh	r3, [r2, #0]
  }
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003ec4:	4b08      	ldr	r3, [pc, #32]	; (8003ee8 <SpiritRefreshStatus+0x3c>)
 8003ec6:	781a      	ldrb	r2, [r3, #0]
 8003ec8:	797b      	ldrb	r3, [r7, #5]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d1f1      	bne.n	8003eb2 <SpiritRefreshStatus+0x6>
          (((uint8_t*)&g_xStatus)[1]&0x0F)==tempRegValue[0])); 
 8003ece:	4b07      	ldr	r3, [pc, #28]	; (8003eec <SpiritRefreshStatus+0x40>)
 8003ed0:	781b      	ldrb	r3, [r3, #0]
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	793a      	ldrb	r2, [r7, #4]
  while(!((((uint8_t*)&g_xStatus)[0])==tempRegValue[1] && 
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d1ea      	bne.n	8003eb2 <SpiritRefreshStatus+0x6>

}
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	3708      	adds	r7, #8
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000128 	.word	0x20000128
 8003eec:	20000129 	.word	0x20000129

08003ef0 <RadioSpiInit>:
*         confirms that it is.
* @param  None
* @retval None
*/
void RadioSpiInit(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  if (radioSpi->State == HAL_SPI_STATE_RESET)
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <RadioSpiInit+0x1c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003efc:	b2db      	uxtb	r3, r3
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <RadioSpiInit+0x16>
  {
    Error_Handler();
 8003f02:	f7fd fbb9 	bl	8001678 <Error_Handler>
  }
}
 8003f06:	bf00      	nop
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	20000008 	.word	0x20000008

08003f10 <RadioSpiWriteRegisters>:
* @param  cNbBytes: number of registers and bytes to be write
* @param  pcBuffer: pointer to the buffer of values have to be written into registers
* @retval Device status
*/
StatusBytes RadioSpiWriteRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	4603      	mov	r3, r0
 8003f18:	603a      	str	r2, [r7, #0]
 8003f1a:	71fb      	strb	r3, [r7, #7]
 8003f1c:	460b      	mov	r3, r1
 8003f1e:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {WRITE_HEADER, cRegAddress};
 8003f20:	2300      	movs	r3, #0
 8003f22:	743b      	strb	r3, [r7, #16]
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003f28:	2017      	movs	r0, #23
 8003f2a:	f000 faea 	bl	8004502 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow(); // Puts the SPI chip select low to start the transaction
 8003f2e:	2200      	movs	r2, #0
 8003f30:	2140      	movs	r1, #64	; 0x40
 8003f32:	481b      	ldr	r0, [pc, #108]	; (8003fa0 <RadioSpiWriteRegisters+0x90>)
 8003f34:	f000 fca8 	bl	8004888 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003f38:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <RadioSpiWriteRegisters+0x94>)
 8003f3a:	6818      	ldr	r0, [r3, #0]
 8003f3c:	f107 020c 	add.w	r2, r7, #12
 8003f40:	f107 0110 	add.w	r1, r7, #16
 8003f44:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f48:	9300      	str	r3, [sp, #0]
 8003f4a:	2302      	movs	r3, #2
 8003f4c:	f001 fe5f 	bl	8005c0e <HAL_SPI_TransmitReceive>
  HAL_SPI_Transmit(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003f50:	4b14      	ldr	r3, [pc, #80]	; (8003fa4 <RadioSpiWriteRegisters+0x94>)
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	79bb      	ldrb	r3, [r7, #6]
 8003f56:	b29a      	uxth	r2, r3
 8003f58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f5c:	6839      	ldr	r1, [r7, #0]
 8003f5e:	f001 fbaa 	bl	80056b6 <HAL_SPI_Transmit>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003f62:	2201      	movs	r2, #1
 8003f64:	2140      	movs	r1, #64	; 0x40
 8003f66:	480e      	ldr	r0, [pc, #56]	; (8003fa0 <RadioSpiWriteRegisters+0x90>)
 8003f68:	f000 fc8e 	bl	8004888 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8003f6c:	2017      	movs	r0, #23
 8003f6e:	f000 faba 	bl	80044e6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 8003f72:	f107 0308 	add.w	r3, r7, #8
 8003f76:	3301      	adds	r3, #1
 8003f78:	7b3a      	ldrb	r2, [r7, #12]
 8003f7a:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8003f7c:	f107 0308 	add.w	r3, r7, #8
 8003f80:	7b7a      	ldrb	r2, [r7, #13]
 8003f82:	701a      	strb	r2, [r3, #0]

  return status;
 8003f84:	893b      	ldrh	r3, [r7, #8]
 8003f86:	82bb      	strh	r3, [r7, #20]
 8003f88:	2300      	movs	r3, #0
 8003f8a:	7d3a      	ldrb	r2, [r7, #20]
 8003f8c:	f362 0307 	bfi	r3, r2, #0, #8
 8003f90:	7d7a      	ldrb	r2, [r7, #21]
 8003f92:	f362 230f 	bfi	r3, r2, #8, #8

}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3718      	adds	r7, #24
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	48000400 	.word	0x48000400
 8003fa4:	20000008 	.word	0x20000008

08003fa8 <RadioSpiReadRegisters>:
* @param  cNbBytes: number of registers and bytes to be read
* @param  pcBuffer: pointer to the buffer of registers' values read
* @retval Device status
*/
StatusBytes RadioSpiReadRegisters(uint8_t cRegAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b088      	sub	sp, #32
 8003fac:	af02      	add	r7, sp, #8
 8003fae:	4603      	mov	r3, r0
 8003fb0:	603a      	str	r2, [r7, #0]
 8003fb2:	71fb      	strb	r3, [r7, #7]
 8003fb4:	460b      	mov	r3, r1
 8003fb6:	71bb      	strb	r3, [r7, #6]
  uint8_t tx_buff[2] = {READ_HEADER, cRegAddress};
 8003fb8:	2301      	movs	r3, #1
 8003fba:	743b      	strb	r3, [r7, #16]
 8003fbc:	79fb      	ldrb	r3, [r7, #7]
 8003fbe:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8003fc0:	2017      	movs	r0, #23
 8003fc2:	f000 fa9e 	bl	8004502 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	2140      	movs	r1, #64	; 0x40
 8003fca:	481b      	ldr	r0, [pc, #108]	; (8004038 <RadioSpiReadRegisters+0x90>)
 8003fcc:	f000 fc5c 	bl	8004888 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8003fd0:	4b1a      	ldr	r3, [pc, #104]	; (800403c <RadioSpiReadRegisters+0x94>)
 8003fd2:	6818      	ldr	r0, [r3, #0]
 8003fd4:	f107 020c 	add.w	r2, r7, #12
 8003fd8:	f107 0110 	add.w	r1, r7, #16
 8003fdc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003fe0:	9300      	str	r3, [sp, #0]
 8003fe2:	2302      	movs	r3, #2
 8003fe4:	f001 fe13 	bl	8005c0e <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 8003fe8:	4b14      	ldr	r3, [pc, #80]	; (800403c <RadioSpiReadRegisters+0x94>)
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	79bb      	ldrb	r3, [r7, #6]
 8003fee:	b29a      	uxth	r2, r3
 8003ff0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003ff4:	6839      	ldr	r1, [r7, #0]
 8003ff6:	f001 fcd3 	bl	80059a0 <HAL_SPI_Receive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	2140      	movs	r1, #64	; 0x40
 8003ffe:	480e      	ldr	r0, [pc, #56]	; (8004038 <RadioSpiReadRegisters+0x90>)
 8004000:	f000 fc42 	bl	8004888 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004004:	2017      	movs	r0, #23
 8004006:	f000 fa6e 	bl	80044e6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800400a:	f107 0308 	add.w	r3, r7, #8
 800400e:	3301      	adds	r3, #1
 8004010:	7b3a      	ldrb	r2, [r7, #12]
 8004012:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004014:	f107 0308 	add.w	r3, r7, #8
 8004018:	7b7a      	ldrb	r2, [r7, #13]
 800401a:	701a      	strb	r2, [r3, #0]

  return status;
 800401c:	893b      	ldrh	r3, [r7, #8]
 800401e:	82bb      	strh	r3, [r7, #20]
 8004020:	2300      	movs	r3, #0
 8004022:	7d3a      	ldrb	r2, [r7, #20]
 8004024:	f362 0307 	bfi	r3, r2, #0, #8
 8004028:	7d7a      	ldrb	r2, [r7, #21]
 800402a:	f362 230f 	bfi	r3, r2, #8, #8
}
 800402e:	4618      	mov	r0, r3
 8004030:	3718      	adds	r7, #24
 8004032:	46bd      	mov	sp, r7
 8004034:	bd80      	pop	{r7, pc}
 8004036:	bf00      	nop
 8004038:	48000400 	.word	0x48000400
 800403c:	20000008 	.word	0x20000008

08004040 <RadioSpiCommandStrobes>:
* @brief  Send a command
* @param  cCommandCode: command code to be sent
* @retval Device status
*/
StatusBytes RadioSpiCommandStrobes(uint8_t cCommandCode)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b088      	sub	sp, #32
 8004044:	af02      	add	r7, sp, #8
 8004046:	4603      	mov	r3, r0
 8004048:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {COMMAND_HEADER, cCommandCode};
 800404a:	2380      	movs	r3, #128	; 0x80
 800404c:	743b      	strb	r3, [r7, #16]
 800404e:	79fb      	ldrb	r3, [r7, #7]
 8004050:	747b      	strb	r3, [r7, #17]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 8004052:	2017      	movs	r0, #23
 8004054:	f000 fa55 	bl	8004502 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 8004058:	2200      	movs	r2, #0
 800405a:	2140      	movs	r1, #64	; 0x40
 800405c:	4816      	ldr	r0, [pc, #88]	; (80040b8 <RadioSpiCommandStrobes+0x78>)
 800405e:	f000 fc13 	bl	8004888 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 8004062:	4b16      	ldr	r3, [pc, #88]	; (80040bc <RadioSpiCommandStrobes+0x7c>)
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	f107 020c 	add.w	r2, r7, #12
 800406a:	f107 0110 	add.w	r1, r7, #16
 800406e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004072:	9300      	str	r3, [sp, #0]
 8004074:	2302      	movs	r3, #2
 8004076:	f001 fdca 	bl	8005c0e <HAL_SPI_TransmitReceive>
  RadioSpiCSHigh(); // Puts the SPI chip select high to end the transaction
 800407a:	2201      	movs	r2, #1
 800407c:	2140      	movs	r1, #64	; 0x40
 800407e:	480e      	ldr	r0, [pc, #56]	; (80040b8 <RadioSpiCommandStrobes+0x78>)
 8004080:	f000 fc02 	bl	8004888 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004084:	2017      	movs	r0, #23
 8004086:	f000 fa2e 	bl	80044e6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800408a:	f107 0308 	add.w	r3, r7, #8
 800408e:	3301      	adds	r3, #1
 8004090:	7b3a      	ldrb	r2, [r7, #12]
 8004092:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004094:	f107 0308 	add.w	r3, r7, #8
 8004098:	7b7a      	ldrb	r2, [r7, #13]
 800409a:	701a      	strb	r2, [r3, #0]

  return status;
 800409c:	893b      	ldrh	r3, [r7, #8]
 800409e:	82bb      	strh	r3, [r7, #20]
 80040a0:	2300      	movs	r3, #0
 80040a2:	7d3a      	ldrb	r2, [r7, #20]
 80040a4:	f362 0307 	bfi	r3, r2, #0, #8
 80040a8:	7d7a      	ldrb	r2, [r7, #21]
 80040aa:	f362 230f 	bfi	r3, r2, #8, #8
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3718      	adds	r7, #24
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}
 80040b6:	bf00      	nop
 80040b8:	48000400 	.word	0x48000400
 80040bc:	20000008 	.word	0x20000008

080040c0 <RadioSpiReadFifo>:
* @param  cNbBytes: number of bytes to read from RX FIFO
* @param  pcBuffer: pointer to data read from RX FIFO
* @retval Device status
*/
StatusBytes RadioSpiReadFifo(uint8_t cNbBytes, uint8_t* pcBuffer)
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b088      	sub	sp, #32
 80040c4:	af02      	add	r7, sp, #8
 80040c6:	4603      	mov	r3, r0
 80040c8:	6039      	str	r1, [r7, #0]
 80040ca:	71fb      	strb	r3, [r7, #7]
  uint8_t tx_buff[2] = {READ_HEADER, LINEAR_FIFO_ADDRESS};
 80040cc:	f64f 7301 	movw	r3, #65281	; 0xff01
 80040d0:	823b      	strh	r3, [r7, #16]
  uint8_t rx_buff[2];
  StatusBytes status;

  SPI_ENTER_CRITICAL();
 80040d2:	2017      	movs	r0, #23
 80040d4:	f000 fa15 	bl	8004502 <HAL_NVIC_DisableIRQ>

  RadioSpiCSLow();  // Puts the SPI chip select low to start the transaction
 80040d8:	2200      	movs	r2, #0
 80040da:	2140      	movs	r1, #64	; 0x40
 80040dc:	481a      	ldr	r0, [pc, #104]	; (8004148 <RadioSpiReadFifo+0x88>)
 80040de:	f000 fbd3 	bl	8004888 <HAL_GPIO_WritePin>
  HAL_SPI_TransmitReceive(radioSpi, tx_buff, rx_buff, 2, RADIO_SPI_TIMEOUT_MAX);
 80040e2:	4b1a      	ldr	r3, [pc, #104]	; (800414c <RadioSpiReadFifo+0x8c>)
 80040e4:	6818      	ldr	r0, [r3, #0]
 80040e6:	f107 020c 	add.w	r2, r7, #12
 80040ea:	f107 0110 	add.w	r1, r7, #16
 80040ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2302      	movs	r3, #2
 80040f6:	f001 fd8a 	bl	8005c0e <HAL_SPI_TransmitReceive>
  HAL_SPI_Receive(radioSpi, pcBuffer, cNbBytes, RADIO_SPI_TIMEOUT_MAX);
 80040fa:	4b14      	ldr	r3, [pc, #80]	; (800414c <RadioSpiReadFifo+0x8c>)
 80040fc:	6818      	ldr	r0, [r3, #0]
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	b29a      	uxth	r2, r3
 8004102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004106:	6839      	ldr	r1, [r7, #0]
 8004108:	f001 fc4a 	bl	80059a0 <HAL_SPI_Receive>
  RadioSpiCSHigh();  // Puts the SPI chip select high to end the transaction
 800410c:	2201      	movs	r2, #1
 800410e:	2140      	movs	r1, #64	; 0x40
 8004110:	480d      	ldr	r0, [pc, #52]	; (8004148 <RadioSpiReadFifo+0x88>)
 8004112:	f000 fbb9 	bl	8004888 <HAL_GPIO_WritePin>

  SPI_EXIT_CRITICAL();
 8004116:	2017      	movs	r0, #23
 8004118:	f000 f9e5 	bl	80044e6 <HAL_NVIC_EnableIRQ>

  ((uint8_t *)&status)[1] = rx_buff[0];
 800411c:	f107 0308 	add.w	r3, r7, #8
 8004120:	3301      	adds	r3, #1
 8004122:	7b3a      	ldrb	r2, [r7, #12]
 8004124:	701a      	strb	r2, [r3, #0]
  ((uint8_t *)&status)[0] = rx_buff[1];
 8004126:	f107 0308 	add.w	r3, r7, #8
 800412a:	7b7a      	ldrb	r2, [r7, #13]
 800412c:	701a      	strb	r2, [r3, #0]

  return status;
 800412e:	893b      	ldrh	r3, [r7, #8]
 8004130:	82bb      	strh	r3, [r7, #20]
 8004132:	2300      	movs	r3, #0
 8004134:	7d3a      	ldrb	r2, [r7, #20]
 8004136:	f362 0307 	bfi	r3, r2, #0, #8
 800413a:	7d7a      	ldrb	r2, [r7, #21]
 800413c:	f362 230f 	bfi	r3, r2, #8, #8
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}
 8004148:	48000400 	.word	0x48000400
 800414c:	20000008 	.word	0x20000008

08004150 <RadioEnterShutdown>:
* @brief  Puts at logic 1 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioEnterShutdown(void)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	af00      	add	r7, sp, #0
  /* Puts high the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_SET);
 8004154:	2201      	movs	r2, #1
 8004156:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800415a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800415e:	f000 fb93 	bl	8004888 <HAL_GPIO_WritePin>
}
 8004162:	bf00      	nop
 8004164:	bd80      	pop	{r7, pc}

08004166 <RadioExitShutdown>:
* @brief  Put at logic 0 the SDN pin.
* @param  None.
* @retval None.
*/
void RadioExitShutdown(void)
{
 8004166:	b580      	push	{r7, lr}
 8004168:	af00      	add	r7, sp, #0
  /* Puts low the GPIO connected to shutdown pin */
  HAL_GPIO_WritePin(RADIO_SDN_PORT, RADIO_SDN_PIN, GPIO_PIN_RESET);
 800416a:	2200      	movs	r2, #0
 800416c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004174:	f000 fb88 	bl	8004888 <HAL_GPIO_WritePin>

  /* Delay to allow the circuit POR, about 700 us */
  //for(volatile uint32_t i=0;i<0x1E00;i++);
  HAL_Delay(1); // 1ms (Note: Table 20 of SPIRIT1 datasheet specifies ~650 us)
 8004178:	2001      	movs	r0, #1
 800417a:	f000 f879 	bl	8004270 <HAL_Delay>
}
 800417e:	bf00      	nop
 8004180:	bd80      	pop	{r7, pc}

08004182 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004182:	b580      	push	{r7, lr}
 8004184:	b082      	sub	sp, #8
 8004186:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004188:	2300      	movs	r3, #0
 800418a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800418c:	2003      	movs	r0, #3
 800418e:	f000 f983 	bl	8004498 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004192:	200f      	movs	r0, #15
 8004194:	f000 f814 	bl	80041c0 <HAL_InitTick>
 8004198:	4603      	mov	r3, r0
 800419a:	2b00      	cmp	r3, #0
 800419c:	d002      	beq.n	80041a4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	71fb      	strb	r3, [r7, #7]
 80041a2:	e001      	b.n	80041a8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80041a4:	f000 f805 	bl	80041b2 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80041a8:	79fb      	ldrb	r3, [r7, #7]
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_MspInit>:
/**
  * @brief  Initialize the MSP.
  * @retval None
  */
__weak void HAL_MspInit(void)
{
 80041b2:	b480      	push	{r7}
 80041b4:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspInit could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr
	...

080041c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80041c8:	2300      	movs	r3, #0
 80041ca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80041cc:	4b17      	ldr	r3, [pc, #92]	; (800422c <HAL_InitTick+0x6c>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d023      	beq.n	800421c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80041d4:	4b16      	ldr	r3, [pc, #88]	; (8004230 <HAL_InitTick+0x70>)
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <HAL_InitTick+0x6c>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4619      	mov	r1, r3
 80041de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 f997 	bl	800451e <HAL_SYSTICK_Config>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10f      	bne.n	8004216 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b0f      	cmp	r3, #15
 80041fa:	d809      	bhi.n	8004210 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041fc:	2200      	movs	r2, #0
 80041fe:	6879      	ldr	r1, [r7, #4]
 8004200:	f04f 30ff 	mov.w	r0, #4294967295
 8004204:	f000 f953 	bl	80044ae <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004208:	4a0a      	ldr	r2, [pc, #40]	; (8004234 <HAL_InitTick+0x74>)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6013      	str	r3, [r2, #0]
 800420e:	e007      	b.n	8004220 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	73fb      	strb	r3, [r7, #15]
 8004214:	e004      	b.n	8004220 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004216:	2301      	movs	r3, #1
 8004218:	73fb      	strb	r3, [r7, #15]
 800421a:	e001      	b.n	8004220 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004220:	7bfb      	ldrb	r3, [r7, #15]
}
 8004222:	4618      	mov	r0, r3
 8004224:	3710      	adds	r7, #16
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	20000010 	.word	0x20000010
 8004230:	20000000 	.word	0x20000000
 8004234:	2000000c 	.word	0x2000000c

08004238 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_IncTick+0x1c>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	461a      	mov	r2, r3
 8004242:	4b05      	ldr	r3, [pc, #20]	; (8004258 <HAL_IncTick+0x20>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4413      	add	r3, r2
 8004248:	4a03      	ldr	r2, [pc, #12]	; (8004258 <HAL_IncTick+0x20>)
 800424a:	6013      	str	r3, [r2, #0]
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	bc80      	pop	{r7}
 8004252:	4770      	bx	lr
 8004254:	20000010 	.word	0x20000010
 8004258:	2000012c 	.word	0x2000012c

0800425c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800425c:	b480      	push	{r7}
 800425e:	af00      	add	r7, sp, #0
  return uwTick;
 8004260:	4b02      	ldr	r3, [pc, #8]	; (800426c <HAL_GetTick+0x10>)
 8004262:	681b      	ldr	r3, [r3, #0]
}
 8004264:	4618      	mov	r0, r3
 8004266:	46bd      	mov	sp, r7
 8004268:	bc80      	pop	{r7}
 800426a:	4770      	bx	lr
 800426c:	2000012c 	.word	0x2000012c

08004270 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b084      	sub	sp, #16
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004278:	f7ff fff0 	bl	800425c <HAL_GetTick>
 800427c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004288:	d005      	beq.n	8004296 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800428a:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <HAL_Delay+0x44>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	461a      	mov	r2, r3
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	4413      	add	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004296:	bf00      	nop
 8004298:	f7ff ffe0 	bl	800425c <HAL_GetTick>
 800429c:	4602      	mov	r2, r0
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	1ad3      	subs	r3, r2, r3
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d8f7      	bhi.n	8004298 <HAL_Delay+0x28>
  {
  }
}
 80042a8:	bf00      	nop
 80042aa:	bf00      	nop
 80042ac:	3710      	adds	r7, #16
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	bf00      	nop
 80042b4:	20000010 	.word	0x20000010

080042b8 <__NVIC_SetPriorityGrouping>:
{
 80042b8:	b480      	push	{r7}
 80042ba:	b085      	sub	sp, #20
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	f003 0307 	and.w	r3, r3, #7
 80042c6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042c8:	4b0c      	ldr	r3, [pc, #48]	; (80042fc <__NVIC_SetPriorityGrouping+0x44>)
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042d4:	4013      	ands	r3, r2
 80042d6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ea:	4a04      	ldr	r2, [pc, #16]	; (80042fc <__NVIC_SetPriorityGrouping+0x44>)
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	60d3      	str	r3, [r2, #12]
}
 80042f0:	bf00      	nop
 80042f2:	3714      	adds	r7, #20
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bc80      	pop	{r7}
 80042f8:	4770      	bx	lr
 80042fa:	bf00      	nop
 80042fc:	e000ed00 	.word	0xe000ed00

08004300 <__NVIC_GetPriorityGrouping>:
{
 8004300:	b480      	push	{r7}
 8004302:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <__NVIC_GetPriorityGrouping+0x18>)
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	0a1b      	lsrs	r3, r3, #8
 800430a:	f003 0307 	and.w	r3, r3, #7
}
 800430e:	4618      	mov	r0, r3
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	e000ed00 	.word	0xe000ed00

0800431c <__NVIC_EnableIRQ>:
{
 800431c:	b480      	push	{r7}
 800431e:	b083      	sub	sp, #12
 8004320:	af00      	add	r7, sp, #0
 8004322:	4603      	mov	r3, r0
 8004324:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800432a:	2b00      	cmp	r3, #0
 800432c:	db0b      	blt.n	8004346 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800432e:	79fb      	ldrb	r3, [r7, #7]
 8004330:	f003 021f 	and.w	r2, r3, #31
 8004334:	4906      	ldr	r1, [pc, #24]	; (8004350 <__NVIC_EnableIRQ+0x34>)
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	095b      	lsrs	r3, r3, #5
 800433c:	2001      	movs	r0, #1
 800433e:	fa00 f202 	lsl.w	r2, r0, r2
 8004342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	bc80      	pop	{r7}
 800434e:	4770      	bx	lr
 8004350:	e000e100 	.word	0xe000e100

08004354 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	4603      	mov	r3, r0
 800435c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800435e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004362:	2b00      	cmp	r3, #0
 8004364:	db12      	blt.n	800438c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004366:	79fb      	ldrb	r3, [r7, #7]
 8004368:	f003 021f 	and.w	r2, r3, #31
 800436c:	490a      	ldr	r1, [pc, #40]	; (8004398 <__NVIC_DisableIRQ+0x44>)
 800436e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004372:	095b      	lsrs	r3, r3, #5
 8004374:	2001      	movs	r0, #1
 8004376:	fa00 f202 	lsl.w	r2, r0, r2
 800437a:	3320      	adds	r3, #32
 800437c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8004380:	f3bf 8f4f 	dsb	sy
}
 8004384:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004386:	f3bf 8f6f 	isb	sy
}
 800438a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	bc80      	pop	{r7}
 8004394:	4770      	bx	lr
 8004396:	bf00      	nop
 8004398:	e000e100 	.word	0xe000e100

0800439c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800439c:	b480      	push	{r7}
 800439e:	b083      	sub	sp, #12
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	4603      	mov	r3, r0
 80043a4:	6039      	str	r1, [r7, #0]
 80043a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	db0a      	blt.n	80043c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	b2da      	uxtb	r2, r3
 80043b4:	490c      	ldr	r1, [pc, #48]	; (80043e8 <__NVIC_SetPriority+0x4c>)
 80043b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ba:	0112      	lsls	r2, r2, #4
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	440b      	add	r3, r1
 80043c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043c4:	e00a      	b.n	80043dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	b2da      	uxtb	r2, r3
 80043ca:	4908      	ldr	r1, [pc, #32]	; (80043ec <__NVIC_SetPriority+0x50>)
 80043cc:	79fb      	ldrb	r3, [r7, #7]
 80043ce:	f003 030f 	and.w	r3, r3, #15
 80043d2:	3b04      	subs	r3, #4
 80043d4:	0112      	lsls	r2, r2, #4
 80043d6:	b2d2      	uxtb	r2, r2
 80043d8:	440b      	add	r3, r1
 80043da:	761a      	strb	r2, [r3, #24]
}
 80043dc:	bf00      	nop
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bc80      	pop	{r7}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	e000e100 	.word	0xe000e100
 80043ec:	e000ed00 	.word	0xe000ed00

080043f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b089      	sub	sp, #36	; 0x24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004404:	69fb      	ldr	r3, [r7, #28]
 8004406:	f1c3 0307 	rsb	r3, r3, #7
 800440a:	2b04      	cmp	r3, #4
 800440c:	bf28      	it	cs
 800440e:	2304      	movcs	r3, #4
 8004410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	3304      	adds	r3, #4
 8004416:	2b06      	cmp	r3, #6
 8004418:	d902      	bls.n	8004420 <NVIC_EncodePriority+0x30>
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	3b03      	subs	r3, #3
 800441e:	e000      	b.n	8004422 <NVIC_EncodePriority+0x32>
 8004420:	2300      	movs	r3, #0
 8004422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004424:	f04f 32ff 	mov.w	r2, #4294967295
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	fa02 f303 	lsl.w	r3, r2, r3
 800442e:	43da      	mvns	r2, r3
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	401a      	ands	r2, r3
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004438:	f04f 31ff 	mov.w	r1, #4294967295
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	fa01 f303 	lsl.w	r3, r1, r3
 8004442:	43d9      	mvns	r1, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004448:	4313      	orrs	r3, r2
         );
}
 800444a:	4618      	mov	r0, r3
 800444c:	3724      	adds	r7, #36	; 0x24
 800444e:	46bd      	mov	sp, r7
 8004450:	bc80      	pop	{r7}
 8004452:	4770      	bx	lr

08004454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3b01      	subs	r3, #1
 8004460:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004464:	d301      	bcc.n	800446a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004466:	2301      	movs	r3, #1
 8004468:	e00f      	b.n	800448a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800446a:	4a0a      	ldr	r2, [pc, #40]	; (8004494 <SysTick_Config+0x40>)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	3b01      	subs	r3, #1
 8004470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004472:	210f      	movs	r1, #15
 8004474:	f04f 30ff 	mov.w	r0, #4294967295
 8004478:	f7ff ff90 	bl	800439c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800447c:	4b05      	ldr	r3, [pc, #20]	; (8004494 <SysTick_Config+0x40>)
 800447e:	2200      	movs	r2, #0
 8004480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004482:	4b04      	ldr	r3, [pc, #16]	; (8004494 <SysTick_Config+0x40>)
 8004484:	2207      	movs	r2, #7
 8004486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3708      	adds	r7, #8
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	e000e010 	.word	0xe000e010

08004498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b082      	sub	sp, #8
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f7ff ff09 	bl	80042b8 <__NVIC_SetPriorityGrouping>
}
 80044a6:	bf00      	nop
 80044a8:	3708      	adds	r7, #8
 80044aa:	46bd      	mov	sp, r7
 80044ac:	bd80      	pop	{r7, pc}

080044ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80044ae:	b580      	push	{r7, lr}
 80044b0:	b086      	sub	sp, #24
 80044b2:	af00      	add	r7, sp, #0
 80044b4:	4603      	mov	r3, r0
 80044b6:	60b9      	str	r1, [r7, #8]
 80044b8:	607a      	str	r2, [r7, #4]
 80044ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80044bc:	2300      	movs	r3, #0
 80044be:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80044c0:	f7ff ff1e 	bl	8004300 <__NVIC_GetPriorityGrouping>
 80044c4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044c6:	687a      	ldr	r2, [r7, #4]
 80044c8:	68b9      	ldr	r1, [r7, #8]
 80044ca:	6978      	ldr	r0, [r7, #20]
 80044cc:	f7ff ff90 	bl	80043f0 <NVIC_EncodePriority>
 80044d0:	4602      	mov	r2, r0
 80044d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f7ff ff5f 	bl	800439c <__NVIC_SetPriority>
}
 80044de:	bf00      	nop
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b082      	sub	sp, #8
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	4603      	mov	r3, r0
 80044ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044f4:	4618      	mov	r0, r3
 80044f6:	f7ff ff11 	bl	800431c <__NVIC_EnableIRQ>
}
 80044fa:	bf00      	nop
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	4603      	mov	r3, r0
 800450a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800450c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ff1f 	bl	8004354 <__NVIC_DisableIRQ>
}
 8004516:	bf00      	nop
 8004518:	3708      	adds	r7, #8
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b082      	sub	sp, #8
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f7ff ff94 	bl	8004454 <SysTick_Config>
 800452c:	4603      	mov	r3, r0
}
 800452e:	4618      	mov	r0, r3
 8004530:	3708      	adds	r7, #8
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}
	...

08004538 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004542:	2300      	movs	r3, #0
 8004544:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004546:	e17f      	b.n	8004848 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	2101      	movs	r1, #1
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	4013      	ands	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b00      	cmp	r3, #0
 800455c:	f000 8171 	beq.w	8004842 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	f003 0303 	and.w	r3, r3, #3
 8004568:	2b01      	cmp	r3, #1
 800456a:	d005      	beq.n	8004578 <HAL_GPIO_Init+0x40>
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f003 0303 	and.w	r3, r3, #3
 8004574:	2b02      	cmp	r3, #2
 8004576:	d130      	bne.n	80045da <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	005b      	lsls	r3, r3, #1
 8004582:	2203      	movs	r2, #3
 8004584:	fa02 f303 	lsl.w	r3, r2, r3
 8004588:	43db      	mvns	r3, r3
 800458a:	693a      	ldr	r2, [r7, #16]
 800458c:	4013      	ands	r3, r2
 800458e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68da      	ldr	r2, [r3, #12]
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	005b      	lsls	r3, r3, #1
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
 800459c:	693a      	ldr	r2, [r7, #16]
 800459e:	4313      	orrs	r3, r2
 80045a0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	693a      	ldr	r2, [r7, #16]
 80045a6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80045ae:	2201      	movs	r2, #1
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	fa02 f303 	lsl.w	r3, r2, r3
 80045b6:	43db      	mvns	r3, r3
 80045b8:	693a      	ldr	r2, [r7, #16]
 80045ba:	4013      	ands	r3, r2
 80045bc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	091b      	lsrs	r3, r3, #4
 80045c4:	f003 0201 	and.w	r2, r3, #1
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	fa02 f303 	lsl.w	r3, r2, r3
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	4313      	orrs	r3, r2
 80045d2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	693a      	ldr	r2, [r7, #16]
 80045d8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685b      	ldr	r3, [r3, #4]
 80045de:	f003 0303 	and.w	r3, r3, #3
 80045e2:	2b03      	cmp	r3, #3
 80045e4:	d118      	bne.n	8004618 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80045ec:	2201      	movs	r2, #1
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	fa02 f303 	lsl.w	r3, r2, r3
 80045f4:	43db      	mvns	r3, r3
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80045fc:	683b      	ldr	r3, [r7, #0]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	08db      	lsrs	r3, r3, #3
 8004602:	f003 0201 	and.w	r2, r3, #1
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	fa02 f303 	lsl.w	r3, r2, r3
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	685b      	ldr	r3, [r3, #4]
 800461c:	f003 0303 	and.w	r3, r3, #3
 8004620:	2b03      	cmp	r3, #3
 8004622:	d017      	beq.n	8004654 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	005b      	lsls	r3, r3, #1
 800462e:	2203      	movs	r2, #3
 8004630:	fa02 f303 	lsl.w	r3, r2, r3
 8004634:	43db      	mvns	r3, r3
 8004636:	693a      	ldr	r2, [r7, #16]
 8004638:	4013      	ands	r3, r2
 800463a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800463c:	683b      	ldr	r3, [r7, #0]
 800463e:	689a      	ldr	r2, [r3, #8]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	005b      	lsls	r3, r3, #1
 8004644:	fa02 f303 	lsl.w	r3, r2, r3
 8004648:	693a      	ldr	r2, [r7, #16]
 800464a:	4313      	orrs	r3, r2
 800464c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	693a      	ldr	r2, [r7, #16]
 8004652:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f003 0303 	and.w	r3, r3, #3
 800465c:	2b02      	cmp	r3, #2
 800465e:	d123      	bne.n	80046a8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8004660:	697b      	ldr	r3, [r7, #20]
 8004662:	08da      	lsrs	r2, r3, #3
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	3208      	adds	r2, #8
 8004668:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800466c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	f003 0307 	and.w	r3, r3, #7
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	220f      	movs	r2, #15
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	43db      	mvns	r3, r3
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4013      	ands	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	691a      	ldr	r2, [r3, #16]
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f003 0307 	and.w	r3, r3, #7
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	fa02 f303 	lsl.w	r3, r2, r3
 8004694:	693a      	ldr	r2, [r7, #16]
 8004696:	4313      	orrs	r3, r2
 8004698:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	08da      	lsrs	r2, r3, #3
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	3208      	adds	r2, #8
 80046a2:	6939      	ldr	r1, [r7, #16]
 80046a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	2203      	movs	r2, #3
 80046b4:	fa02 f303 	lsl.w	r3, r2, r3
 80046b8:	43db      	mvns	r3, r3
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4013      	ands	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	f003 0203 	and.w	r2, r3, #3
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	005b      	lsls	r3, r3, #1
 80046cc:	fa02 f303 	lsl.w	r3, r2, r3
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4313      	orrs	r3, r2
 80046d4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	f000 80ac 	beq.w	8004842 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80046ea:	4b5e      	ldr	r3, [pc, #376]	; (8004864 <HAL_GPIO_Init+0x32c>)
 80046ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046ee:	4a5d      	ldr	r2, [pc, #372]	; (8004864 <HAL_GPIO_Init+0x32c>)
 80046f0:	f043 0301 	orr.w	r3, r3, #1
 80046f4:	6613      	str	r3, [r2, #96]	; 0x60
 80046f6:	4b5b      	ldr	r3, [pc, #364]	; (8004864 <HAL_GPIO_Init+0x32c>)
 80046f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80046fa:	f003 0301 	and.w	r3, r3, #1
 80046fe:	60bb      	str	r3, [r7, #8]
 8004700:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004702:	4a59      	ldr	r2, [pc, #356]	; (8004868 <HAL_GPIO_Init+0x330>)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	089b      	lsrs	r3, r3, #2
 8004708:	3302      	adds	r3, #2
 800470a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800470e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	f003 0303 	and.w	r3, r3, #3
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	220f      	movs	r2, #15
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	43db      	mvns	r3, r3
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4013      	ands	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800472c:	d025      	beq.n	800477a <HAL_GPIO_Init+0x242>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a4e      	ldr	r2, [pc, #312]	; (800486c <HAL_GPIO_Init+0x334>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d01f      	beq.n	8004776 <HAL_GPIO_Init+0x23e>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a4d      	ldr	r2, [pc, #308]	; (8004870 <HAL_GPIO_Init+0x338>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d019      	beq.n	8004772 <HAL_GPIO_Init+0x23a>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a4c      	ldr	r2, [pc, #304]	; (8004874 <HAL_GPIO_Init+0x33c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d013      	beq.n	800476e <HAL_GPIO_Init+0x236>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a4b      	ldr	r2, [pc, #300]	; (8004878 <HAL_GPIO_Init+0x340>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d00d      	beq.n	800476a <HAL_GPIO_Init+0x232>
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	4a4a      	ldr	r2, [pc, #296]	; (800487c <HAL_GPIO_Init+0x344>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d007      	beq.n	8004766 <HAL_GPIO_Init+0x22e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a49      	ldr	r2, [pc, #292]	; (8004880 <HAL_GPIO_Init+0x348>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d101      	bne.n	8004762 <HAL_GPIO_Init+0x22a>
 800475e:	2306      	movs	r3, #6
 8004760:	e00c      	b.n	800477c <HAL_GPIO_Init+0x244>
 8004762:	2307      	movs	r3, #7
 8004764:	e00a      	b.n	800477c <HAL_GPIO_Init+0x244>
 8004766:	2305      	movs	r3, #5
 8004768:	e008      	b.n	800477c <HAL_GPIO_Init+0x244>
 800476a:	2304      	movs	r3, #4
 800476c:	e006      	b.n	800477c <HAL_GPIO_Init+0x244>
 800476e:	2303      	movs	r3, #3
 8004770:	e004      	b.n	800477c <HAL_GPIO_Init+0x244>
 8004772:	2302      	movs	r3, #2
 8004774:	e002      	b.n	800477c <HAL_GPIO_Init+0x244>
 8004776:	2301      	movs	r3, #1
 8004778:	e000      	b.n	800477c <HAL_GPIO_Init+0x244>
 800477a:	2300      	movs	r3, #0
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	f002 0203 	and.w	r2, r2, #3
 8004782:	0092      	lsls	r2, r2, #2
 8004784:	4093      	lsls	r3, r2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800478c:	4936      	ldr	r1, [pc, #216]	; (8004868 <HAL_GPIO_Init+0x330>)
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	089b      	lsrs	r3, r3, #2
 8004792:	3302      	adds	r3, #2
 8004794:	693a      	ldr	r2, [r7, #16]
 8004796:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800479a:	4b3a      	ldr	r3, [pc, #232]	; (8004884 <HAL_GPIO_Init+0x34c>)
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	43db      	mvns	r3, r3
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4013      	ands	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80047b6:	693a      	ldr	r2, [r7, #16]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	4313      	orrs	r3, r2
 80047bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80047be:	4a31      	ldr	r2, [pc, #196]	; (8004884 <HAL_GPIO_Init+0x34c>)
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80047c4:	4b2f      	ldr	r3, [pc, #188]	; (8004884 <HAL_GPIO_Init+0x34c>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	43db      	mvns	r3, r3
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4013      	ands	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d003      	beq.n	80047e8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80047e0:	693a      	ldr	r2, [r7, #16]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80047e8:	4a26      	ldr	r2, [pc, #152]	; (8004884 <HAL_GPIO_Init+0x34c>)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80047ee:	4b25      	ldr	r3, [pc, #148]	; (8004884 <HAL_GPIO_Init+0x34c>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	43db      	mvns	r3, r3
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	4013      	ands	r3, r2
 80047fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	4313      	orrs	r3, r2
 8004810:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004812:	4a1c      	ldr	r2, [pc, #112]	; (8004884 <HAL_GPIO_Init+0x34c>)
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004818:	4b1a      	ldr	r3, [pc, #104]	; (8004884 <HAL_GPIO_Init+0x34c>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	43db      	mvns	r3, r3
 8004822:	693a      	ldr	r2, [r7, #16]
 8004824:	4013      	ands	r3, r2
 8004826:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8004834:	693a      	ldr	r2, [r7, #16]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	4313      	orrs	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800483c:	4a11      	ldr	r2, [pc, #68]	; (8004884 <HAL_GPIO_Init+0x34c>)
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004842:	697b      	ldr	r3, [r7, #20]
 8004844:	3301      	adds	r3, #1
 8004846:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	fa22 f303 	lsr.w	r3, r2, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	f47f ae78 	bne.w	8004548 <HAL_GPIO_Init+0x10>
  }
}
 8004858:	bf00      	nop
 800485a:	bf00      	nop
 800485c:	371c      	adds	r7, #28
 800485e:	46bd      	mov	sp, r7
 8004860:	bc80      	pop	{r7}
 8004862:	4770      	bx	lr
 8004864:	40021000 	.word	0x40021000
 8004868:	40010000 	.word	0x40010000
 800486c:	48000400 	.word	0x48000400
 8004870:	48000800 	.word	0x48000800
 8004874:	48000c00 	.word	0x48000c00
 8004878:	48001000 	.word	0x48001000
 800487c:	48001400 	.word	0x48001400
 8004880:	48001800 	.word	0x48001800
 8004884:	40010400 	.word	0x40010400

08004888 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	460b      	mov	r3, r1
 8004892:	807b      	strh	r3, [r7, #2]
 8004894:	4613      	mov	r3, r2
 8004896:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004898:	787b      	ldrb	r3, [r7, #1]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d003      	beq.n	80048a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80048a4:	e002      	b.n	80048ac <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80048a6:	887a      	ldrh	r2, [r7, #2]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80048ac:	bf00      	nop
 80048ae:	370c      	adds	r7, #12
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bc80      	pop	{r7}
 80048b4:	4770      	bx	lr
	...

080048b8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048b8:	b480      	push	{r7}
 80048ba:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048bc:	4b03      	ldr	r3, [pc, #12]	; (80048cc <HAL_PWREx_GetVoltageRange+0x14>)
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bc80      	pop	{r7}
 80048ca:	4770      	bx	lr
 80048cc:	40007000 	.word	0x40007000

080048d0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b085      	sub	sp, #20
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048de:	d130      	bne.n	8004942 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048e0:	4b22      	ldr	r3, [pc, #136]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048ec:	d038      	beq.n	8004960 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048ee:	4b1f      	ldr	r3, [pc, #124]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048f6:	4a1d      	ldr	r2, [pc, #116]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 80048f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048fc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048fe:	4b1c      	ldr	r3, [pc, #112]	; (8004970 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2232      	movs	r2, #50	; 0x32
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	4a1a      	ldr	r2, [pc, #104]	; (8004974 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800490a:	fba2 2303 	umull	r2, r3, r2, r3
 800490e:	0c9b      	lsrs	r3, r3, #18
 8004910:	3301      	adds	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004914:	e002      	b.n	800491c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	3b01      	subs	r3, #1
 800491a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800491c:	4b13      	ldr	r3, [pc, #76]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800491e:	695b      	ldr	r3, [r3, #20]
 8004920:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004924:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004928:	d102      	bne.n	8004930 <HAL_PWREx_ControlVoltageScaling+0x60>
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d1f2      	bne.n	8004916 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004930:	4b0e      	ldr	r3, [pc, #56]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004938:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800493c:	d110      	bne.n	8004960 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800493e:	2303      	movs	r3, #3
 8004940:	e00f      	b.n	8004962 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004942:	4b0a      	ldr	r3, [pc, #40]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800494a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494e:	d007      	beq.n	8004960 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004950:	4b06      	ldr	r3, [pc, #24]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004958:	4a04      	ldr	r2, [pc, #16]	; (800496c <HAL_PWREx_ControlVoltageScaling+0x9c>)
 800495a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800495e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004960:	2300      	movs	r3, #0
}
 8004962:	4618      	mov	r0, r3
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr
 800496c:	40007000 	.word	0x40007000
 8004970:	20000000 	.word	0x20000000
 8004974:	431bde83 	.word	0x431bde83

08004978 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e3ca      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800498a:	4b97      	ldr	r3, [pc, #604]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004994:	4b94      	ldr	r3, [pc, #592]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80e4 	beq.w	8004b74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <HAL_RCC_OscConfig+0x4a>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	f040 808b 	bne.w	8004ad0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	f040 8087 	bne.w	8004ad0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049c2:	4b89      	ldr	r3, [pc, #548]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_RCC_OscConfig+0x62>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e3a2      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1a      	ldr	r2, [r3, #32]
 80049de:	4b82      	ldr	r3, [pc, #520]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <HAL_RCC_OscConfig+0x7c>
 80049ea:	4b7f      	ldr	r3, [pc, #508]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f2:	e005      	b.n	8004a00 <HAL_RCC_OscConfig+0x88>
 80049f4:	4b7c      	ldr	r3, [pc, #496]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d223      	bcs.n	8004a4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fd51 	bl	80054b0 <RCC_SetFlashLatencyFromMSIRange>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e383      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a18:	4b73      	ldr	r3, [pc, #460]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a72      	ldr	r2, [pc, #456]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	4b70      	ldr	r3, [pc, #448]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	496d      	ldr	r1, [pc, #436]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a36:	4b6c      	ldr	r3, [pc, #432]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	4968      	ldr	r1, [pc, #416]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	604b      	str	r3, [r1, #4]
 8004a4a:	e025      	b.n	8004a98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a4c:	4b66      	ldr	r3, [pc, #408]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a65      	ldr	r2, [pc, #404]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a52:	f043 0308 	orr.w	r3, r3, #8
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b63      	ldr	r3, [pc, #396]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	4960      	ldr	r1, [pc, #384]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a6a:	4b5f      	ldr	r3, [pc, #380]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	495b      	ldr	r1, [pc, #364]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fd11 	bl	80054b0 <RCC_SetFlashLatencyFromMSIRange>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e343      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a98:	f000 fc4a 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b52      	ldr	r3, [pc, #328]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	4950      	ldr	r1, [pc, #320]	; (8004bec <HAL_RCC_OscConfig+0x274>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab4:	4a4e      	ldr	r2, [pc, #312]	; (8004bf0 <HAL_RCC_OscConfig+0x278>)
 8004ab6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ab8:	4b4e      	ldr	r3, [pc, #312]	; (8004bf4 <HAL_RCC_OscConfig+0x27c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7ff fb7f 	bl	80041c0 <HAL_InitTick>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d052      	beq.n	8004b72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	e327      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d032      	beq.n	8004b3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ad8:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a42      	ldr	r2, [pc, #264]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ae4:	f7ff fbba 	bl	800425c <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aec:	f7ff fbb6 	bl	800425c <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e310      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004afe:	4b3a      	ldr	r3, [pc, #232]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b0a:	4b37      	ldr	r3, [pc, #220]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a36      	ldr	r2, [pc, #216]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b10:	f043 0308 	orr.w	r3, r3, #8
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b34      	ldr	r3, [pc, #208]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	4931      	ldr	r1, [pc, #196]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b28:	4b2f      	ldr	r3, [pc, #188]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	492c      	ldr	r1, [pc, #176]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]
 8004b3c:	e01a      	b.n	8004b74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b3e:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a29      	ldr	r2, [pc, #164]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b4a:	f7ff fb87 	bl	800425c <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b52:	f7ff fb83 	bl	800425c <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e2dd      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f0      	bne.n	8004b52 <HAL_RCC_OscConfig+0x1da>
 8004b70:	e000      	b.n	8004b74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d074      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d005      	beq.n	8004b92 <HAL_RCC_OscConfig+0x21a>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d10e      	bne.n	8004baa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d10b      	bne.n	8004baa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b92:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d064      	beq.n	8004c68 <HAL_RCC_OscConfig+0x2f0>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d160      	bne.n	8004c68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e2ba      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x24a>
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a0b      	ldr	r2, [pc, #44]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	e026      	b.n	8004c10 <HAL_RCC_OscConfig+0x298>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bca:	d115      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x280>
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a05      	ldr	r2, [pc, #20]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b03      	ldr	r3, [pc, #12]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a02      	ldr	r2, [pc, #8]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	e014      	b.n	8004c10 <HAL_RCC_OscConfig+0x298>
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	0800706c 	.word	0x0800706c
 8004bf0:	20000000 	.word	0x20000000
 8004bf4:	2000000c 	.word	0x2000000c
 8004bf8:	4ba0      	ldr	r3, [pc, #640]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a9f      	ldr	r2, [pc, #636]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b9d      	ldr	r3, [pc, #628]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a9c      	ldr	r2, [pc, #624]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d013      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7ff fb20 	bl	800425c <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7ff fb1c 	bl	800425c <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e276      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c32:	4b92      	ldr	r3, [pc, #584]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x2a8>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7ff fb0c 	bl	800425c <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7ff fb08 	bl	800425c <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e262      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c5a:	4b88      	ldr	r3, [pc, #544]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x2d0>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d060      	beq.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_OscConfig+0x310>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d119      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d116      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c88:	4b7c      	ldr	r3, [pc, #496]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x328>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e23f      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca0:	4b76      	ldr	r3, [pc, #472]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	061b      	lsls	r3, r3, #24
 8004cae:	4973      	ldr	r1, [pc, #460]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb4:	e040      	b.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d023      	beq.n	8004d06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cbe:	4b6f      	ldr	r3, [pc, #444]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a6e      	ldr	r2, [pc, #440]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7ff fac7 	bl	800425c <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd2:	f7ff fac3 	bl	800425c <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e21d      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce4:	4b65      	ldr	r3, [pc, #404]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b62      	ldr	r3, [pc, #392]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	495f      	ldr	r1, [pc, #380]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
 8004d04:	e018      	b.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d06:	4b5d      	ldr	r3, [pc, #372]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a5c      	ldr	r2, [pc, #368]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7ff faa3 	bl	800425c <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d1a:	f7ff fa9f 	bl	800425c <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e1f9      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d2c:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d03c      	beq.n	8004dbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01c      	beq.n	8004d86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4c:	4b4b      	ldr	r3, [pc, #300]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d52:	4a4a      	ldr	r2, [pc, #296]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7ff fa7e 	bl	800425c <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d64:	f7ff fa7a 	bl	800425c <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1d4      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d76:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ef      	beq.n	8004d64 <HAL_RCC_OscConfig+0x3ec>
 8004d84:	e01b      	b.n	8004dbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d86:	4b3d      	ldr	r3, [pc, #244]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8c:	4a3b      	ldr	r2, [pc, #236]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d96:	f7ff fa61 	bl	800425c <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9e:	f7ff fa5d 	bl	800425c <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e1b7      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004db0:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ef      	bne.n	8004d9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80a6 	beq.w	8004f18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10d      	bne.n	8004df8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de0:	4a26      	ldr	r2, [pc, #152]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de6:	6593      	str	r3, [r2, #88]	; 0x58
 8004de8:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df4:	2301      	movs	r3, #1
 8004df6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df8:	4b21      	ldr	r3, [pc, #132]	; (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d118      	bne.n	8004e36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e04:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e10:	f7ff fa24 	bl	800425c <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e18:	f7ff fa20 	bl	800425c <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e17a      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d108      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4d8>
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e4e:	e029      	b.n	8004ea4 <HAL_RCC_OscConfig+0x52c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	d115      	bne.n	8004e84 <HAL_RCC_OscConfig+0x50c>
 8004e58:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e60:	f043 0304 	orr.w	r3, r3, #4
 8004e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e68:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6e:	4a03      	ldr	r2, [pc, #12]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e78:	e014      	b.n	8004ea4 <HAL_RCC_OscConfig+0x52c>
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40007000 	.word	0x40007000
 8004e84:	4b9c      	ldr	r3, [pc, #624]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8a:	4a9b      	ldr	r2, [pc, #620]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e94:	4b98      	ldr	r3, [pc, #608]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	4a97      	ldr	r2, [pc, #604]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d016      	beq.n	8004eda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eac:	f7ff f9d6 	bl	800425c <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb4:	f7ff f9d2 	bl	800425c <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e12a      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eca:	4b8b      	ldr	r3, [pc, #556]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ed      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x53c>
 8004ed8:	e015      	b.n	8004f06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7ff f9bf 	bl	800425c <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7ff f9bb 	bl	800425c <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e113      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef8:	4b7f      	ldr	r3, [pc, #508]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ed      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f06:	7ffb      	ldrb	r3, [r7, #31]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0c:	4b7a      	ldr	r3, [pc, #488]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f10:	4a79      	ldr	r2, [pc, #484]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 80fe 	beq.w	800511e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	f040 80d0 	bne.w	80050cc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f2c:	4b72      	ldr	r3, [pc, #456]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f003 0203 	and.w	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d130      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d127      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d11f      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f6c:	2a07      	cmp	r2, #7
 8004f6e:	bf14      	ite	ne
 8004f70:	2201      	movne	r2, #1
 8004f72:	2200      	moveq	r2, #0
 8004f74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d113      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d109      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d06e      	beq.n	8005080 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d069      	beq.n	800507c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fa8:	4b53      	ldr	r3, [pc, #332]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fb4:	4b50      	ldr	r3, [pc, #320]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0ad      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fc4:	4b4c      	ldr	r3, [pc, #304]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a4b      	ldr	r2, [pc, #300]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fd0:	f7ff f944 	bl	800425c <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7ff f940 	bl	800425c <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e09a      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fea:	4b43      	ldr	r3, [pc, #268]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff6:	4b40      	ldr	r3, [pc, #256]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	4b40      	ldr	r3, [pc, #256]	; (80050fc <HAL_RCC_OscConfig+0x784>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005006:	3a01      	subs	r2, #1
 8005008:	0112      	lsls	r2, r2, #4
 800500a:	4311      	orrs	r1, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005010:	0212      	lsls	r2, r2, #8
 8005012:	4311      	orrs	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005018:	0852      	lsrs	r2, r2, #1
 800501a:	3a01      	subs	r2, #1
 800501c:	0552      	lsls	r2, r2, #21
 800501e:	4311      	orrs	r1, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005024:	0852      	lsrs	r2, r2, #1
 8005026:	3a01      	subs	r2, #1
 8005028:	0652      	lsls	r2, r2, #25
 800502a:	4311      	orrs	r1, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005030:	0912      	lsrs	r2, r2, #4
 8005032:	0452      	lsls	r2, r2, #17
 8005034:	430a      	orrs	r2, r1
 8005036:	4930      	ldr	r1, [pc, #192]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8005038:	4313      	orrs	r3, r2
 800503a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800503c:	4b2e      	ldr	r3, [pc, #184]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a2d      	ldr	r2, [pc, #180]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8005042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005046:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005048:	4b2b      	ldr	r3, [pc, #172]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	4a2a      	ldr	r2, [pc, #168]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 800504e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005052:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005054:	f7ff f902 	bl	800425c <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505c:	f7ff f8fe 	bl	800425c <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e058      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506e:	4b22      	ldr	r3, [pc, #136]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800507a:	e050      	b.n	800511e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e04f      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005080:	4b1d      	ldr	r3, [pc, #116]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d148      	bne.n	800511e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800508c:	4b1a      	ldr	r3, [pc, #104]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a19      	ldr	r2, [pc, #100]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 8005092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005096:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005098:	4b17      	ldr	r3, [pc, #92]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a16      	ldr	r2, [pc, #88]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 800509e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050a4:	f7ff f8da 	bl	800425c <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7ff f8d6 	bl	800425c <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e030      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050be:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x734>
 80050ca:	e028      	b.n	800511e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	2b0c      	cmp	r3, #12
 80050d0:	d023      	beq.n	800511a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d2:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a08      	ldr	r2, [pc, #32]	; (80050f8 <HAL_RCC_OscConfig+0x780>)
 80050d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050de:	f7ff f8bd 	bl	800425c <HAL_GetTick>
 80050e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80050e4:	e00c      	b.n	8005100 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050e6:	f7ff f8b9 	bl	800425c <HAL_GetTick>
 80050ea:	4602      	mov	r2, r0
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	1ad3      	subs	r3, r2, r3
 80050f0:	2b02      	cmp	r3, #2
 80050f2:	d905      	bls.n	8005100 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	e013      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
 80050f8:	40021000 	.word	0x40021000
 80050fc:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005100:	4b09      	ldr	r3, [pc, #36]	; (8005128 <HAL_RCC_OscConfig+0x7b0>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1ec      	bne.n	80050e6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800510c:	4b06      	ldr	r3, [pc, #24]	; (8005128 <HAL_RCC_OscConfig+0x7b0>)
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	4905      	ldr	r1, [pc, #20]	; (8005128 <HAL_RCC_OscConfig+0x7b0>)
 8005112:	4b06      	ldr	r3, [pc, #24]	; (800512c <HAL_RCC_OscConfig+0x7b4>)
 8005114:	4013      	ands	r3, r2
 8005116:	60cb      	str	r3, [r1, #12]
 8005118:	e001      	b.n	800511e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e000      	b.n	8005120 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800511e:	2300      	movs	r3, #0
}
 8005120:	4618      	mov	r0, r3
 8005122:	3720      	adds	r7, #32
 8005124:	46bd      	mov	sp, r7
 8005126:	bd80      	pop	{r7, pc}
 8005128:	40021000 	.word	0x40021000
 800512c:	feeefffc 	.word	0xfeeefffc

08005130 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b084      	sub	sp, #16
 8005134:	af00      	add	r7, sp, #0
 8005136:	6078      	str	r0, [r7, #4]
 8005138:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005140:	2301      	movs	r3, #1
 8005142:	e0e7      	b.n	8005314 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005144:	4b75      	ldr	r3, [pc, #468]	; (800531c <HAL_RCC_ClockConfig+0x1ec>)
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0307 	and.w	r3, r3, #7
 800514c:	683a      	ldr	r2, [r7, #0]
 800514e:	429a      	cmp	r2, r3
 8005150:	d910      	bls.n	8005174 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005152:	4b72      	ldr	r3, [pc, #456]	; (800531c <HAL_RCC_ClockConfig+0x1ec>)
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f023 0207 	bic.w	r2, r3, #7
 800515a:	4970      	ldr	r1, [pc, #448]	; (800531c <HAL_RCC_ClockConfig+0x1ec>)
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	4313      	orrs	r3, r2
 8005160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005162:	4b6e      	ldr	r3, [pc, #440]	; (800531c <HAL_RCC_ClockConfig+0x1ec>)
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f003 0307 	and.w	r3, r3, #7
 800516a:	683a      	ldr	r2, [r7, #0]
 800516c:	429a      	cmp	r2, r3
 800516e:	d001      	beq.n	8005174 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005170:	2301      	movs	r3, #1
 8005172:	e0cf      	b.n	8005314 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d010      	beq.n	80051a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	689a      	ldr	r2, [r3, #8]
 8005184:	4b66      	ldr	r3, [pc, #408]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 8005186:	689b      	ldr	r3, [r3, #8]
 8005188:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800518c:	429a      	cmp	r2, r3
 800518e:	d908      	bls.n	80051a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005190:	4b63      	ldr	r3, [pc, #396]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 8005192:	689b      	ldr	r3, [r3, #8]
 8005194:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4960      	ldr	r1, [pc, #384]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 800519e:	4313      	orrs	r3, r2
 80051a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f003 0301 	and.w	r3, r3, #1
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d04c      	beq.n	8005248 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	2b03      	cmp	r3, #3
 80051b4:	d107      	bne.n	80051c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051b6:	4b5a      	ldr	r3, [pc, #360]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d121      	bne.n	8005206 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e0a6      	b.n	8005314 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	2b02      	cmp	r3, #2
 80051cc:	d107      	bne.n	80051de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051ce:	4b54      	ldr	r3, [pc, #336]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d115      	bne.n	8005206 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051da:	2301      	movs	r3, #1
 80051dc:	e09a      	b.n	8005314 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d107      	bne.n	80051f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051e6:	4b4e      	ldr	r3, [pc, #312]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0302 	and.w	r3, r3, #2
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d109      	bne.n	8005206 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e08e      	b.n	8005314 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051f6:	4b4a      	ldr	r3, [pc, #296]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e086      	b.n	8005314 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005206:	4b46      	ldr	r3, [pc, #280]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	f023 0203 	bic.w	r2, r3, #3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	685b      	ldr	r3, [r3, #4]
 8005212:	4943      	ldr	r1, [pc, #268]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 8005214:	4313      	orrs	r3, r2
 8005216:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005218:	f7ff f820 	bl	800425c <HAL_GetTick>
 800521c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521e:	e00a      	b.n	8005236 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005220:	f7ff f81c 	bl	800425c <HAL_GetTick>
 8005224:	4602      	mov	r2, r0
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	1ad3      	subs	r3, r2, r3
 800522a:	f241 3288 	movw	r2, #5000	; 0x1388
 800522e:	4293      	cmp	r3, r2
 8005230:	d901      	bls.n	8005236 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8005232:	2303      	movs	r3, #3
 8005234:	e06e      	b.n	8005314 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005236:	4b3a      	ldr	r3, [pc, #232]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 8005238:	689b      	ldr	r3, [r3, #8]
 800523a:	f003 020c 	and.w	r2, r3, #12
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	009b      	lsls	r3, r3, #2
 8005244:	429a      	cmp	r2, r3
 8005246:	d1eb      	bne.n	8005220 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0302 	and.w	r3, r3, #2
 8005250:	2b00      	cmp	r3, #0
 8005252:	d010      	beq.n	8005276 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	689a      	ldr	r2, [r3, #8]
 8005258:	4b31      	ldr	r3, [pc, #196]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005260:	429a      	cmp	r2, r3
 8005262:	d208      	bcs.n	8005276 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005264:	4b2e      	ldr	r3, [pc, #184]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	492b      	ldr	r1, [pc, #172]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 8005272:	4313      	orrs	r3, r2
 8005274:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005276:	4b29      	ldr	r3, [pc, #164]	; (800531c <HAL_RCC_ClockConfig+0x1ec>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 0307 	and.w	r3, r3, #7
 800527e:	683a      	ldr	r2, [r7, #0]
 8005280:	429a      	cmp	r2, r3
 8005282:	d210      	bcs.n	80052a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005284:	4b25      	ldr	r3, [pc, #148]	; (800531c <HAL_RCC_ClockConfig+0x1ec>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f023 0207 	bic.w	r2, r3, #7
 800528c:	4923      	ldr	r1, [pc, #140]	; (800531c <HAL_RCC_ClockConfig+0x1ec>)
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	4313      	orrs	r3, r2
 8005292:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005294:	4b21      	ldr	r3, [pc, #132]	; (800531c <HAL_RCC_ClockConfig+0x1ec>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f003 0307 	and.w	r3, r3, #7
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	429a      	cmp	r2, r3
 80052a0:	d001      	beq.n	80052a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e036      	b.n	8005314 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f003 0304 	and.w	r3, r3, #4
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d008      	beq.n	80052c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052b2:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68db      	ldr	r3, [r3, #12]
 80052be:	4918      	ldr	r1, [pc, #96]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 80052c0:	4313      	orrs	r3, r2
 80052c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0308 	and.w	r3, r3, #8
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d009      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052d0:	4b13      	ldr	r3, [pc, #76]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	4910      	ldr	r1, [pc, #64]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 80052e0:	4313      	orrs	r3, r2
 80052e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052e4:	f000 f824 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 80052e8:	4602      	mov	r2, r0
 80052ea:	4b0d      	ldr	r3, [pc, #52]	; (8005320 <HAL_RCC_ClockConfig+0x1f0>)
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	091b      	lsrs	r3, r3, #4
 80052f0:	f003 030f 	and.w	r3, r3, #15
 80052f4:	490b      	ldr	r1, [pc, #44]	; (8005324 <HAL_RCC_ClockConfig+0x1f4>)
 80052f6:	5ccb      	ldrb	r3, [r1, r3]
 80052f8:	f003 031f 	and.w	r3, r3, #31
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
 8005300:	4a09      	ldr	r2, [pc, #36]	; (8005328 <HAL_RCC_ClockConfig+0x1f8>)
 8005302:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8005304:	4b09      	ldr	r3, [pc, #36]	; (800532c <HAL_RCC_ClockConfig+0x1fc>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4618      	mov	r0, r3
 800530a:	f7fe ff59 	bl	80041c0 <HAL_InitTick>
 800530e:	4603      	mov	r3, r0
 8005310:	72fb      	strb	r3, [r7, #11]

  return status;
 8005312:	7afb      	ldrb	r3, [r7, #11]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3710      	adds	r7, #16
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40022000 	.word	0x40022000
 8005320:	40021000 	.word	0x40021000
 8005324:	0800706c 	.word	0x0800706c
 8005328:	20000000 	.word	0x20000000
 800532c:	2000000c 	.word	0x2000000c

08005330 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005330:	b480      	push	{r7}
 8005332:	b089      	sub	sp, #36	; 0x24
 8005334:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	61fb      	str	r3, [r7, #28]
 800533a:	2300      	movs	r3, #0
 800533c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800533e:	4b3d      	ldr	r3, [pc, #244]	; (8005434 <HAL_RCC_GetSysClockFreq+0x104>)
 8005340:	689b      	ldr	r3, [r3, #8]
 8005342:	f003 030c 	and.w	r3, r3, #12
 8005346:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005348:	4b3a      	ldr	r3, [pc, #232]	; (8005434 <HAL_RCC_GetSysClockFreq+0x104>)
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0303 	and.w	r3, r3, #3
 8005350:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d005      	beq.n	8005364 <HAL_RCC_GetSysClockFreq+0x34>
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	2b0c      	cmp	r3, #12
 800535c:	d121      	bne.n	80053a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	2b01      	cmp	r3, #1
 8005362:	d11e      	bne.n	80053a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005364:	4b33      	ldr	r3, [pc, #204]	; (8005434 <HAL_RCC_GetSysClockFreq+0x104>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 0308 	and.w	r3, r3, #8
 800536c:	2b00      	cmp	r3, #0
 800536e:	d107      	bne.n	8005380 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005370:	4b30      	ldr	r3, [pc, #192]	; (8005434 <HAL_RCC_GetSysClockFreq+0x104>)
 8005372:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005376:	0a1b      	lsrs	r3, r3, #8
 8005378:	f003 030f 	and.w	r3, r3, #15
 800537c:	61fb      	str	r3, [r7, #28]
 800537e:	e005      	b.n	800538c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005380:	4b2c      	ldr	r3, [pc, #176]	; (8005434 <HAL_RCC_GetSysClockFreq+0x104>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	091b      	lsrs	r3, r3, #4
 8005386:	f003 030f 	and.w	r3, r3, #15
 800538a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800538c:	4a2a      	ldr	r2, [pc, #168]	; (8005438 <HAL_RCC_GetSysClockFreq+0x108>)
 800538e:	69fb      	ldr	r3, [r7, #28]
 8005390:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005394:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	2b00      	cmp	r3, #0
 800539a:	d10d      	bne.n	80053b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80053a0:	e00a      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	2b04      	cmp	r3, #4
 80053a6:	d102      	bne.n	80053ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80053a8:	4b24      	ldr	r3, [pc, #144]	; (800543c <HAL_RCC_GetSysClockFreq+0x10c>)
 80053aa:	61bb      	str	r3, [r7, #24]
 80053ac:	e004      	b.n	80053b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	2b08      	cmp	r3, #8
 80053b2:	d101      	bne.n	80053b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80053b4:	4b22      	ldr	r3, [pc, #136]	; (8005440 <HAL_RCC_GetSysClockFreq+0x110>)
 80053b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	2b0c      	cmp	r3, #12
 80053bc:	d134      	bne.n	8005428 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80053be:	4b1d      	ldr	r3, [pc, #116]	; (8005434 <HAL_RCC_GetSysClockFreq+0x104>)
 80053c0:	68db      	ldr	r3, [r3, #12]
 80053c2:	f003 0303 	and.w	r3, r3, #3
 80053c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d003      	beq.n	80053d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	2b03      	cmp	r3, #3
 80053d2:	d003      	beq.n	80053dc <HAL_RCC_GetSysClockFreq+0xac>
 80053d4:	e005      	b.n	80053e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053d6:	4b19      	ldr	r3, [pc, #100]	; (800543c <HAL_RCC_GetSysClockFreq+0x10c>)
 80053d8:	617b      	str	r3, [r7, #20]
      break;
 80053da:	e005      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053dc:	4b18      	ldr	r3, [pc, #96]	; (8005440 <HAL_RCC_GetSysClockFreq+0x110>)
 80053de:	617b      	str	r3, [r7, #20]
      break;
 80053e0:	e002      	b.n	80053e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	617b      	str	r3, [r7, #20]
      break;
 80053e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053e8:	4b12      	ldr	r3, [pc, #72]	; (8005434 <HAL_RCC_GetSysClockFreq+0x104>)
 80053ea:	68db      	ldr	r3, [r3, #12]
 80053ec:	091b      	lsrs	r3, r3, #4
 80053ee:	f003 0307 	and.w	r3, r3, #7
 80053f2:	3301      	adds	r3, #1
 80053f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053f6:	4b0f      	ldr	r3, [pc, #60]	; (8005434 <HAL_RCC_GetSysClockFreq+0x104>)
 80053f8:	68db      	ldr	r3, [r3, #12]
 80053fa:	0a1b      	lsrs	r3, r3, #8
 80053fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	fb03 f202 	mul.w	r2, r3, r2
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	fbb2 f3f3 	udiv	r3, r2, r3
 800540c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800540e:	4b09      	ldr	r3, [pc, #36]	; (8005434 <HAL_RCC_GetSysClockFreq+0x104>)
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	0e5b      	lsrs	r3, r3, #25
 8005414:	f003 0303 	and.w	r3, r3, #3
 8005418:	3301      	adds	r3, #1
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	fbb2 f3f3 	udiv	r3, r2, r3
 8005426:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005428:	69bb      	ldr	r3, [r7, #24]
}
 800542a:	4618      	mov	r0, r3
 800542c:	3724      	adds	r7, #36	; 0x24
 800542e:	46bd      	mov	sp, r7
 8005430:	bc80      	pop	{r7}
 8005432:	4770      	bx	lr
 8005434:	40021000 	.word	0x40021000
 8005438:	08007084 	.word	0x08007084
 800543c:	00f42400 	.word	0x00f42400
 8005440:	007a1200 	.word	0x007a1200

08005444 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005448:	4b02      	ldr	r3, [pc, #8]	; (8005454 <HAL_RCC_GetHCLKFreq+0x10>)
 800544a:	681b      	ldr	r3, [r3, #0]
}
 800544c:	4618      	mov	r0, r3
 800544e:	46bd      	mov	sp, r7
 8005450:	bc80      	pop	{r7}
 8005452:	4770      	bx	lr
 8005454:	20000000 	.word	0x20000000

08005458 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800545c:	f7ff fff2 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 8005460:	4602      	mov	r2, r0
 8005462:	4b06      	ldr	r3, [pc, #24]	; (800547c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	0a1b      	lsrs	r3, r3, #8
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	4904      	ldr	r1, [pc, #16]	; (8005480 <HAL_RCC_GetPCLK1Freq+0x28>)
 800546e:	5ccb      	ldrb	r3, [r1, r3]
 8005470:	f003 031f 	and.w	r3, r3, #31
 8005474:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005478:	4618      	mov	r0, r3
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40021000 	.word	0x40021000
 8005480:	0800707c 	.word	0x0800707c

08005484 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005488:	f7ff ffdc 	bl	8005444 <HAL_RCC_GetHCLKFreq>
 800548c:	4602      	mov	r2, r0
 800548e:	4b06      	ldr	r3, [pc, #24]	; (80054a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	0adb      	lsrs	r3, r3, #11
 8005494:	f003 0307 	and.w	r3, r3, #7
 8005498:	4904      	ldr	r1, [pc, #16]	; (80054ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800549a:	5ccb      	ldrb	r3, [r1, r3]
 800549c:	f003 031f 	and.w	r3, r3, #31
 80054a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40021000 	.word	0x40021000
 80054ac:	0800707c 	.word	0x0800707c

080054b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054b8:	2300      	movs	r3, #0
 80054ba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80054bc:	4b2a      	ldr	r3, [pc, #168]	; (8005568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d003      	beq.n	80054d0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80054c8:	f7ff f9f6 	bl	80048b8 <HAL_PWREx_GetVoltageRange>
 80054cc:	6178      	str	r0, [r7, #20]
 80054ce:	e014      	b.n	80054fa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80054d0:	4b25      	ldr	r3, [pc, #148]	; (8005568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054d4:	4a24      	ldr	r2, [pc, #144]	; (8005568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054da:	6593      	str	r3, [r2, #88]	; 0x58
 80054dc:	4b22      	ldr	r3, [pc, #136]	; (8005568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80054e8:	f7ff f9e6 	bl	80048b8 <HAL_PWREx_GetVoltageRange>
 80054ec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80054ee:	4b1e      	ldr	r3, [pc, #120]	; (8005568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f2:	4a1d      	ldr	r2, [pc, #116]	; (8005568 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80054f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054f8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005500:	d10b      	bne.n	800551a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2b80      	cmp	r3, #128	; 0x80
 8005506:	d919      	bls.n	800553c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2ba0      	cmp	r3, #160	; 0xa0
 800550c:	d902      	bls.n	8005514 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800550e:	2302      	movs	r3, #2
 8005510:	613b      	str	r3, [r7, #16]
 8005512:	e013      	b.n	800553c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005514:	2301      	movs	r3, #1
 8005516:	613b      	str	r3, [r7, #16]
 8005518:	e010      	b.n	800553c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2b80      	cmp	r3, #128	; 0x80
 800551e:	d902      	bls.n	8005526 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005520:	2303      	movs	r3, #3
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	e00a      	b.n	800553c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2b80      	cmp	r3, #128	; 0x80
 800552a:	d102      	bne.n	8005532 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800552c:	2302      	movs	r3, #2
 800552e:	613b      	str	r3, [r7, #16]
 8005530:	e004      	b.n	800553c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2b70      	cmp	r3, #112	; 0x70
 8005536:	d101      	bne.n	800553c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005538:	2301      	movs	r3, #1
 800553a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800553c:	4b0b      	ldr	r3, [pc, #44]	; (800556c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f023 0207 	bic.w	r2, r3, #7
 8005544:	4909      	ldr	r1, [pc, #36]	; (800556c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	4313      	orrs	r3, r2
 800554a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800554c:	4b07      	ldr	r3, [pc, #28]	; (800556c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f003 0307 	and.w	r3, r3, #7
 8005554:	693a      	ldr	r2, [r7, #16]
 8005556:	429a      	cmp	r2, r3
 8005558:	d001      	beq.n	800555e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800555a:	2301      	movs	r3, #1
 800555c:	e000      	b.n	8005560 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800555e:	2300      	movs	r3, #0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3718      	adds	r7, #24
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	40021000 	.word	0x40021000
 800556c:	40022000 	.word	0x40022000

08005570 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d101      	bne.n	8005582 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800557e:	2301      	movs	r3, #1
 8005580:	e095      	b.n	80056ae <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005586:	2b00      	cmp	r3, #0
 8005588:	d108      	bne.n	800559c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005592:	d009      	beq.n	80055a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	2200      	movs	r2, #0
 8005598:	61da      	str	r2, [r3, #28]
 800559a:	e005      	b.n	80055a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	2200      	movs	r2, #0
 80055a6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2200      	movs	r2, #0
 80055ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d106      	bne.n	80055c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2200      	movs	r2, #0
 80055be:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7fc f896 	bl	80016f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2202      	movs	r2, #2
 80055cc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055de:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	68db      	ldr	r3, [r3, #12]
 80055e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80055e8:	d902      	bls.n	80055f0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80055ea:	2300      	movs	r3, #0
 80055ec:	60fb      	str	r3, [r7, #12]
 80055ee:	e002      	b.n	80055f6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80055f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80055f4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80055fe:	d007      	beq.n	8005610 <HAL_SPI_Init+0xa0>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	68db      	ldr	r3, [r3, #12]
 8005604:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005608:	d002      	beq.n	8005610 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	685b      	ldr	r3, [r3, #4]
 8005614:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005620:	431a      	orrs	r2, r3
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	f003 0302 	and.w	r3, r3, #2
 800562a:	431a      	orrs	r2, r3
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	695b      	ldr	r3, [r3, #20]
 8005630:	f003 0301 	and.w	r3, r3, #1
 8005634:	431a      	orrs	r2, r3
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	699b      	ldr	r3, [r3, #24]
 800563a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800563e:	431a      	orrs	r2, r3
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	69db      	ldr	r3, [r3, #28]
 8005644:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005648:	431a      	orrs	r2, r3
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005652:	ea42 0103 	orr.w	r1, r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800565a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	430a      	orrs	r2, r1
 8005664:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	699b      	ldr	r3, [r3, #24]
 800566a:	0c1b      	lsrs	r3, r3, #16
 800566c:	f003 0204 	and.w	r2, r3, #4
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	431a      	orrs	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800567e:	f003 0308 	and.w	r3, r3, #8
 8005682:	431a      	orrs	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	68db      	ldr	r3, [r3, #12]
 8005688:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800568c:	ea42 0103 	orr.w	r1, r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	2200      	movs	r2, #0
 80056a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	3710      	adds	r7, #16
 80056b2:	46bd      	mov	sp, r7
 80056b4:	bd80      	pop	{r7, pc}

080056b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b6:	b580      	push	{r7, lr}
 80056b8:	b088      	sub	sp, #32
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	603b      	str	r3, [r7, #0]
 80056c2:	4613      	mov	r3, r2
 80056c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80056c6:	2300      	movs	r3, #0
 80056c8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d101      	bne.n	80056d8 <HAL_SPI_Transmit+0x22>
 80056d4:	2302      	movs	r3, #2
 80056d6:	e15f      	b.n	8005998 <HAL_SPI_Transmit+0x2e2>
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2201      	movs	r2, #1
 80056dc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80056e0:	f7fe fdbc 	bl	800425c <HAL_GetTick>
 80056e4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80056e6:	88fb      	ldrh	r3, [r7, #6]
 80056e8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b01      	cmp	r3, #1
 80056f4:	d002      	beq.n	80056fc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
 80056f8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80056fa:	e148      	b.n	800598e <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d002      	beq.n	8005708 <HAL_SPI_Transmit+0x52>
 8005702:	88fb      	ldrh	r3, [r7, #6]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005708:	2301      	movs	r3, #1
 800570a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800570c:	e13f      	b.n	800598e <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2203      	movs	r2, #3
 8005712:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2200      	movs	r2, #0
 800571a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	68ba      	ldr	r2, [r7, #8]
 8005720:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	88fa      	ldrh	r2, [r7, #6]
 8005726:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	88fa      	ldrh	r2, [r7, #6]
 800572c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2200      	movs	r2, #0
 8005732:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2200      	movs	r2, #0
 8005740:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2200      	movs	r2, #0
 800574e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005758:	d10f      	bne.n	800577a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681a      	ldr	r2, [r3, #0]
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005768:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005778:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	d007      	beq.n	8005798 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	681a      	ldr	r2, [r3, #0]
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005796:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	68db      	ldr	r3, [r3, #12]
 800579c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057a0:	d94f      	bls.n	8005842 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d002      	beq.n	80057b0 <HAL_SPI_Transmit+0xfa>
 80057aa:	8afb      	ldrh	r3, [r7, #22]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d142      	bne.n	8005836 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b4:	881a      	ldrh	r2, [r3, #0]
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057c0:	1c9a      	adds	r2, r3, #2
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057ca:	b29b      	uxth	r3, r3
 80057cc:	3b01      	subs	r3, #1
 80057ce:	b29a      	uxth	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80057d4:	e02f      	b.n	8005836 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	f003 0302 	and.w	r3, r3, #2
 80057e0:	2b02      	cmp	r3, #2
 80057e2:	d112      	bne.n	800580a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e8:	881a      	ldrh	r2, [r3, #0]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	1c9a      	adds	r2, r3, #2
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057fe:	b29b      	uxth	r3, r3
 8005800:	3b01      	subs	r3, #1
 8005802:	b29a      	uxth	r2, r3
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005808:	e015      	b.n	8005836 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800580a:	f7fe fd27 	bl	800425c <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	69bb      	ldr	r3, [r7, #24]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d803      	bhi.n	8005822 <HAL_SPI_Transmit+0x16c>
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d102      	bne.n	8005828 <HAL_SPI_Transmit+0x172>
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d106      	bne.n	8005836 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8005828:	2303      	movs	r3, #3
 800582a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2201      	movs	r2, #1
 8005830:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005834:	e0ab      	b.n	800598e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800583a:	b29b      	uxth	r3, r3
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1ca      	bne.n	80057d6 <HAL_SPI_Transmit+0x120>
 8005840:	e080      	b.n	8005944 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	2b00      	cmp	r3, #0
 8005848:	d002      	beq.n	8005850 <HAL_SPI_Transmit+0x19a>
 800584a:	8afb      	ldrh	r3, [r7, #22]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d174      	bne.n	800593a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005854:	b29b      	uxth	r3, r3
 8005856:	2b01      	cmp	r3, #1
 8005858:	d912      	bls.n	8005880 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585e:	881a      	ldrh	r2, [r3, #0]
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800586a:	1c9a      	adds	r2, r3, #2
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005874:	b29b      	uxth	r3, r3
 8005876:	3b02      	subs	r3, #2
 8005878:	b29a      	uxth	r2, r3
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	87da      	strh	r2, [r3, #62]	; 0x3e
 800587e:	e05c      	b.n	800593a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	7812      	ldrb	r2, [r2, #0]
 800588c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005892:	1c5a      	adds	r2, r3, #1
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800589c:	b29b      	uxth	r3, r3
 800589e:	3b01      	subs	r3, #1
 80058a0:	b29a      	uxth	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80058a6:	e048      	b.n	800593a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d12b      	bne.n	800590e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058ba:	b29b      	uxth	r3, r3
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d912      	bls.n	80058e6 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c4:	881a      	ldrh	r2, [r3, #0]
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	1c9a      	adds	r2, r3, #2
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058da:	b29b      	uxth	r3, r3
 80058dc:	3b02      	subs	r3, #2
 80058de:	b29a      	uxth	r2, r3
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	87da      	strh	r2, [r3, #62]	; 0x3e
 80058e4:	e029      	b.n	800593a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	330c      	adds	r3, #12
 80058f0:	7812      	ldrb	r2, [r2, #0]
 80058f2:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f8:	1c5a      	adds	r2, r3, #1
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005902:	b29b      	uxth	r3, r3
 8005904:	3b01      	subs	r3, #1
 8005906:	b29a      	uxth	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800590c:	e015      	b.n	800593a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800590e:	f7fe fca5 	bl	800425c <HAL_GetTick>
 8005912:	4602      	mov	r2, r0
 8005914:	69bb      	ldr	r3, [r7, #24]
 8005916:	1ad3      	subs	r3, r2, r3
 8005918:	683a      	ldr	r2, [r7, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d803      	bhi.n	8005926 <HAL_SPI_Transmit+0x270>
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d102      	bne.n	800592c <HAL_SPI_Transmit+0x276>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d106      	bne.n	800593a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 800592c:	2303      	movs	r3, #3
 800592e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005938:	e029      	b.n	800598e <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800593e:	b29b      	uxth	r3, r3
 8005940:	2b00      	cmp	r3, #0
 8005942:	d1b1      	bne.n	80058a8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005944:	69ba      	ldr	r2, [r7, #24]
 8005946:	6839      	ldr	r1, [r7, #0]
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	f000 fcf9 	bl	8006340 <SPI_EndRxTxTransaction>
 800594e:	4603      	mov	r3, r0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d002      	beq.n	800595a <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	2220      	movs	r2, #32
 8005958:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005962:	2300      	movs	r3, #0
 8005964:	613b      	str	r3, [r7, #16]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68db      	ldr	r3, [r3, #12]
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8005980:	2301      	movs	r3, #1
 8005982:	77fb      	strb	r3, [r7, #31]
 8005984:	e003      	b.n	800598e <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2201      	movs	r2, #1
 800598a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	2200      	movs	r2, #0
 8005992:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005996:	7ffb      	ldrb	r3, [r7, #31]
}
 8005998:	4618      	mov	r0, r3
 800599a:	3720      	adds	r7, #32
 800599c:	46bd      	mov	sp, r7
 800599e:	bd80      	pop	{r7, pc}

080059a0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b088      	sub	sp, #32
 80059a4:	af02      	add	r7, sp, #8
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	603b      	str	r3, [r7, #0]
 80059ac:	4613      	mov	r3, r2
 80059ae:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	2b01      	cmp	r3, #1
 80059be:	d002      	beq.n	80059c6 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 80059c0:	2302      	movs	r3, #2
 80059c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80059c4:	e11a      	b.n	8005bfc <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ce:	d112      	bne.n	80059f6 <HAL_SPI_Receive+0x56>
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10e      	bne.n	80059f6 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2204      	movs	r2, #4
 80059dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80059e0:	88fa      	ldrh	r2, [r7, #6]
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	9300      	str	r3, [sp, #0]
 80059e6:	4613      	mov	r3, r2
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	68f8      	ldr	r0, [r7, #12]
 80059ee:	f000 f90e 	bl	8005c0e <HAL_SPI_TransmitReceive>
 80059f2:	4603      	mov	r3, r0
 80059f4:	e107      	b.n	8005c06 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80059fc:	2b01      	cmp	r3, #1
 80059fe:	d101      	bne.n	8005a04 <HAL_SPI_Receive+0x64>
 8005a00:	2302      	movs	r3, #2
 8005a02:	e100      	b.n	8005c06 <HAL_SPI_Receive+0x266>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005a0c:	f7fe fc26 	bl	800425c <HAL_GetTick>
 8005a10:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <HAL_SPI_Receive+0x7e>
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d102      	bne.n	8005a24 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
    goto error;
 8005a22:	e0eb      	b.n	8005bfc <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2204      	movs	r2, #4
 8005a28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	68ba      	ldr	r2, [r7, #8]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	88fa      	ldrh	r2, [r7, #6]
 8005a3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	88fa      	ldrh	r2, [r7, #6]
 8005a44:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2200      	movs	r2, #0
 8005a64:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	68db      	ldr	r3, [r3, #12]
 8005a6a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a6e:	d908      	bls.n	8005a82 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	685a      	ldr	r2, [r3, #4]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005a7e:	605a      	str	r2, [r3, #4]
 8005a80:	e007      	b.n	8005a92 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685a      	ldr	r2, [r3, #4]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005a90:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9a:	d10f      	bne.n	8005abc <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005aaa:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005aba:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac6:	2b40      	cmp	r3, #64	; 0x40
 8005ac8:	d007      	beq.n	8005ada <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005ad8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	68db      	ldr	r3, [r3, #12]
 8005ade:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ae2:	d86f      	bhi.n	8005bc4 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005ae4:	e034      	b.n	8005b50 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f003 0301 	and.w	r3, r3, #1
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d117      	bne.n	8005b24 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	f103 020c 	add.w	r2, r3, #12
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b00:	7812      	ldrb	r2, [r2, #0]
 8005b02:	b2d2      	uxtb	r2, r2
 8005b04:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0a:	1c5a      	adds	r2, r3, #1
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	3b01      	subs	r3, #1
 8005b1a:	b29a      	uxth	r2, r3
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b22:	e015      	b.n	8005b50 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b24:	f7fe fb9a 	bl	800425c <HAL_GetTick>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	693b      	ldr	r3, [r7, #16]
 8005b2c:	1ad3      	subs	r3, r2, r3
 8005b2e:	683a      	ldr	r2, [r7, #0]
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d803      	bhi.n	8005b3c <HAL_SPI_Receive+0x19c>
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3a:	d102      	bne.n	8005b42 <HAL_SPI_Receive+0x1a2>
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d106      	bne.n	8005b50 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8005b42:	2303      	movs	r3, #3
 8005b44:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	2201      	movs	r2, #1
 8005b4a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005b4e:	e055      	b.n	8005bfc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b56:	b29b      	uxth	r3, r3
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d1c4      	bne.n	8005ae6 <HAL_SPI_Receive+0x146>
 8005b5c:	e038      	b.n	8005bd0 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f003 0301 	and.w	r3, r3, #1
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d115      	bne.n	8005b98 <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	68da      	ldr	r2, [r3, #12]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b76:	b292      	uxth	r2, r2
 8005b78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b7e:	1c9a      	adds	r2, r3, #2
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	3b01      	subs	r3, #1
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005b96:	e015      	b.n	8005bc4 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005b98:	f7fe fb60 	bl	800425c <HAL_GetTick>
 8005b9c:	4602      	mov	r2, r0
 8005b9e:	693b      	ldr	r3, [r7, #16]
 8005ba0:	1ad3      	subs	r3, r2, r3
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d803      	bhi.n	8005bb0 <HAL_SPI_Receive+0x210>
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bae:	d102      	bne.n	8005bb6 <HAL_SPI_Receive+0x216>
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d106      	bne.n	8005bc4 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8005bb6:	2303      	movs	r3, #3
 8005bb8:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2201      	movs	r2, #1
 8005bbe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8005bc2:	e01b      	b.n	8005bfc <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1c6      	bne.n	8005b5e <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005bd0:	693a      	ldr	r2, [r7, #16]
 8005bd2:	6839      	ldr	r1, [r7, #0]
 8005bd4:	68f8      	ldr	r0, [r7, #12]
 8005bd6:	f000 fb5b 	bl	8006290 <SPI_EndRxTransaction>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	2220      	movs	r2, #32
 8005be4:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	75fb      	strb	r3, [r7, #23]
 8005bf2:	e003      	b.n	8005bfc <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2201      	movs	r2, #1
 8005bf8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005c04:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b08a      	sub	sp, #40	; 0x28
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	60f8      	str	r0, [r7, #12]
 8005c16:	60b9      	str	r1, [r7, #8]
 8005c18:	607a      	str	r2, [r7, #4]
 8005c1a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005c20:	2300      	movs	r3, #0
 8005c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005c2c:	2b01      	cmp	r3, #1
 8005c2e:	d101      	bne.n	8005c34 <HAL_SPI_TransmitReceive+0x26>
 8005c30:	2302      	movs	r3, #2
 8005c32:	e20a      	b.n	800604a <HAL_SPI_TransmitReceive+0x43c>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005c3c:	f7fe fb0e 	bl	800425c <HAL_GetTick>
 8005c40:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c48:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005c50:	887b      	ldrh	r3, [r7, #2]
 8005c52:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8005c54:	887b      	ldrh	r3, [r7, #2]
 8005c56:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005c58:	7efb      	ldrb	r3, [r7, #27]
 8005c5a:	2b01      	cmp	r3, #1
 8005c5c:	d00e      	beq.n	8005c7c <HAL_SPI_TransmitReceive+0x6e>
 8005c5e:	697b      	ldr	r3, [r7, #20]
 8005c60:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c64:	d106      	bne.n	8005c74 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d102      	bne.n	8005c74 <HAL_SPI_TransmitReceive+0x66>
 8005c6e:	7efb      	ldrb	r3, [r7, #27]
 8005c70:	2b04      	cmp	r3, #4
 8005c72:	d003      	beq.n	8005c7c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8005c74:	2302      	movs	r3, #2
 8005c76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c7a:	e1e0      	b.n	800603e <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_SPI_TransmitReceive+0x80>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d002      	beq.n	8005c8e <HAL_SPI_TransmitReceive+0x80>
 8005c88:	887b      	ldrh	r3, [r7, #2]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d103      	bne.n	8005c96 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8005c94:	e1d3      	b.n	800603e <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	2b04      	cmp	r3, #4
 8005ca0:	d003      	beq.n	8005caa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	2205      	movs	r2, #5
 8005ca6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2200      	movs	r2, #0
 8005cae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	687a      	ldr	r2, [r7, #4]
 8005cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	887a      	ldrh	r2, [r7, #2]
 8005cba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	887a      	ldrh	r2, [r7, #2]
 8005cc2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	68ba      	ldr	r2, [r7, #8]
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	887a      	ldrh	r2, [r7, #2]
 8005cd0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	887a      	ldrh	r2, [r7, #2]
 8005cd6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	68db      	ldr	r3, [r3, #12]
 8005ce8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005cec:	d802      	bhi.n	8005cf4 <HAL_SPI_TransmitReceive+0xe6>
 8005cee:	8a3b      	ldrh	r3, [r7, #16]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d908      	bls.n	8005d06 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	685a      	ldr	r2, [r3, #4]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d02:	605a      	str	r2, [r3, #4]
 8005d04:	e007      	b.n	8005d16 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685a      	ldr	r2, [r3, #4]
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d14:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d20:	2b40      	cmp	r3, #64	; 0x40
 8005d22:	d007      	beq.n	8005d34 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	68db      	ldr	r3, [r3, #12]
 8005d38:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d3c:	f240 8081 	bls.w	8005e42 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d002      	beq.n	8005d4e <HAL_SPI_TransmitReceive+0x140>
 8005d48:	8a7b      	ldrh	r3, [r7, #18]
 8005d4a:	2b01      	cmp	r3, #1
 8005d4c:	d16d      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d52:	881a      	ldrh	r2, [r3, #0]
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	1c9a      	adds	r2, r3, #2
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	3b01      	subs	r3, #1
 8005d6c:	b29a      	uxth	r2, r3
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005d72:	e05a      	b.n	8005e2a <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 0302 	and.w	r3, r3, #2
 8005d7e:	2b02      	cmp	r3, #2
 8005d80:	d11b      	bne.n	8005dba <HAL_SPI_TransmitReceive+0x1ac>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d86:	b29b      	uxth	r3, r3
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d016      	beq.n	8005dba <HAL_SPI_TransmitReceive+0x1ac>
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d113      	bne.n	8005dba <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d96:	881a      	ldrh	r2, [r3, #0]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	1c9a      	adds	r2, r3, #2
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	3b01      	subs	r3, #1
 8005db0:	b29a      	uxth	r2, r3
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f003 0301 	and.w	r3, r3, #1
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d11c      	bne.n	8005e02 <HAL_SPI_TransmitReceive+0x1f4>
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d016      	beq.n	8005e02 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	b292      	uxth	r2, r2
 8005de0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de6:	1c9a      	adds	r2, r3, #2
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	3b01      	subs	r3, #1
 8005df6:	b29a      	uxth	r2, r3
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005e02:	f7fe fa2b 	bl	800425c <HAL_GetTick>
 8005e06:	4602      	mov	r2, r0
 8005e08:	69fb      	ldr	r3, [r7, #28]
 8005e0a:	1ad3      	subs	r3, r2, r3
 8005e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d80b      	bhi.n	8005e2a <HAL_SPI_TransmitReceive+0x21c>
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d007      	beq.n	8005e2a <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 8005e1a:	2303      	movs	r3, #3
 8005e1c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005e28:	e109      	b.n	800603e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d19f      	bne.n	8005d74 <HAL_SPI_TransmitReceive+0x166>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d199      	bne.n	8005d74 <HAL_SPI_TransmitReceive+0x166>
 8005e40:	e0e3      	b.n	800600a <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d003      	beq.n	8005e52 <HAL_SPI_TransmitReceive+0x244>
 8005e4a:	8a7b      	ldrh	r3, [r7, #18]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	f040 80cf 	bne.w	8005ff0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d912      	bls.n	8005e82 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e60:	881a      	ldrh	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e6c:	1c9a      	adds	r2, r3, #2
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e76:	b29b      	uxth	r3, r3
 8005e78:	3b02      	subs	r3, #2
 8005e7a:	b29a      	uxth	r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005e80:	e0b6      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	330c      	adds	r3, #12
 8005e8c:	7812      	ldrb	r2, [r2, #0]
 8005e8e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	1c5a      	adds	r2, r3, #1
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005e9e:	b29b      	uxth	r3, r3
 8005ea0:	3b01      	subs	r3, #1
 8005ea2:	b29a      	uxth	r2, r3
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ea8:	e0a2      	b.n	8005ff0 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	f003 0302 	and.w	r3, r3, #2
 8005eb4:	2b02      	cmp	r3, #2
 8005eb6:	d134      	bne.n	8005f22 <HAL_SPI_TransmitReceive+0x314>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d02f      	beq.n	8005f22 <HAL_SPI_TransmitReceive+0x314>
 8005ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d12c      	bne.n	8005f22 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d912      	bls.n	8005ef8 <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed6:	881a      	ldrh	r2, [r3, #0]
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ee2:	1c9a      	adds	r2, r3, #2
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	3b02      	subs	r3, #2
 8005ef0:	b29a      	uxth	r2, r3
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005ef6:	e012      	b.n	8005f1e <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	330c      	adds	r3, #12
 8005f02:	7812      	ldrb	r2, [r2, #0]
 8005f04:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0a:	1c5a      	adds	r2, r3, #1
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	3b01      	subs	r3, #1
 8005f18:	b29a      	uxth	r2, r3
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	f003 0301 	and.w	r3, r3, #1
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d148      	bne.n	8005fc2 <HAL_SPI_TransmitReceive+0x3b4>
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f36:	b29b      	uxth	r3, r3
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d042      	beq.n	8005fc2 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f42:	b29b      	uxth	r3, r3
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d923      	bls.n	8005f90 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68da      	ldr	r2, [r3, #12]
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f52:	b292      	uxth	r2, r2
 8005f54:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f5a:	1c9a      	adds	r2, r3, #2
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b02      	subs	r3, #2
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	2b01      	cmp	r3, #1
 8005f7c:	d81f      	bhi.n	8005fbe <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	685a      	ldr	r2, [r3, #4]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005f8c:	605a      	str	r2, [r3, #4]
 8005f8e:	e016      	b.n	8005fbe <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f103 020c 	add.w	r2, r3, #12
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9c:	7812      	ldrb	r2, [r2, #0]
 8005f9e:	b2d2      	uxtb	r2, r2
 8005fa0:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fa6:	1c5a      	adds	r2, r3, #1
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fc2:	f7fe f94b 	bl	800425c <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	d803      	bhi.n	8005fda <HAL_SPI_TransmitReceive+0x3cc>
 8005fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd8:	d102      	bne.n	8005fe0 <HAL_SPI_TransmitReceive+0x3d2>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d107      	bne.n	8005ff0 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 8005fe0:	2303      	movs	r3, #3
 8005fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 8005fee:	e026      	b.n	800603e <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	f47f af57 	bne.w	8005eaa <HAL_SPI_TransmitReceive+0x29c>
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006002:	b29b      	uxth	r3, r3
 8006004:	2b00      	cmp	r3, #0
 8006006:	f47f af50 	bne.w	8005eaa <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800600a:	69fa      	ldr	r2, [r7, #28]
 800600c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	f000 f996 	bl	8006340 <SPI_EndRxTxTransaction>
 8006014:	4603      	mov	r3, r0
 8006016:	2b00      	cmp	r3, #0
 8006018:	d005      	beq.n	8006026 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 800601a:	2301      	movs	r3, #1
 800601c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006034:	e003      	b.n	800603e <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006046:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800604a:	4618      	mov	r0, r3
 800604c:	3728      	adds	r7, #40	; 0x28
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4613      	mov	r3, r2
 8006062:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006064:	f7fe f8fa 	bl	800425c <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800606c:	1a9b      	subs	r3, r3, r2
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	4413      	add	r3, r2
 8006072:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006074:	f7fe f8f2 	bl	800425c <HAL_GetTick>
 8006078:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800607a:	4b39      	ldr	r3, [pc, #228]	; (8006160 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	015b      	lsls	r3, r3, #5
 8006080:	0d1b      	lsrs	r3, r3, #20
 8006082:	69fa      	ldr	r2, [r7, #28]
 8006084:	fb02 f303 	mul.w	r3, r2, r3
 8006088:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800608a:	e054      	b.n	8006136 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006092:	d050      	beq.n	8006136 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006094:	f7fe f8e2 	bl	800425c <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	69bb      	ldr	r3, [r7, #24]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	69fa      	ldr	r2, [r7, #28]
 80060a0:	429a      	cmp	r2, r3
 80060a2:	d902      	bls.n	80060aa <SPI_WaitFlagStateUntilTimeout+0x56>
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d13d      	bne.n	8006126 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	685a      	ldr	r2, [r3, #4]
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060b8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060c2:	d111      	bne.n	80060e8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	689b      	ldr	r3, [r3, #8]
 80060c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060cc:	d004      	beq.n	80060d8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060d6:	d107      	bne.n	80060e8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	681a      	ldr	r2, [r3, #0]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060f0:	d10f      	bne.n	8006112 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006110:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006122:	2303      	movs	r3, #3
 8006124:	e017      	b.n	8006156 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d101      	bne.n	8006130 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800612c:	2300      	movs	r3, #0
 800612e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006130:	697b      	ldr	r3, [r7, #20]
 8006132:	3b01      	subs	r3, #1
 8006134:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689a      	ldr	r2, [r3, #8]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	4013      	ands	r3, r2
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	429a      	cmp	r2, r3
 8006144:	bf0c      	ite	eq
 8006146:	2301      	moveq	r3, #1
 8006148:	2300      	movne	r3, #0
 800614a:	b2db      	uxtb	r3, r3
 800614c:	461a      	mov	r2, r3
 800614e:	79fb      	ldrb	r3, [r7, #7]
 8006150:	429a      	cmp	r2, r3
 8006152:	d19b      	bne.n	800608c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3720      	adds	r7, #32
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	20000000 	.word	0x20000000

08006164 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b08a      	sub	sp, #40	; 0x28
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
 8006170:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006172:	2300      	movs	r3, #0
 8006174:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006176:	f7fe f871 	bl	800425c <HAL_GetTick>
 800617a:	4602      	mov	r2, r0
 800617c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617e:	1a9b      	subs	r3, r3, r2
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	4413      	add	r3, r2
 8006184:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006186:	f7fe f869 	bl	800425c <HAL_GetTick>
 800618a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	330c      	adds	r3, #12
 8006192:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006194:	4b3d      	ldr	r3, [pc, #244]	; (800628c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	4613      	mov	r3, r2
 800619a:	009b      	lsls	r3, r3, #2
 800619c:	4413      	add	r3, r2
 800619e:	00da      	lsls	r2, r3, #3
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	0d1b      	lsrs	r3, r3, #20
 80061a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061a6:	fb02 f303 	mul.w	r3, r2, r3
 80061aa:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80061ac:	e060      	b.n	8006270 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80061b4:	d107      	bne.n	80061c6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d104      	bne.n	80061c6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	781b      	ldrb	r3, [r3, #0]
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80061c4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061cc:	d050      	beq.n	8006270 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80061ce:	f7fe f845 	bl	800425c <HAL_GetTick>
 80061d2:	4602      	mov	r2, r0
 80061d4:	6a3b      	ldr	r3, [r7, #32]
 80061d6:	1ad3      	subs	r3, r2, r3
 80061d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061da:	429a      	cmp	r2, r3
 80061dc:	d902      	bls.n	80061e4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80061de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d13d      	bne.n	8006260 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	685a      	ldr	r2, [r3, #4]
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80061f2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80061fc:	d111      	bne.n	8006222 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006206:	d004      	beq.n	8006212 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006210:	d107      	bne.n	8006222 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	681a      	ldr	r2, [r3, #0]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006220:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006226:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800622a:	d10f      	bne.n	800624c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800623a:	601a      	str	r2, [r3, #0]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800624a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	e010      	b.n	8006282 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006260:	69bb      	ldr	r3, [r7, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d101      	bne.n	800626a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006266:	2300      	movs	r3, #0
 8006268:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	3b01      	subs	r3, #1
 800626e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	689a      	ldr	r2, [r3, #8]
 8006276:	68bb      	ldr	r3, [r7, #8]
 8006278:	4013      	ands	r3, r2
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	429a      	cmp	r2, r3
 800627e:	d196      	bne.n	80061ae <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006280:	2300      	movs	r3, #0
}
 8006282:	4618      	mov	r0, r3
 8006284:	3728      	adds	r7, #40	; 0x28
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}
 800628a:	bf00      	nop
 800628c:	20000000 	.word	0x20000000

08006290 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b086      	sub	sp, #24
 8006294:	af02      	add	r7, sp, #8
 8006296:	60f8      	str	r0, [r7, #12]
 8006298:	60b9      	str	r1, [r7, #8]
 800629a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062a4:	d111      	bne.n	80062ca <SPI_EndRxTransaction+0x3a>
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	689b      	ldr	r3, [r3, #8]
 80062aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062ae:	d004      	beq.n	80062ba <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	689b      	ldr	r3, [r3, #8]
 80062b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b8:	d107      	bne.n	80062ca <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062c8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	9300      	str	r3, [sp, #0]
 80062ce:	68bb      	ldr	r3, [r7, #8]
 80062d0:	2200      	movs	r2, #0
 80062d2:	2180      	movs	r1, #128	; 0x80
 80062d4:	68f8      	ldr	r0, [r7, #12]
 80062d6:	f7ff febd 	bl	8006054 <SPI_WaitFlagStateUntilTimeout>
 80062da:	4603      	mov	r3, r0
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d007      	beq.n	80062f0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80062ec:	2303      	movs	r3, #3
 80062ee:	e023      	b.n	8006338 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062f8:	d11d      	bne.n	8006336 <SPI_EndRxTransaction+0xa6>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006302:	d004      	beq.n	800630e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800630c:	d113      	bne.n	8006336 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	9300      	str	r3, [sp, #0]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	2200      	movs	r2, #0
 8006316:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800631a:	68f8      	ldr	r0, [r7, #12]
 800631c:	f7ff ff22 	bl	8006164 <SPI_WaitFifoStateUntilTimeout>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d007      	beq.n	8006336 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800632a:	f043 0220 	orr.w	r2, r3, #32
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006332:	2303      	movs	r3, #3
 8006334:	e000      	b.n	8006338 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af02      	add	r7, sp, #8
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	9300      	str	r3, [sp, #0]
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	2200      	movs	r2, #0
 8006354:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006358:	68f8      	ldr	r0, [r7, #12]
 800635a:	f7ff ff03 	bl	8006164 <SPI_WaitFifoStateUntilTimeout>
 800635e:	4603      	mov	r3, r0
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006368:	f043 0220 	orr.w	r2, r3, #32
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006370:	2303      	movs	r3, #3
 8006372:	e027      	b.n	80063c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	9300      	str	r3, [sp, #0]
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	2200      	movs	r2, #0
 800637c:	2180      	movs	r1, #128	; 0x80
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f7ff fe68 	bl	8006054 <SPI_WaitFlagStateUntilTimeout>
 8006384:	4603      	mov	r3, r0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d007      	beq.n	800639a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800638e:	f043 0220 	orr.w	r2, r3, #32
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006396:	2303      	movs	r3, #3
 8006398:	e014      	b.n	80063c4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80063a6:	68f8      	ldr	r0, [r7, #12]
 80063a8:	f7ff fedc 	bl	8006164 <SPI_WaitFifoStateUntilTimeout>
 80063ac:	4603      	mov	r3, r0
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d007      	beq.n	80063c2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b6:	f043 0220 	orr.w	r2, r3, #32
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e000      	b.n	80063c4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b082      	sub	sp, #8
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d101      	bne.n	80063de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80063da:	2301      	movs	r3, #1
 80063dc:	e040      	b.n	8006460 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d106      	bne.n	80063f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80063ee:	6878      	ldr	r0, [r7, #4]
 80063f0:	f7fb fb08 	bl	8001a04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2224      	movs	r2, #36	; 0x24
 80063f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f022 0201 	bic.w	r2, r2, #1
 8006408:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800640e:	2b00      	cmp	r3, #0
 8006410:	d002      	beq.n	8006418 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 fb6a 	bl	8006aec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f8af 	bl	800657c <UART_SetConfig>
 800641e:	4603      	mov	r3, r0
 8006420:	2b01      	cmp	r3, #1
 8006422:	d101      	bne.n	8006428 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8006424:	2301      	movs	r3, #1
 8006426:	e01b      	b.n	8006460 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006436:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	689a      	ldr	r2, [r3, #8]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006446:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	681a      	ldr	r2, [r3, #0]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f042 0201 	orr.w	r2, r2, #1
 8006456:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006458:	6878      	ldr	r0, [r7, #4]
 800645a:	f000 fbe8 	bl	8006c2e <UART_CheckIdleState>
 800645e:	4603      	mov	r3, r0
}
 8006460:	4618      	mov	r0, r3
 8006462:	3708      	adds	r7, #8
 8006464:	46bd      	mov	sp, r7
 8006466:	bd80      	pop	{r7, pc}

08006468 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b08a      	sub	sp, #40	; 0x28
 800646c:	af02      	add	r7, sp, #8
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	603b      	str	r3, [r7, #0]
 8006474:	4613      	mov	r3, r2
 8006476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800647c:	2b20      	cmp	r3, #32
 800647e:	d178      	bne.n	8006572 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <HAL_UART_Transmit+0x24>
 8006486:	88fb      	ldrh	r3, [r7, #6]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800648c:	2301      	movs	r3, #1
 800648e:	e071      	b.n	8006574 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2221      	movs	r2, #33	; 0x21
 800649c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800649e:	f7fd fedd 	bl	800425c <HAL_GetTick>
 80064a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	88fa      	ldrh	r2, [r7, #6]
 80064a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	88fa      	ldrh	r2, [r7, #6]
 80064b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064bc:	d108      	bne.n	80064d0 <HAL_UART_Transmit+0x68>
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d104      	bne.n	80064d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80064c6:	2300      	movs	r3, #0
 80064c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	61bb      	str	r3, [r7, #24]
 80064ce:	e003      	b.n	80064d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80064d4:	2300      	movs	r3, #0
 80064d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80064d8:	e030      	b.n	800653c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80064da:	683b      	ldr	r3, [r7, #0]
 80064dc:	9300      	str	r3, [sp, #0]
 80064de:	697b      	ldr	r3, [r7, #20]
 80064e0:	2200      	movs	r2, #0
 80064e2:	2180      	movs	r1, #128	; 0x80
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f000 fc4a 	bl	8006d7e <UART_WaitOnFlagUntilTimeout>
 80064ea:	4603      	mov	r3, r0
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d004      	beq.n	80064fa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2220      	movs	r2, #32
 80064f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e03c      	b.n	8006574 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10b      	bne.n	8006518 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006500:	69bb      	ldr	r3, [r7, #24]
 8006502:	881a      	ldrh	r2, [r3, #0]
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800650c:	b292      	uxth	r2, r2
 800650e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	3302      	adds	r3, #2
 8006514:	61bb      	str	r3, [r7, #24]
 8006516:	e008      	b.n	800652a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006518:	69fb      	ldr	r3, [r7, #28]
 800651a:	781a      	ldrb	r2, [r3, #0]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	b292      	uxth	r2, r2
 8006522:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	3301      	adds	r3, #1
 8006528:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006530:	b29b      	uxth	r3, r3
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006542:	b29b      	uxth	r3, r3
 8006544:	2b00      	cmp	r3, #0
 8006546:	d1c8      	bne.n	80064da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	2200      	movs	r2, #0
 8006550:	2140      	movs	r1, #64	; 0x40
 8006552:	68f8      	ldr	r0, [r7, #12]
 8006554:	f000 fc13 	bl	8006d7e <UART_WaitOnFlagUntilTimeout>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d004      	beq.n	8006568 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2220      	movs	r2, #32
 8006562:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8006564:	2303      	movs	r3, #3
 8006566:	e005      	b.n	8006574 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2220      	movs	r2, #32
 800656c:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800656e:	2300      	movs	r3, #0
 8006570:	e000      	b.n	8006574 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8006572:	2302      	movs	r3, #2
  }
}
 8006574:	4618      	mov	r0, r3
 8006576:	3720      	adds	r7, #32
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800657c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006580:	b08a      	sub	sp, #40	; 0x28
 8006582:	af00      	add	r7, sp, #0
 8006584:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006586:	2300      	movs	r3, #0
 8006588:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	689a      	ldr	r2, [r3, #8]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	691b      	ldr	r3, [r3, #16]
 8006594:	431a      	orrs	r2, r3
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	695b      	ldr	r3, [r3, #20]
 800659a:	431a      	orrs	r2, r3
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	69db      	ldr	r3, [r3, #28]
 80065a0:	4313      	orrs	r3, r2
 80065a2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	681a      	ldr	r2, [r3, #0]
 80065aa:	4ba4      	ldr	r3, [pc, #656]	; (800683c <UART_SetConfig+0x2c0>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	68fa      	ldr	r2, [r7, #12]
 80065b0:	6812      	ldr	r2, [r2, #0]
 80065b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80065b4:	430b      	orrs	r3, r1
 80065b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	68da      	ldr	r2, [r3, #12]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	430a      	orrs	r2, r1
 80065cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	699b      	ldr	r3, [r3, #24]
 80065d2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4a99      	ldr	r2, [pc, #612]	; (8006840 <UART_SetConfig+0x2c4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d004      	beq.n	80065e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065e4:	4313      	orrs	r3, r2
 80065e6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065f8:	430a      	orrs	r2, r1
 80065fa:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	4a90      	ldr	r2, [pc, #576]	; (8006844 <UART_SetConfig+0x2c8>)
 8006602:	4293      	cmp	r3, r2
 8006604:	d126      	bne.n	8006654 <UART_SetConfig+0xd8>
 8006606:	4b90      	ldr	r3, [pc, #576]	; (8006848 <UART_SetConfig+0x2cc>)
 8006608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800660c:	f003 0303 	and.w	r3, r3, #3
 8006610:	2b03      	cmp	r3, #3
 8006612:	d81b      	bhi.n	800664c <UART_SetConfig+0xd0>
 8006614:	a201      	add	r2, pc, #4	; (adr r2, 800661c <UART_SetConfig+0xa0>)
 8006616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800661a:	bf00      	nop
 800661c:	0800662d 	.word	0x0800662d
 8006620:	0800663d 	.word	0x0800663d
 8006624:	08006635 	.word	0x08006635
 8006628:	08006645 	.word	0x08006645
 800662c:	2301      	movs	r3, #1
 800662e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006632:	e116      	b.n	8006862 <UART_SetConfig+0x2e6>
 8006634:	2302      	movs	r3, #2
 8006636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800663a:	e112      	b.n	8006862 <UART_SetConfig+0x2e6>
 800663c:	2304      	movs	r3, #4
 800663e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006642:	e10e      	b.n	8006862 <UART_SetConfig+0x2e6>
 8006644:	2308      	movs	r3, #8
 8006646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800664a:	e10a      	b.n	8006862 <UART_SetConfig+0x2e6>
 800664c:	2310      	movs	r3, #16
 800664e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006652:	e106      	b.n	8006862 <UART_SetConfig+0x2e6>
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a7c      	ldr	r2, [pc, #496]	; (800684c <UART_SetConfig+0x2d0>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d138      	bne.n	80066d0 <UART_SetConfig+0x154>
 800665e:	4b7a      	ldr	r3, [pc, #488]	; (8006848 <UART_SetConfig+0x2cc>)
 8006660:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006664:	f003 030c 	and.w	r3, r3, #12
 8006668:	2b0c      	cmp	r3, #12
 800666a:	d82d      	bhi.n	80066c8 <UART_SetConfig+0x14c>
 800666c:	a201      	add	r2, pc, #4	; (adr r2, 8006674 <UART_SetConfig+0xf8>)
 800666e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006672:	bf00      	nop
 8006674:	080066a9 	.word	0x080066a9
 8006678:	080066c9 	.word	0x080066c9
 800667c:	080066c9 	.word	0x080066c9
 8006680:	080066c9 	.word	0x080066c9
 8006684:	080066b9 	.word	0x080066b9
 8006688:	080066c9 	.word	0x080066c9
 800668c:	080066c9 	.word	0x080066c9
 8006690:	080066c9 	.word	0x080066c9
 8006694:	080066b1 	.word	0x080066b1
 8006698:	080066c9 	.word	0x080066c9
 800669c:	080066c9 	.word	0x080066c9
 80066a0:	080066c9 	.word	0x080066c9
 80066a4:	080066c1 	.word	0x080066c1
 80066a8:	2300      	movs	r3, #0
 80066aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ae:	e0d8      	b.n	8006862 <UART_SetConfig+0x2e6>
 80066b0:	2302      	movs	r3, #2
 80066b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066b6:	e0d4      	b.n	8006862 <UART_SetConfig+0x2e6>
 80066b8:	2304      	movs	r3, #4
 80066ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066be:	e0d0      	b.n	8006862 <UART_SetConfig+0x2e6>
 80066c0:	2308      	movs	r3, #8
 80066c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066c6:	e0cc      	b.n	8006862 <UART_SetConfig+0x2e6>
 80066c8:	2310      	movs	r3, #16
 80066ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80066ce:	e0c8      	b.n	8006862 <UART_SetConfig+0x2e6>
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4a5e      	ldr	r2, [pc, #376]	; (8006850 <UART_SetConfig+0x2d4>)
 80066d6:	4293      	cmp	r3, r2
 80066d8:	d125      	bne.n	8006726 <UART_SetConfig+0x1aa>
 80066da:	4b5b      	ldr	r3, [pc, #364]	; (8006848 <UART_SetConfig+0x2cc>)
 80066dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066e0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80066e4:	2b30      	cmp	r3, #48	; 0x30
 80066e6:	d016      	beq.n	8006716 <UART_SetConfig+0x19a>
 80066e8:	2b30      	cmp	r3, #48	; 0x30
 80066ea:	d818      	bhi.n	800671e <UART_SetConfig+0x1a2>
 80066ec:	2b20      	cmp	r3, #32
 80066ee:	d00a      	beq.n	8006706 <UART_SetConfig+0x18a>
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	d814      	bhi.n	800671e <UART_SetConfig+0x1a2>
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	d002      	beq.n	80066fe <UART_SetConfig+0x182>
 80066f8:	2b10      	cmp	r3, #16
 80066fa:	d008      	beq.n	800670e <UART_SetConfig+0x192>
 80066fc:	e00f      	b.n	800671e <UART_SetConfig+0x1a2>
 80066fe:	2300      	movs	r3, #0
 8006700:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006704:	e0ad      	b.n	8006862 <UART_SetConfig+0x2e6>
 8006706:	2302      	movs	r3, #2
 8006708:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800670c:	e0a9      	b.n	8006862 <UART_SetConfig+0x2e6>
 800670e:	2304      	movs	r3, #4
 8006710:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006714:	e0a5      	b.n	8006862 <UART_SetConfig+0x2e6>
 8006716:	2308      	movs	r3, #8
 8006718:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800671c:	e0a1      	b.n	8006862 <UART_SetConfig+0x2e6>
 800671e:	2310      	movs	r3, #16
 8006720:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006724:	e09d      	b.n	8006862 <UART_SetConfig+0x2e6>
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	4a4a      	ldr	r2, [pc, #296]	; (8006854 <UART_SetConfig+0x2d8>)
 800672c:	4293      	cmp	r3, r2
 800672e:	d125      	bne.n	800677c <UART_SetConfig+0x200>
 8006730:	4b45      	ldr	r3, [pc, #276]	; (8006848 <UART_SetConfig+0x2cc>)
 8006732:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006736:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800673a:	2bc0      	cmp	r3, #192	; 0xc0
 800673c:	d016      	beq.n	800676c <UART_SetConfig+0x1f0>
 800673e:	2bc0      	cmp	r3, #192	; 0xc0
 8006740:	d818      	bhi.n	8006774 <UART_SetConfig+0x1f8>
 8006742:	2b80      	cmp	r3, #128	; 0x80
 8006744:	d00a      	beq.n	800675c <UART_SetConfig+0x1e0>
 8006746:	2b80      	cmp	r3, #128	; 0x80
 8006748:	d814      	bhi.n	8006774 <UART_SetConfig+0x1f8>
 800674a:	2b00      	cmp	r3, #0
 800674c:	d002      	beq.n	8006754 <UART_SetConfig+0x1d8>
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d008      	beq.n	8006764 <UART_SetConfig+0x1e8>
 8006752:	e00f      	b.n	8006774 <UART_SetConfig+0x1f8>
 8006754:	2300      	movs	r3, #0
 8006756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675a:	e082      	b.n	8006862 <UART_SetConfig+0x2e6>
 800675c:	2302      	movs	r3, #2
 800675e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006762:	e07e      	b.n	8006862 <UART_SetConfig+0x2e6>
 8006764:	2304      	movs	r3, #4
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676a:	e07a      	b.n	8006862 <UART_SetConfig+0x2e6>
 800676c:	2308      	movs	r3, #8
 800676e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006772:	e076      	b.n	8006862 <UART_SetConfig+0x2e6>
 8006774:	2310      	movs	r3, #16
 8006776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800677a:	e072      	b.n	8006862 <UART_SetConfig+0x2e6>
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a35      	ldr	r2, [pc, #212]	; (8006858 <UART_SetConfig+0x2dc>)
 8006782:	4293      	cmp	r3, r2
 8006784:	d12a      	bne.n	80067dc <UART_SetConfig+0x260>
 8006786:	4b30      	ldr	r3, [pc, #192]	; (8006848 <UART_SetConfig+0x2cc>)
 8006788:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800678c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006790:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006794:	d01a      	beq.n	80067cc <UART_SetConfig+0x250>
 8006796:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800679a:	d81b      	bhi.n	80067d4 <UART_SetConfig+0x258>
 800679c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a0:	d00c      	beq.n	80067bc <UART_SetConfig+0x240>
 80067a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067a6:	d815      	bhi.n	80067d4 <UART_SetConfig+0x258>
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d003      	beq.n	80067b4 <UART_SetConfig+0x238>
 80067ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067b0:	d008      	beq.n	80067c4 <UART_SetConfig+0x248>
 80067b2:	e00f      	b.n	80067d4 <UART_SetConfig+0x258>
 80067b4:	2300      	movs	r3, #0
 80067b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ba:	e052      	b.n	8006862 <UART_SetConfig+0x2e6>
 80067bc:	2302      	movs	r3, #2
 80067be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067c2:	e04e      	b.n	8006862 <UART_SetConfig+0x2e6>
 80067c4:	2304      	movs	r3, #4
 80067c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ca:	e04a      	b.n	8006862 <UART_SetConfig+0x2e6>
 80067cc:	2308      	movs	r3, #8
 80067ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d2:	e046      	b.n	8006862 <UART_SetConfig+0x2e6>
 80067d4:	2310      	movs	r3, #16
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067da:	e042      	b.n	8006862 <UART_SetConfig+0x2e6>
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	4a17      	ldr	r2, [pc, #92]	; (8006840 <UART_SetConfig+0x2c4>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d13a      	bne.n	800685c <UART_SetConfig+0x2e0>
 80067e6:	4b18      	ldr	r3, [pc, #96]	; (8006848 <UART_SetConfig+0x2cc>)
 80067e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067ec:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80067f0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067f4:	d01a      	beq.n	800682c <UART_SetConfig+0x2b0>
 80067f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80067fa:	d81b      	bhi.n	8006834 <UART_SetConfig+0x2b8>
 80067fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006800:	d00c      	beq.n	800681c <UART_SetConfig+0x2a0>
 8006802:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006806:	d815      	bhi.n	8006834 <UART_SetConfig+0x2b8>
 8006808:	2b00      	cmp	r3, #0
 800680a:	d003      	beq.n	8006814 <UART_SetConfig+0x298>
 800680c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006810:	d008      	beq.n	8006824 <UART_SetConfig+0x2a8>
 8006812:	e00f      	b.n	8006834 <UART_SetConfig+0x2b8>
 8006814:	2300      	movs	r3, #0
 8006816:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800681a:	e022      	b.n	8006862 <UART_SetConfig+0x2e6>
 800681c:	2302      	movs	r3, #2
 800681e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006822:	e01e      	b.n	8006862 <UART_SetConfig+0x2e6>
 8006824:	2304      	movs	r3, #4
 8006826:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800682a:	e01a      	b.n	8006862 <UART_SetConfig+0x2e6>
 800682c:	2308      	movs	r3, #8
 800682e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006832:	e016      	b.n	8006862 <UART_SetConfig+0x2e6>
 8006834:	2310      	movs	r3, #16
 8006836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800683a:	e012      	b.n	8006862 <UART_SetConfig+0x2e6>
 800683c:	efff69f3 	.word	0xefff69f3
 8006840:	40008000 	.word	0x40008000
 8006844:	40013800 	.word	0x40013800
 8006848:	40021000 	.word	0x40021000
 800684c:	40004400 	.word	0x40004400
 8006850:	40004800 	.word	0x40004800
 8006854:	40004c00 	.word	0x40004c00
 8006858:	40005000 	.word	0x40005000
 800685c:	2310      	movs	r3, #16
 800685e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a9f      	ldr	r2, [pc, #636]	; (8006ae4 <UART_SetConfig+0x568>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d17a      	bne.n	8006962 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800686c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006870:	2b08      	cmp	r3, #8
 8006872:	d824      	bhi.n	80068be <UART_SetConfig+0x342>
 8006874:	a201      	add	r2, pc, #4	; (adr r2, 800687c <UART_SetConfig+0x300>)
 8006876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687a:	bf00      	nop
 800687c:	080068a1 	.word	0x080068a1
 8006880:	080068bf 	.word	0x080068bf
 8006884:	080068a9 	.word	0x080068a9
 8006888:	080068bf 	.word	0x080068bf
 800688c:	080068af 	.word	0x080068af
 8006890:	080068bf 	.word	0x080068bf
 8006894:	080068bf 	.word	0x080068bf
 8006898:	080068bf 	.word	0x080068bf
 800689c:	080068b7 	.word	0x080068b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80068a0:	f7fe fdda 	bl	8005458 <HAL_RCC_GetPCLK1Freq>
 80068a4:	61f8      	str	r0, [r7, #28]
        break;
 80068a6:	e010      	b.n	80068ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80068a8:	4b8f      	ldr	r3, [pc, #572]	; (8006ae8 <UART_SetConfig+0x56c>)
 80068aa:	61fb      	str	r3, [r7, #28]
        break;
 80068ac:	e00d      	b.n	80068ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80068ae:	f7fe fd3f 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 80068b2:	61f8      	str	r0, [r7, #28]
        break;
 80068b4:	e009      	b.n	80068ca <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80068b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80068ba:	61fb      	str	r3, [r7, #28]
        break;
 80068bc:	e005      	b.n	80068ca <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80068c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80068ca:	69fb      	ldr	r3, [r7, #28]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80fb 	beq.w	8006ac8 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	685a      	ldr	r2, [r3, #4]
 80068d6:	4613      	mov	r3, r2
 80068d8:	005b      	lsls	r3, r3, #1
 80068da:	4413      	add	r3, r2
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	429a      	cmp	r2, r3
 80068e0:	d305      	bcc.n	80068ee <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	685b      	ldr	r3, [r3, #4]
 80068e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80068e8:	69fa      	ldr	r2, [r7, #28]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d903      	bls.n	80068f6 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80068f4:	e0e8      	b.n	8006ac8 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80068f6:	69fb      	ldr	r3, [r7, #28]
 80068f8:	2200      	movs	r2, #0
 80068fa:	461c      	mov	r4, r3
 80068fc:	4615      	mov	r5, r2
 80068fe:	f04f 0200 	mov.w	r2, #0
 8006902:	f04f 0300 	mov.w	r3, #0
 8006906:	022b      	lsls	r3, r5, #8
 8006908:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800690c:	0222      	lsls	r2, r4, #8
 800690e:	68f9      	ldr	r1, [r7, #12]
 8006910:	6849      	ldr	r1, [r1, #4]
 8006912:	0849      	lsrs	r1, r1, #1
 8006914:	2000      	movs	r0, #0
 8006916:	4688      	mov	r8, r1
 8006918:	4681      	mov	r9, r0
 800691a:	eb12 0a08 	adds.w	sl, r2, r8
 800691e:	eb43 0b09 	adc.w	fp, r3, r9
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	2200      	movs	r2, #0
 8006928:	603b      	str	r3, [r7, #0]
 800692a:	607a      	str	r2, [r7, #4]
 800692c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006930:	4650      	mov	r0, sl
 8006932:	4659      	mov	r1, fp
 8006934:	f7fa fb50 	bl	8000fd8 <__aeabi_uldivmod>
 8006938:	4602      	mov	r2, r0
 800693a:	460b      	mov	r3, r1
 800693c:	4613      	mov	r3, r2
 800693e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006940:	69bb      	ldr	r3, [r7, #24]
 8006942:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006946:	d308      	bcc.n	800695a <UART_SetConfig+0x3de>
 8006948:	69bb      	ldr	r3, [r7, #24]
 800694a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800694e:	d204      	bcs.n	800695a <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	69ba      	ldr	r2, [r7, #24]
 8006956:	60da      	str	r2, [r3, #12]
 8006958:	e0b6      	b.n	8006ac8 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006960:	e0b2      	b.n	8006ac8 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	69db      	ldr	r3, [r3, #28]
 8006966:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800696a:	d15e      	bne.n	8006a2a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 800696c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006970:	2b08      	cmp	r3, #8
 8006972:	d828      	bhi.n	80069c6 <UART_SetConfig+0x44a>
 8006974:	a201      	add	r2, pc, #4	; (adr r2, 800697c <UART_SetConfig+0x400>)
 8006976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800697a:	bf00      	nop
 800697c:	080069a1 	.word	0x080069a1
 8006980:	080069a9 	.word	0x080069a9
 8006984:	080069b1 	.word	0x080069b1
 8006988:	080069c7 	.word	0x080069c7
 800698c:	080069b7 	.word	0x080069b7
 8006990:	080069c7 	.word	0x080069c7
 8006994:	080069c7 	.word	0x080069c7
 8006998:	080069c7 	.word	0x080069c7
 800699c:	080069bf 	.word	0x080069bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069a0:	f7fe fd5a 	bl	8005458 <HAL_RCC_GetPCLK1Freq>
 80069a4:	61f8      	str	r0, [r7, #28]
        break;
 80069a6:	e014      	b.n	80069d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80069a8:	f7fe fd6c 	bl	8005484 <HAL_RCC_GetPCLK2Freq>
 80069ac:	61f8      	str	r0, [r7, #28]
        break;
 80069ae:	e010      	b.n	80069d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069b0:	4b4d      	ldr	r3, [pc, #308]	; (8006ae8 <UART_SetConfig+0x56c>)
 80069b2:	61fb      	str	r3, [r7, #28]
        break;
 80069b4:	e00d      	b.n	80069d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069b6:	f7fe fcbb 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 80069ba:	61f8      	str	r0, [r7, #28]
        break;
 80069bc:	e009      	b.n	80069d2 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069c2:	61fb      	str	r3, [r7, #28]
        break;
 80069c4:	e005      	b.n	80069d2 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80069c6:	2300      	movs	r3, #0
 80069c8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069ca:	2301      	movs	r3, #1
 80069cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069d2:	69fb      	ldr	r3, [r7, #28]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d077      	beq.n	8006ac8 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80069d8:	69fb      	ldr	r3, [r7, #28]
 80069da:	005a      	lsls	r2, r3, #1
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	085b      	lsrs	r3, r3, #1
 80069e2:	441a      	add	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80069ec:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069ee:	69bb      	ldr	r3, [r7, #24]
 80069f0:	2b0f      	cmp	r3, #15
 80069f2:	d916      	bls.n	8006a22 <UART_SetConfig+0x4a6>
 80069f4:	69bb      	ldr	r3, [r7, #24]
 80069f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069fa:	d212      	bcs.n	8006a22 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069fc:	69bb      	ldr	r3, [r7, #24]
 80069fe:	b29b      	uxth	r3, r3
 8006a00:	f023 030f 	bic.w	r3, r3, #15
 8006a04:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a06:	69bb      	ldr	r3, [r7, #24]
 8006a08:	085b      	lsrs	r3, r3, #1
 8006a0a:	b29b      	uxth	r3, r3
 8006a0c:	f003 0307 	and.w	r3, r3, #7
 8006a10:	b29a      	uxth	r2, r3
 8006a12:	8afb      	ldrh	r3, [r7, #22]
 8006a14:	4313      	orrs	r3, r2
 8006a16:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	8afa      	ldrh	r2, [r7, #22]
 8006a1e:	60da      	str	r2, [r3, #12]
 8006a20:	e052      	b.n	8006ac8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006a22:	2301      	movs	r3, #1
 8006a24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a28:	e04e      	b.n	8006ac8 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a2a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a2e:	2b08      	cmp	r3, #8
 8006a30:	d827      	bhi.n	8006a82 <UART_SetConfig+0x506>
 8006a32:	a201      	add	r2, pc, #4	; (adr r2, 8006a38 <UART_SetConfig+0x4bc>)
 8006a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a38:	08006a5d 	.word	0x08006a5d
 8006a3c:	08006a65 	.word	0x08006a65
 8006a40:	08006a6d 	.word	0x08006a6d
 8006a44:	08006a83 	.word	0x08006a83
 8006a48:	08006a73 	.word	0x08006a73
 8006a4c:	08006a83 	.word	0x08006a83
 8006a50:	08006a83 	.word	0x08006a83
 8006a54:	08006a83 	.word	0x08006a83
 8006a58:	08006a7b 	.word	0x08006a7b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a5c:	f7fe fcfc 	bl	8005458 <HAL_RCC_GetPCLK1Freq>
 8006a60:	61f8      	str	r0, [r7, #28]
        break;
 8006a62:	e014      	b.n	8006a8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a64:	f7fe fd0e 	bl	8005484 <HAL_RCC_GetPCLK2Freq>
 8006a68:	61f8      	str	r0, [r7, #28]
        break;
 8006a6a:	e010      	b.n	8006a8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a6c:	4b1e      	ldr	r3, [pc, #120]	; (8006ae8 <UART_SetConfig+0x56c>)
 8006a6e:	61fb      	str	r3, [r7, #28]
        break;
 8006a70:	e00d      	b.n	8006a8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a72:	f7fe fc5d 	bl	8005330 <HAL_RCC_GetSysClockFreq>
 8006a76:	61f8      	str	r0, [r7, #28]
        break;
 8006a78:	e009      	b.n	8006a8e <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a7e:	61fb      	str	r3, [r7, #28]
        break;
 8006a80:	e005      	b.n	8006a8e <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006a86:	2301      	movs	r3, #1
 8006a88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006a8c:	bf00      	nop
    }

    if (pclk != 0U)
 8006a8e:	69fb      	ldr	r3, [r7, #28]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d019      	beq.n	8006ac8 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	085a      	lsrs	r2, r3, #1
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	441a      	add	r2, r3
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aa6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	2b0f      	cmp	r3, #15
 8006aac:	d909      	bls.n	8006ac2 <UART_SetConfig+0x546>
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ab4:	d205      	bcs.n	8006ac2 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	b29a      	uxth	r2, r3
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	60da      	str	r2, [r3, #12]
 8006ac0:	e002      	b.n	8006ac8 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2200      	movs	r2, #0
 8006acc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8006ad4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006ad8:	4618      	mov	r0, r3
 8006ada:	3728      	adds	r7, #40	; 0x28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ae2:	bf00      	nop
 8006ae4:	40008000 	.word	0x40008000
 8006ae8:	00f42400 	.word	0x00f42400

08006aec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b083      	sub	sp, #12
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af8:	f003 0308 	and.w	r3, r3, #8
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00a      	beq.n	8006b16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	430a      	orrs	r2, r1
 8006b14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b1a:	f003 0301 	and.w	r3, r3, #1
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d00a      	beq.n	8006b38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	430a      	orrs	r2, r1
 8006b36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b3c:	f003 0302 	and.w	r3, r3, #2
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00a      	beq.n	8006b5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	430a      	orrs	r2, r1
 8006b58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	f003 0304 	and.w	r3, r3, #4
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d00a      	beq.n	8006b7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	685b      	ldr	r3, [r3, #4]
 8006b6c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	430a      	orrs	r2, r1
 8006b7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	f003 0310 	and.w	r3, r3, #16
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d00a      	beq.n	8006b9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	430a      	orrs	r2, r1
 8006b9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba2:	f003 0320 	and.w	r3, r3, #32
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00a      	beq.n	8006bc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d01a      	beq.n	8006c02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	685b      	ldr	r3, [r3, #4]
 8006bd2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	430a      	orrs	r2, r1
 8006be0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bea:	d10a      	bne.n	8006c02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	430a      	orrs	r2, r1
 8006c00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00a      	beq.n	8006c24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	685b      	ldr	r3, [r3, #4]
 8006c14:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	605a      	str	r2, [r3, #4]
  }
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bc80      	pop	{r7}
 8006c2c:	4770      	bx	lr

08006c2e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b098      	sub	sp, #96	; 0x60
 8006c32:	af02      	add	r7, sp, #8
 8006c34:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c3e:	f7fd fb0d 	bl	800425c <HAL_GetTick>
 8006c42:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d12e      	bne.n	8006cb0 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c52:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c56:	9300      	str	r3, [sp, #0]
 8006c58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c5a:	2200      	movs	r2, #0
 8006c5c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 f88c 	bl	8006d7e <UART_WaitOnFlagUntilTimeout>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d021      	beq.n	8006cb0 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006c74:	e853 3f00 	ldrex	r3, [r3]
 8006c78:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006c7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006c80:	653b      	str	r3, [r7, #80]	; 0x50
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	461a      	mov	r2, r3
 8006c88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c8a:	647b      	str	r3, [r7, #68]	; 0x44
 8006c8c:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c90:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c92:	e841 2300 	strex	r3, r2, [r1]
 8006c96:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d1e6      	bne.n	8006c6c <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2220      	movs	r2, #32
 8006ca2:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e062      	b.n	8006d76 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	f003 0304 	and.w	r3, r3, #4
 8006cba:	2b04      	cmp	r3, #4
 8006cbc:	d149      	bne.n	8006d52 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006cbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006cc2:	9300      	str	r3, [sp, #0]
 8006cc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ccc:	6878      	ldr	r0, [r7, #4]
 8006cce:	f000 f856 	bl	8006d7e <UART_WaitOnFlagUntilTimeout>
 8006cd2:	4603      	mov	r3, r0
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d03c      	beq.n	8006d52 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce0:	e853 3f00 	ldrex	r3, [r3]
 8006ce4:	623b      	str	r3, [r7, #32]
   return(result);
 8006ce6:	6a3b      	ldr	r3, [r7, #32]
 8006ce8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006cec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cf6:	633b      	str	r3, [r7, #48]	; 0x30
 8006cf8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006cfe:	e841 2300 	strex	r3, r2, [r1]
 8006d02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d1e6      	bne.n	8006cd8 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3308      	adds	r3, #8
 8006d10:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	e853 3f00 	ldrex	r3, [r3]
 8006d18:	60fb      	str	r3, [r7, #12]
   return(result);
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f023 0301 	bic.w	r3, r3, #1
 8006d20:	64bb      	str	r3, [r7, #72]	; 0x48
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	3308      	adds	r3, #8
 8006d28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d2a:	61fa      	str	r2, [r7, #28]
 8006d2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d2e:	69b9      	ldr	r1, [r7, #24]
 8006d30:	69fa      	ldr	r2, [r7, #28]
 8006d32:	e841 2300 	strex	r3, r2, [r1]
 8006d36:	617b      	str	r3, [r7, #20]
   return(result);
 8006d38:	697b      	ldr	r3, [r7, #20]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d1e5      	bne.n	8006d0a <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2220      	movs	r2, #32
 8006d42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2200      	movs	r2, #0
 8006d4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e011      	b.n	8006d76 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	2220      	movs	r2, #32
 8006d56:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2220      	movs	r2, #32
 8006d5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2200      	movs	r2, #0
 8006d70:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3758      	adds	r7, #88	; 0x58
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}

08006d7e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006d7e:	b580      	push	{r7, lr}
 8006d80:	b084      	sub	sp, #16
 8006d82:	af00      	add	r7, sp, #0
 8006d84:	60f8      	str	r0, [r7, #12]
 8006d86:	60b9      	str	r1, [r7, #8]
 8006d88:	603b      	str	r3, [r7, #0]
 8006d8a:	4613      	mov	r3, r2
 8006d8c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d8e:	e049      	b.n	8006e24 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d90:	69bb      	ldr	r3, [r7, #24]
 8006d92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d96:	d045      	beq.n	8006e24 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d98:	f7fd fa60 	bl	800425c <HAL_GetTick>
 8006d9c:	4602      	mov	r2, r0
 8006d9e:	683b      	ldr	r3, [r7, #0]
 8006da0:	1ad3      	subs	r3, r2, r3
 8006da2:	69ba      	ldr	r2, [r7, #24]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d302      	bcc.n	8006dae <UART_WaitOnFlagUntilTimeout+0x30>
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d101      	bne.n	8006db2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e048      	b.n	8006e44 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f003 0304 	and.w	r3, r3, #4
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d031      	beq.n	8006e24 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	69db      	ldr	r3, [r3, #28]
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b08      	cmp	r3, #8
 8006dcc:	d110      	bne.n	8006df0 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2208      	movs	r2, #8
 8006dd4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f000 f838 	bl	8006e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2208      	movs	r2, #8
 8006de0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	2200      	movs	r2, #0
 8006de8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8006dec:	2301      	movs	r3, #1
 8006dee:	e029      	b.n	8006e44 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69db      	ldr	r3, [r3, #28]
 8006df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dfa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006dfe:	d111      	bne.n	8006e24 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e08:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 f81e 	bl	8006e4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e00f      	b.n	8006e44 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	69da      	ldr	r2, [r3, #28]
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	4013      	ands	r3, r2
 8006e2e:	68ba      	ldr	r2, [r7, #8]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	bf0c      	ite	eq
 8006e34:	2301      	moveq	r3, #1
 8006e36:	2300      	movne	r3, #0
 8006e38:	b2db      	uxtb	r3, r3
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	79fb      	ldrb	r3, [r7, #7]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d0a6      	beq.n	8006d90 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e42:	2300      	movs	r3, #0
}
 8006e44:	4618      	mov	r0, r3
 8006e46:	3710      	adds	r7, #16
 8006e48:	46bd      	mov	sp, r7
 8006e4a:	bd80      	pop	{r7, pc}

08006e4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b095      	sub	sp, #84	; 0x54
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e5c:	e853 3f00 	ldrex	r3, [r3]
 8006e60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	461a      	mov	r2, r3
 8006e70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e72:	643b      	str	r3, [r7, #64]	; 0x40
 8006e74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006e78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006e7a:	e841 2300 	strex	r3, r2, [r1]
 8006e7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d1e6      	bne.n	8006e54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	3308      	adds	r3, #8
 8006e8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8e:	6a3b      	ldr	r3, [r7, #32]
 8006e90:	e853 3f00 	ldrex	r3, [r3]
 8006e94:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	f023 0301 	bic.w	r3, r3, #1
 8006e9c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	3308      	adds	r3, #8
 8006ea4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ea6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ea8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eaa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006eac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006eae:	e841 2300 	strex	r3, r2, [r1]
 8006eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d1e5      	bne.n	8006e86 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ebe:	2b01      	cmp	r3, #1
 8006ec0:	d118      	bne.n	8006ef4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	e853 3f00 	ldrex	r3, [r3]
 8006ece:	60bb      	str	r3, [r7, #8]
   return(result);
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	f023 0310 	bic.w	r3, r3, #16
 8006ed6:	647b      	str	r3, [r7, #68]	; 0x44
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	461a      	mov	r2, r3
 8006ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee4:	6979      	ldr	r1, [r7, #20]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	e841 2300 	strex	r3, r2, [r1]
 8006eec:	613b      	str	r3, [r7, #16]
   return(result);
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d1e6      	bne.n	8006ec2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2220      	movs	r2, #32
 8006ef8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	2200      	movs	r2, #0
 8006f06:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006f08:	bf00      	nop
 8006f0a:	3754      	adds	r7, #84	; 0x54
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bc80      	pop	{r7}
 8006f10:	4770      	bx	lr

08006f12 <memset>:
 8006f12:	4603      	mov	r3, r0
 8006f14:	4402      	add	r2, r0
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d100      	bne.n	8006f1c <memset+0xa>
 8006f1a:	4770      	bx	lr
 8006f1c:	f803 1b01 	strb.w	r1, [r3], #1
 8006f20:	e7f9      	b.n	8006f16 <memset+0x4>
	...

08006f24 <__libc_init_array>:
 8006f24:	b570      	push	{r4, r5, r6, lr}
 8006f26:	2600      	movs	r6, #0
 8006f28:	4d0c      	ldr	r5, [pc, #48]	; (8006f5c <__libc_init_array+0x38>)
 8006f2a:	4c0d      	ldr	r4, [pc, #52]	; (8006f60 <__libc_init_array+0x3c>)
 8006f2c:	1b64      	subs	r4, r4, r5
 8006f2e:	10a4      	asrs	r4, r4, #2
 8006f30:	42a6      	cmp	r6, r4
 8006f32:	d109      	bne.n	8006f48 <__libc_init_array+0x24>
 8006f34:	f000 f860 	bl	8006ff8 <_init>
 8006f38:	2600      	movs	r6, #0
 8006f3a:	4d0a      	ldr	r5, [pc, #40]	; (8006f64 <__libc_init_array+0x40>)
 8006f3c:	4c0a      	ldr	r4, [pc, #40]	; (8006f68 <__libc_init_array+0x44>)
 8006f3e:	1b64      	subs	r4, r4, r5
 8006f40:	10a4      	asrs	r4, r4, #2
 8006f42:	42a6      	cmp	r6, r4
 8006f44:	d105      	bne.n	8006f52 <__libc_init_array+0x2e>
 8006f46:	bd70      	pop	{r4, r5, r6, pc}
 8006f48:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f4c:	4798      	blx	r3
 8006f4e:	3601      	adds	r6, #1
 8006f50:	e7ee      	b.n	8006f30 <__libc_init_array+0xc>
 8006f52:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f56:	4798      	blx	r3
 8006f58:	3601      	adds	r6, #1
 8006f5a:	e7f2      	b.n	8006f42 <__libc_init_array+0x1e>
 8006f5c:	08007218 	.word	0x08007218
 8006f60:	08007218 	.word	0x08007218
 8006f64:	08007218 	.word	0x08007218
 8006f68:	0800721c 	.word	0x0800721c

08006f6c <round>:
 8006f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f6e:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8006f72:	f2a7 32ff 	subw	r2, r7, #1023	; 0x3ff
 8006f76:	2a13      	cmp	r2, #19
 8006f78:	460b      	mov	r3, r1
 8006f7a:	4605      	mov	r5, r0
 8006f7c:	460c      	mov	r4, r1
 8006f7e:	dc18      	bgt.n	8006fb2 <round+0x46>
 8006f80:	2a00      	cmp	r2, #0
 8006f82:	da09      	bge.n	8006f98 <round+0x2c>
 8006f84:	3201      	adds	r2, #1
 8006f86:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8006f8a:	d103      	bne.n	8006f94 <round+0x28>
 8006f8c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006f90:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006f94:	2200      	movs	r2, #0
 8006f96:	e029      	b.n	8006fec <round+0x80>
 8006f98:	4816      	ldr	r0, [pc, #88]	; (8006ff4 <round+0x88>)
 8006f9a:	4110      	asrs	r0, r2
 8006f9c:	4001      	ands	r1, r0
 8006f9e:	4329      	orrs	r1, r5
 8006fa0:	d011      	beq.n	8006fc6 <round+0x5a>
 8006fa2:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8006fa6:	fa41 f202 	asr.w	r2, r1, r2
 8006faa:	4413      	add	r3, r2
 8006fac:	ea23 0300 	bic.w	r3, r3, r0
 8006fb0:	e7f0      	b.n	8006f94 <round+0x28>
 8006fb2:	2a33      	cmp	r2, #51	; 0x33
 8006fb4:	dd0a      	ble.n	8006fcc <round+0x60>
 8006fb6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006fba:	d104      	bne.n	8006fc6 <round+0x5a>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	f7f9 f909 	bl	80001d4 <__adddf3>
 8006fc2:	4605      	mov	r5, r0
 8006fc4:	460c      	mov	r4, r1
 8006fc6:	4628      	mov	r0, r5
 8006fc8:	4621      	mov	r1, r4
 8006fca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006fd4:	40f8      	lsrs	r0, r7
 8006fd6:	4228      	tst	r0, r5
 8006fd8:	d0f5      	beq.n	8006fc6 <round+0x5a>
 8006fda:	f1c2 0133 	rsb	r1, r2, #51	; 0x33
 8006fde:	2201      	movs	r2, #1
 8006fe0:	408a      	lsls	r2, r1
 8006fe2:	1952      	adds	r2, r2, r5
 8006fe4:	bf28      	it	cs
 8006fe6:	3301      	addcs	r3, #1
 8006fe8:	ea22 0200 	bic.w	r2, r2, r0
 8006fec:	4619      	mov	r1, r3
 8006fee:	4610      	mov	r0, r2
 8006ff0:	e7e7      	b.n	8006fc2 <round+0x56>
 8006ff2:	bf00      	nop
 8006ff4:	000fffff 	.word	0x000fffff

08006ff8 <_init>:
 8006ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ffa:	bf00      	nop
 8006ffc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ffe:	bc08      	pop	{r3}
 8007000:	469e      	mov	lr, r3
 8007002:	4770      	bx	lr

08007004 <_fini>:
 8007004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007006:	bf00      	nop
 8007008:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800700a:	bc08      	pop	{r3}
 800700c:	469e      	mov	lr, r3
 800700e:	4770      	bx	lr
