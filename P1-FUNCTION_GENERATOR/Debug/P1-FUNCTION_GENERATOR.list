
P1-FUNCTION_GENERATOR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000033c0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08003548  08003548  00013548  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003760  08003760  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003760  08003760  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003760  08003760  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003760  08003760  00013760  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003764  08003764  00013764  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003768  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  2000000c  08003774  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  08003774  000205f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000453d  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000f66  00000000  00000000  000245bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000578  00000000  00000000  00025528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000401  00000000  00000000  00025aa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024976  00000000  00000000  00025ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00005cc4  00000000  00000000  0004a817  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e18c9  00000000  00000000  000504db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00001848  00000000  00000000  00131da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001335ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003530 	.word	0x08003530

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003530 	.word	0x08003530

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <main>:

int calc_ARR;
int calc_CCR1;

int main(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b082      	sub	sp, #8
 8000b08:	af00      	add	r7, sp, #0
	HAL_Init();
 8000b0a:	f000 fd1c 	bl	8001546 <HAL_Init>
	SystemClock_Config();
 8000b0e:	f000 fc45 	bl	800139c <SystemClock_Config>

	//TABLES ##################################################################################################
	fill_sine_table();
 8000b12:	f000 fa45 	bl	8000fa0 <fill_sine_table>
	fill_saw_table();
 8000b16:	f000 fa9f 	bl	8001058 <fill_saw_table>
	fill_triangle_table();
 8000b1a:	f000 fac9 	bl	80010b0 <fill_triangle_table>

	//KEYPAD ###############################################################################################
	//turn on B and C
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOBEN | RCC_AHB2ENR_GPIOCEN); //A will be turned on in SPI
 8000b1e:	4b9d      	ldr	r3, [pc, #628]	; (8000d94 <main+0x290>)
 8000b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b22:	4a9c      	ldr	r2, [pc, #624]	; (8000d94 <main+0x290>)
 8000b24:	f043 0306 	orr.w	r3, r3, #6
 8000b28:	64d3      	str	r3, [r2, #76]	; 0x4c

	//bank B as GPIO
	//preset rows as inputs
	//pins B4,5,6,7
	GPIOB->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8000b2a:	4b9b      	ldr	r3, [pc, #620]	; (8000d98 <main+0x294>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a9a      	ldr	r2, [pc, #616]	; (8000d98 <main+0x294>)
 8000b30:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b34:	6013      	str	r3, [r2, #0]

	//set pins B4,5,6,7 to pull down
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPD4 | GPIO_PUPDR_PUPD5 | GPIO_PUPDR_PUPD6 | GPIO_PUPDR_PUPD7);
 8000b36:	4b98      	ldr	r3, [pc, #608]	; (8000d98 <main+0x294>)
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	4a97      	ldr	r2, [pc, #604]	; (8000d98 <main+0x294>)
 8000b3c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b40:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR |= (GPIO_PUPDR_PUPD4_1 | GPIO_PUPDR_PUPD5_1 | GPIO_PUPDR_PUPD6_1 | GPIO_PUPDR_PUPD7_1);
 8000b42:	4b95      	ldr	r3, [pc, #596]	; (8000d98 <main+0x294>)
 8000b44:	68db      	ldr	r3, [r3, #12]
 8000b46:	4a94      	ldr	r2, [pc, #592]	; (8000d98 <main+0x294>)
 8000b48:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000b4c:	60d3      	str	r3, [r2, #12]

	//bank C as GPIO
	//preset the columns as outputs
	//pins C0,1,2,3
	GPIOC->MODER &= ~(GPIO_MODER_MODE0 | GPIO_MODER_MODE1 | GPIO_MODER_MODE2 | GPIO_MODER_MODE3);
 8000b4e:	4b93      	ldr	r3, [pc, #588]	; (8000d9c <main+0x298>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a92      	ldr	r2, [pc, #584]	; (8000d9c <main+0x298>)
 8000b54:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8000b58:	6013      	str	r3, [r2, #0]
	GPIOC->MODER |= (GPIO_MODER_MODE0_0 | GPIO_MODER_MODE1_0 | GPIO_MODER_MODE2_0 | GPIO_MODER_MODE3_0);
 8000b5a:	4b90      	ldr	r3, [pc, #576]	; (8000d9c <main+0x298>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	4a8f      	ldr	r2, [pc, #572]	; (8000d9c <main+0x298>)
 8000b60:	f043 0355 	orr.w	r3, r3, #85	; 0x55
 8000b64:	6013      	str	r3, [r2, #0]

	//preset all output pins to 0
	GPIOC->BRR = (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3);
 8000b66:	4b8d      	ldr	r3, [pc, #564]	; (8000d9c <main+0x298>)
 8000b68:	220f      	movs	r2, #15
 8000b6a:	629a      	str	r2, [r3, #40]	; 0x28
	int col = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	607b      	str	r3, [r7, #4]

	//SPI ###################################################################################################
	RCC->AHB2ENR |= (RCC_AHB2ENR_GPIOAEN); //enable clock for port A (SCLK)
 8000b70:	4b88      	ldr	r3, [pc, #544]	; (8000d94 <main+0x290>)
 8000b72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b74:	4a87      	ldr	r2, [pc, #540]	; (8000d94 <main+0x290>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	64d3      	str	r3, [r2, #76]	; 0x4c

	//reset pins
	GPIOA->MODER &= ~(GPIO_MODER_MODE4 | GPIO_MODER_MODE5 | GPIO_MODER_MODE6 | GPIO_MODER_MODE7);
 8000b7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000b8a:	6013      	str	r3, [r2, #0]
	//set GPIO mode to alternate function
	GPIOA->MODER |= (GPIO_MODER_MODE4_1 | GPIO_MODER_MODE5_1 | GPIO_MODER_MODE6_1 | GPIO_MODER_MODE7_1);
 8000b8c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000b96:	f443 432a 	orr.w	r3, r3, #43520	; 0xaa00
 8000b9a:	6013      	str	r3, [r2, #0]

	//mask AF
	GPIOA->AFR[0] &= ~(GPIO_AFRL_AFSEL4 | GPIO_AFRL_AFSEL5 | GPIO_AFRL_AFSEL6 | GPIO_AFRL_AFSEL7);
 8000b9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000ba0:	6a1b      	ldr	r3, [r3, #32]
 8000ba2:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	6213      	str	r3, [r2, #32]
	//set to SPI_1 -> AF5
	GPIOA->AFR[0] |= ((5 << GPIO_AFRL_AFSEL4_Pos) | (5 << GPIO_AFRL_AFSEL5_Pos) | (5 << GPIO_AFRL_AFSEL6_Pos) |
 8000baa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bae:	6a1b      	ldr	r3, [r3, #32]
 8000bb0:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bb4:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000bb8:	f443 03aa 	orr.w	r3, r3, #5570560	; 0x550000
 8000bbc:	6213      	str	r3, [r2, #32]
				  (5 << GPIO_AFRL_AFSEL7_Pos));

	//set speed to low
	GPIOA->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED4 | GPIO_OSPEEDR_OSPEED5 | GPIO_OSPEEDR_OSPEED6 | GPIO_OSPEEDR_OSPEED7);
 8000bbe:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8000bc8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000bcc:	6093      	str	r3, [r2, #8]

	RCC->APB2ENR |= (RCC_APB2ENR_SPI1EN); //enable SPI clock
 8000bce:	4b71      	ldr	r3, [pc, #452]	; (8000d94 <main+0x290>)
 8000bd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bd2:	4a70      	ldr	r2, [pc, #448]	; (8000d94 <main+0x290>)
 8000bd4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000bd8:	6613      	str	r3, [r2, #96]	; 0x60
	SPI1->CR1 &= ~0xFFFF; //reset CR1
 8000bda:	4b71      	ldr	r3, [pc, #452]	; (8000da0 <main+0x29c>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a70      	ldr	r2, [pc, #448]	; (8000da0 <main+0x29c>)
 8000be0:	0c1b      	lsrs	r3, r3, #16
 8000be2:	041b      	lsls	r3, r3, #16
 8000be4:	6013      	str	r3, [r2, #0]
	SPI1->CR1 = (1 << 2) //master mode
 8000be6:	4b6e      	ldr	r3, [pc, #440]	; (8000da0 <main+0x29c>)
 8000be8:	f244 0204 	movw	r2, #16388	; 0x4004
 8000bec:	601a      	str	r2, [r3, #0]
		  | (0x0 << 3) //baud rate f/2
		  | (1 << 14); //transmit only

	SPI1->CR2 &= ~0xFFFF; //reset CR2
 8000bee:	4b6c      	ldr	r3, [pc, #432]	; (8000da0 <main+0x29c>)
 8000bf0:	685b      	ldr	r3, [r3, #4]
 8000bf2:	4a6b      	ldr	r2, [pc, #428]	; (8000da0 <main+0x29c>)
 8000bf4:	0c1b      	lsrs	r3, r3, #16
 8000bf6:	041b      	lsls	r3, r3, #16
 8000bf8:	6053      	str	r3, [r2, #4]
	SPI1->CR2 = (1 << 2) //SSOE enabled
 8000bfa:	4b69      	ldr	r3, [pc, #420]	; (8000da0 <main+0x29c>)
 8000bfc:	f640 720c 	movw	r2, #3852	; 0xf0c
 8000c00:	605a      	str	r2, [r3, #4]
		  | (1 << 3) //NSS pulse generation
		  | (0xF << 8); //set data length to 16 bits (12 data and 4 operation)

	SPI1->CR1 |= (1 << 6); //set SPI ON
 8000c02:	4b67      	ldr	r3, [pc, #412]	; (8000da0 <main+0x29c>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a66      	ldr	r2, [pc, #408]	; (8000da0 <main+0x29c>)
 8000c08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c0c:	6013      	str	r3, [r2, #0]
  \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i" : : : "memory");
 8000c0e:	b662      	cpsie	i
}
 8000c10:	bf00      	nop

	//ISR #######################################################################################################
	__enable_irq();

	NVIC->ISER[0] = (1 << (TIM2_IRQn & 0x1F));
 8000c12:	4b64      	ldr	r3, [pc, #400]	; (8000da4 <main+0x2a0>)
 8000c14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c18:	601a      	str	r2, [r3, #0]

	RCC->APB1ENR1 |= (RCC_APB1ENR1_TIM2EN);	// turn on TIM2
 8000c1a:	4b5e      	ldr	r3, [pc, #376]	; (8000d94 <main+0x290>)
 8000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1e:	4a5d      	ldr	r2, [pc, #372]	; (8000d94 <main+0x290>)
 8000c20:	f043 0301 	orr.w	r3, r3, #1
 8000c24:	6593      	str	r3, [r2, #88]	; 0x58
	//TIM2->CCR1 = 999;

	//SQUARE WAVE
	TIM2->CCR1 = 120000; //50% ->
 8000c26:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c2a:	4a5f      	ldr	r2, [pc, #380]	; (8000da8 <main+0x2a4>)
 8000c2c:	635a      	str	r2, [r3, #52]	; 0x34
	//TIM2->CCR1 = 80000;
	//TIM2->CCR1 = 60000;
	//TIM2->CCR1 = 48000;

	TIM2->DIER |= (TIM_DIER_CC1IE);	// enable interrupts on channel 1
 8000c2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c32:	68db      	ldr	r3, [r3, #12]
 8000c34:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c38:	f043 0302 	orr.w	r3, r3, #2
 8000c3c:	60d3      	str	r3, [r2, #12]
	TIM2->SR &= ~(TIM_SR_CC1IF);		// go into status register and clear interrupt flag
 8000c3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c48:	f023 0302 	bic.w	r3, r3, #2
 8000c4c:	6113      	str	r3, [r2, #16]
	TIM2->SR &= ~(TIM_SR_UIF);
 8000c4e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c52:	691b      	ldr	r3, [r3, #16]
 8000c54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c58:	f023 0301 	bic.w	r3, r3, #1
 8000c5c:	6113      	str	r3, [r2, #16]
	//TIM2->CR1 |= TIM_CR1_CEN;			// start timer
	TIM2->ARR = 239999;
 8000c5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c62:	4a52      	ldr	r2, [pc, #328]	; (8000dac <main+0x2a8>)
 8000c64:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM2->ARR = 79999;
	//TIM2->ARR = 59999;
	//TIM2->ARR = 47999;

	//initialization wave
	square_flag = 1; //square wave
 8000c66:	4b52      	ldr	r3, [pc, #328]	; (8000db0 <main+0x2ac>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	601a      	str	r2, [r3, #0]
	duty_cycle = 2; //50% duty cycle
 8000c6c:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <main+0x2b0>)
 8000c6e:	2202      	movs	r2, #2
 8000c70:	601a      	str	r2, [r3, #0]
	f_factor = 1; //100 Hz
 8000c72:	4b51      	ldr	r3, [pc, #324]	; (8000db8 <main+0x2b4>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	601a      	str	r2, [r3, #0]
	increment = 120000;
 8000c78:	4b50      	ldr	r3, [pc, #320]	; (8000dbc <main+0x2b8>)
 8000c7a:	4a4b      	ldr	r2, [pc, #300]	; (8000da8 <main+0x2a4>)
 8000c7c:	601a      	str	r2, [r3, #0]
	//updateParam();

	TIM2->CR1 |= TIM_CR1_CEN;			// start timer
 8000c7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c88:	f043 0301 	orr.w	r3, r3, #1
 8000c8c:	6013      	str	r3, [r2, #0]
		//goes to function for calculating ARR and CCR1
		//set f_factor depending on freq
		//set duty_cycle for square waves -1 for else

		//GPIOB->ODR &= ~(GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7); // set pin 3,4,5,10 of PORT B to 0
		int res = -1;
 8000c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c92:	603b      	str	r3, [r7, #0]
		while (res == -1){
 8000c94:	e00b      	b.n	8000cae <main+0x1aa>
			res = PressDetector(col);
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 f922 	bl	8000ee0 <PressDetector>
 8000c9c:	6038      	str	r0, [r7, #0]
			col++;
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	607b      	str	r3, [r7, #4]
			//HAL_Delay(5);
			if (col >= 4){
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2b03      	cmp	r3, #3
 8000ca8:	dd01      	ble.n	8000cae <main+0x1aa>
				col = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	607b      	str	r3, [r7, #4]
		while (res == -1){
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb4:	d0ef      	beq.n	8000c96 <main+0x192>
			}
		}
		//TIM2->DIER &= ~(TIM_DIER_CC1IE);	// disable interrupts on channel 1
		//TIM2->CR1 &= ~(TIM_CR1_CEN); //stop timer
		//res has pressed value
		if (res == 6){
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d10e      	bne.n	8000cda <main+0x1d6>
			sine_flag = 1; //sine wave
 8000cbc:	4b40      	ldr	r3, [pc, #256]	; (8000dc0 <main+0x2bc>)
 8000cbe:	2201      	movs	r2, #1
 8000cc0:	601a      	str	r2, [r3, #0]
			square_flag = 0;
 8000cc2:	4b3b      	ldr	r3, [pc, #236]	; (8000db0 <main+0x2ac>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	601a      	str	r2, [r3, #0]
			saw_flag = 0;
 8000cc8:	4b3e      	ldr	r3, [pc, #248]	; (8000dc4 <main+0x2c0>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
			triangle_flag = 0;
 8000cce:	4b3e      	ldr	r3, [pc, #248]	; (8000dc8 <main+0x2c4>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	601a      	str	r2, [r3, #0]
			updateParam();
 8000cd4:	f000 f8a0 	bl	8000e18 <updateParam>
 8000cd8:	e7d9      	b.n	8000c8e <main+0x18a>
		}
		else if (res == 7){
 8000cda:	683b      	ldr	r3, [r7, #0]
 8000cdc:	2b07      	cmp	r3, #7
 8000cde:	d10e      	bne.n	8000cfe <main+0x1fa>
			triangle_flag = 1; //triangle wave
 8000ce0:	4b39      	ldr	r3, [pc, #228]	; (8000dc8 <main+0x2c4>)
 8000ce2:	2201      	movs	r2, #1
 8000ce4:	601a      	str	r2, [r3, #0]
			square_flag = 0;
 8000ce6:	4b32      	ldr	r3, [pc, #200]	; (8000db0 <main+0x2ac>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
			saw_flag = 0;
 8000cec:	4b35      	ldr	r3, [pc, #212]	; (8000dc4 <main+0x2c0>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
			sine_flag = 0;
 8000cf2:	4b33      	ldr	r3, [pc, #204]	; (8000dc0 <main+0x2bc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
			updateParam();
 8000cf8:	f000 f88e 	bl	8000e18 <updateParam>
 8000cfc:	e7c7      	b.n	8000c8e <main+0x18a>
		}
		else if (res == 8){
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	2b08      	cmp	r3, #8
 8000d02:	d10e      	bne.n	8000d22 <main+0x21e>
			saw_flag = 1; //saw wave
 8000d04:	4b2f      	ldr	r3, [pc, #188]	; (8000dc4 <main+0x2c0>)
 8000d06:	2201      	movs	r2, #1
 8000d08:	601a      	str	r2, [r3, #0]
			square_flag = 0;
 8000d0a:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <main+0x2ac>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
			sine_flag = 0;
 8000d10:	4b2b      	ldr	r3, [pc, #172]	; (8000dc0 <main+0x2bc>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	601a      	str	r2, [r3, #0]
			triangle_flag = 0;
 8000d16:	4b2c      	ldr	r3, [pc, #176]	; (8000dc8 <main+0x2c4>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	601a      	str	r2, [r3, #0]
			updateParam();
 8000d1c:	f000 f87c 	bl	8000e18 <updateParam>
 8000d20:	e7b5      	b.n	8000c8e <main+0x18a>
		}
		else if (res == 9){
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	2b09      	cmp	r3, #9
 8000d26:	d10e      	bne.n	8000d46 <main+0x242>
			square_flag = 1; //square wave
 8000d28:	4b21      	ldr	r3, [pc, #132]	; (8000db0 <main+0x2ac>)
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	601a      	str	r2, [r3, #0]
			saw_flag = 0;
 8000d2e:	4b25      	ldr	r3, [pc, #148]	; (8000dc4 <main+0x2c0>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
			sine_flag = 0;
 8000d34:	4b22      	ldr	r3, [pc, #136]	; (8000dc0 <main+0x2bc>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	601a      	str	r2, [r3, #0]
			triangle_flag = 0;
 8000d3a:	4b23      	ldr	r3, [pc, #140]	; (8000dc8 <main+0x2c4>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
			updateParam();
 8000d40:	f000 f86a 	bl	8000e18 <updateParam>
 8000d44:	e7a3      	b.n	8000c8e <main+0x18a>
		}
		else if (res == 1){
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d105      	bne.n	8000d58 <main+0x254>
			f_factor = 1; //100 Hz
 8000d4c:	4b1a      	ldr	r3, [pc, #104]	; (8000db8 <main+0x2b4>)
 8000d4e:	2201      	movs	r2, #1
 8000d50:	601a      	str	r2, [r3, #0]
			updateParam();
 8000d52:	f000 f861 	bl	8000e18 <updateParam>
 8000d56:	e79a      	b.n	8000c8e <main+0x18a>
		}
		else if (res == 2){
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	d105      	bne.n	8000d6a <main+0x266>
			f_factor = 2; //200 Hz
 8000d5e:	4b16      	ldr	r3, [pc, #88]	; (8000db8 <main+0x2b4>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	601a      	str	r2, [r3, #0]
			updateParam();
 8000d64:	f000 f858 	bl	8000e18 <updateParam>
 8000d68:	e791      	b.n	8000c8e <main+0x18a>
		}
		else if (res == 3){
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2b03      	cmp	r3, #3
 8000d6e:	d103      	bne.n	8000d78 <main+0x274>
			f_factor = 3; //300 Hz
 8000d70:	4b11      	ldr	r3, [pc, #68]	; (8000db8 <main+0x2b4>)
 8000d72:	2203      	movs	r2, #3
 8000d74:	601a      	str	r2, [r3, #0]
 8000d76:	e78a      	b.n	8000c8e <main+0x18a>
		}
		else if (res == 4){
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	2b04      	cmp	r3, #4
 8000d7c:	d103      	bne.n	8000d86 <main+0x282>
			f_factor = 4; //400 Hz
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	; (8000db8 <main+0x2b4>)
 8000d80:	2204      	movs	r2, #4
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	e783      	b.n	8000c8e <main+0x18a>
		}
		else if (res == 5){
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b05      	cmp	r3, #5
 8000d8a:	d11f      	bne.n	8000dcc <main+0x2c8>
			f_factor = 5; //500 Hz
 8000d8c:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <main+0x2b4>)
 8000d8e:	2205      	movs	r2, #5
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	e77c      	b.n	8000c8e <main+0x18a>
 8000d94:	40021000 	.word	0x40021000
 8000d98:	48000400 	.word	0x48000400
 8000d9c:	48000800 	.word	0x48000800
 8000da0:	40013000 	.word	0x40013000
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	0001d4c0 	.word	0x0001d4c0
 8000dac:	0003a97f 	.word	0x0003a97f
 8000db0:	200005d8 	.word	0x200005d8
 8000db4:	200005d4 	.word	0x200005d4
 8000db8:	200005d0 	.word	0x200005d0
 8000dbc:	200005cc 	.word	0x200005cc
 8000dc0:	200005e0 	.word	0x200005e0
 8000dc4:	200005dc 	.word	0x200005dc
 8000dc8:	200005e4 	.word	0x200005e4
		}
		else if (res == 0){
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d103      	bne.n	8000dda <main+0x2d6>
			//might need a if to check if square wave
			duty_cycle = 2; //50% duty cycle
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <main+0x310>)
 8000dd4:	2202      	movs	r2, #2
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	e759      	b.n	8000c8e <main+0x18a>
		}
		else if (res == 14){ // #
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	2b0e      	cmp	r3, #14
 8000dde:	d10a      	bne.n	8000df6 <main+0x2f2>
			if (duty_cycle < 9){
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <main+0x310>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b08      	cmp	r3, #8
 8000de6:	f73f af52 	bgt.w	8000c8e <main+0x18a>
				duty_cycle += 1;
 8000dea:	4b0a      	ldr	r3, [pc, #40]	; (8000e14 <main+0x310>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3301      	adds	r3, #1
 8000df0:	4a08      	ldr	r2, [pc, #32]	; (8000e14 <main+0x310>)
 8000df2:	6013      	str	r3, [r2, #0]
 8000df4:	e74b      	b.n	8000c8e <main+0x18a>
			}
		}
		else if (res == 15){ // *
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	f47f af48 	bne.w	8000c8e <main+0x18a>
			if (duty_cycle > 1){
 8000dfe:	4b05      	ldr	r3, [pc, #20]	; (8000e14 <main+0x310>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b01      	cmp	r3, #1
 8000e04:	f77f af43 	ble.w	8000c8e <main+0x18a>
				duty_cycle -= 1;
 8000e08:	4b02      	ldr	r3, [pc, #8]	; (8000e14 <main+0x310>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3b01      	subs	r3, #1
 8000e0e:	4a01      	ldr	r2, [pc, #4]	; (8000e14 <main+0x310>)
 8000e10:	6013      	str	r3, [r2, #0]
	{
 8000e12:	e73c      	b.n	8000c8e <main+0x18a>
 8000e14:	200005d4 	.word	0x200005d4

08000e18 <updateParam>:
		//updateParam();
		//HAL_Delay(10);
	}
}

void updateParam(){
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
	//recalculates the ARR and CCR1 values
	TIM2->DIER &= ~(TIM_DIER_CC1IE);	// disable interrupts on channel 1
 8000e1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e20:	68db      	ldr	r3, [r3, #12]
 8000e22:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e26:	f023 0302 	bic.w	r3, r3, #2
 8000e2a:	60d3      	str	r3, [r2, #12]

	calc_ARR = (SCLK / (f_factor * 100)) - 1; //calculate new ARR value
 8000e2c:	4b24      	ldr	r3, [pc, #144]	; (8000ec0 <updateParam+0xa8>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	2264      	movs	r2, #100	; 0x64
 8000e32:	fb02 f303 	mul.w	r3, r2, r3
 8000e36:	4a23      	ldr	r2, [pc, #140]	; (8000ec4 <updateParam+0xac>)
 8000e38:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	4a22      	ldr	r2, [pc, #136]	; (8000ec8 <updateParam+0xb0>)
 8000e40:	6013      	str	r3, [r2, #0]
	TIM2->ARR = calc_ARR; //set ARR
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <updateParam+0xb0>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c

	if (square_flag){
 8000e4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ecc <updateParam+0xb4>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d013      	beq.n	8000e7c <updateParam+0x64>
		//if square wave
		calc_CCR1 = (calc_ARR + 1) / duty_cycle;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <updateParam+0xb0>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	1c5a      	adds	r2, r3, #1
 8000e5a:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <updateParam+0xb8>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	fb92 f3f3 	sdiv	r3, r2, r3
 8000e62:	4a1c      	ldr	r2, [pc, #112]	; (8000ed4 <updateParam+0xbc>)
 8000e64:	6013      	str	r3, [r2, #0]
		//TIM2->CCR1 =
		TIM2->CCR1 = calc_CCR1 - 1;
 8000e66:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <updateParam+0xbc>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	1e5a      	subs	r2, r3, #1
 8000e6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e70:	635a      	str	r2, [r3, #52]	; 0x34
		increment = calc_CCR1; //increment equals CCR1 for square
 8000e72:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <updateParam+0xbc>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4a18      	ldr	r2, [pc, #96]	; (8000ed8 <updateParam+0xc0>)
 8000e78:	6013      	str	r3, [r2, #0]
 8000e7a:	e010      	b.n	8000e9e <updateParam+0x86>
	}
	else {
		calc_CCR1 = 1000;
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <updateParam+0xbc>)
 8000e7e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e82:	601a      	str	r2, [r3, #0]
		TIM2->CCR1 = calc_CCR1 - 1;
 8000e84:	4b13      	ldr	r3, [pc, #76]	; (8000ed4 <updateParam+0xbc>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	1e5a      	subs	r2, r3, #1
 8000e8a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000e8e:	635a      	str	r2, [r3, #52]	; 0x34
		increment = calc_CCR1;
 8000e90:	4b10      	ldr	r3, [pc, #64]	; (8000ed4 <updateParam+0xbc>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a10      	ldr	r2, [pc, #64]	; (8000ed8 <updateParam+0xc0>)
 8000e96:	6013      	str	r3, [r2, #0]
		ccr_count = 0; //MAYBE NOT NEEDED
 8000e98:	4b10      	ldr	r3, [pc, #64]	; (8000edc <updateParam+0xc4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
	}

	//TIM2->CR1 |= TIM_CR1_CEN; //start timer
	TIM2->DIER |= (TIM_DIER_CC1IE);	// enable interrupts on channel 1
 8000e9e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000ea2:	68db      	ldr	r3, [r3, #12]
 8000ea4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000ea8:	f043 0302 	orr.w	r3, r3, #2
 8000eac:	60d3      	str	r3, [r2, #12]
	//TIM2->SR &= ~(TIM_SR_CC1IF);
	//TIM2->SR &= ~(TIM_SR_UIF);
	TIM2->EGR = 1 << 0; //reset CNT
 8000eae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	615a      	str	r2, [r3, #20]
	//HAL_Delay(5);
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	200005d0 	.word	0x200005d0
 8000ec4:	016e3600 	.word	0x016e3600
 8000ec8:	200005e8 	.word	0x200005e8
 8000ecc:	200005d8 	.word	0x200005d8
 8000ed0:	200005d4 	.word	0x200005d4
 8000ed4:	200005ec 	.word	0x200005ec
 8000ed8:	200005cc 	.word	0x200005cc
 8000edc:	200005c8 	.word	0x200005c8

08000ee0 <PressDetector>:

int PressDetector(int col){
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	//set all columns high then monitor rows for detection
	//returns the now known row after button pressed
	GPIOC->BRR = (GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3);
 8000ee8:	4b2a      	ldr	r3, [pc, #168]	; (8000f94 <PressDetector+0xb4>)
 8000eea:	220f      	movs	r2, #15
 8000eec:	629a      	str	r2, [r3, #40]	; 0x28
	GPIOC->BSRR = (1 << col); //set given column high
 8000eee:	2201      	movs	r2, #1
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	409a      	lsls	r2, r3
 8000ef4:	4b27      	ldr	r3, [pc, #156]	; (8000f94 <PressDetector+0xb4>)
 8000ef6:	619a      	str	r2, [r3, #24]
	//check all the rows once
	if (GPIOB->IDR & GPIO_PIN_4){
 8000ef8:	4b27      	ldr	r3, [pc, #156]	; (8000f98 <PressDetector+0xb8>)
 8000efa:	691b      	ldr	r3, [r3, #16]
 8000efc:	f003 0310 	and.w	r3, r3, #16
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d007      	beq.n	8000f14 <PressDetector+0x34>
		if (col == 3){
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	2b03      	cmp	r3, #3
 8000f08:	d101      	bne.n	8000f0e <PressDetector+0x2e>
			return 10;
 8000f0a:	230a      	movs	r3, #10
 8000f0c:	e03c      	b.n	8000f88 <PressDetector+0xa8>
		} else {
			return col + (0 * 4) + 1;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3301      	adds	r3, #1
 8000f12:	e039      	b.n	8000f88 <PressDetector+0xa8>
		}
	} else if (GPIOB->IDR & GPIO_PIN_5){
 8000f14:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <PressDetector+0xb8>)
 8000f16:	691b      	ldr	r3, [r3, #16]
 8000f18:	f003 0320 	and.w	r3, r3, #32
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d007      	beq.n	8000f30 <PressDetector+0x50>
		if (col == 3){
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	2b03      	cmp	r3, #3
 8000f24:	d101      	bne.n	8000f2a <PressDetector+0x4a>
			return 11;
 8000f26:	230b      	movs	r3, #11
 8000f28:	e02e      	b.n	8000f88 <PressDetector+0xa8>
		} else {
			return col + (1 * 4);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	e02b      	b.n	8000f88 <PressDetector+0xa8>
		}
	} else if (GPIOB->IDR & GPIO_PIN_6){
 8000f30:	4b19      	ldr	r3, [pc, #100]	; (8000f98 <PressDetector+0xb8>)
 8000f32:	691b      	ldr	r3, [r3, #16]
 8000f34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d007      	beq.n	8000f4c <PressDetector+0x6c>
		if (col == 3){
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b03      	cmp	r3, #3
 8000f40:	d101      	bne.n	8000f46 <PressDetector+0x66>
			return 12;
 8000f42:	230c      	movs	r3, #12
 8000f44:	e020      	b.n	8000f88 <PressDetector+0xa8>
		} else {
			return col + (2 * 4) - 1;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3307      	adds	r3, #7
 8000f4a:	e01d      	b.n	8000f88 <PressDetector+0xa8>
		}
	} else if (GPIOB->IDR & GPIO_PIN_7){
 8000f4c:	4b12      	ldr	r3, [pc, #72]	; (8000f98 <PressDetector+0xb8>)
 8000f4e:	691b      	ldr	r3, [r3, #16]
 8000f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d015      	beq.n	8000f84 <PressDetector+0xa4>
		switch(col){
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2b03      	cmp	r3, #3
 8000f5c:	d812      	bhi.n	8000f84 <PressDetector+0xa4>
 8000f5e:	a201      	add	r2, pc, #4	; (adr r2, 8000f64 <PressDetector+0x84>)
 8000f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f64:	08000f75 	.word	0x08000f75
 8000f68:	08000f79 	.word	0x08000f79
 8000f6c:	08000f7d 	.word	0x08000f7d
 8000f70:	08000f81 	.word	0x08000f81
		case 0:
			return 15;
 8000f74:	230f      	movs	r3, #15
 8000f76:	e007      	b.n	8000f88 <PressDetector+0xa8>
		case 1:
			return 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	e005      	b.n	8000f88 <PressDetector+0xa8>
		case 2:
			return 14;
 8000f7c:	230e      	movs	r3, #14
 8000f7e:	e003      	b.n	8000f88 <PressDetector+0xa8>
		case 3:
			return 13;
 8000f80:	230d      	movs	r3, #13
 8000f82:	e001      	b.n	8000f88 <PressDetector+0xa8>
		}
	}
	return -1;
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	48000800 	.word	0x48000800
 8000f98:	48000400 	.word	0x48000400
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <fill_sine_table>:

void fill_sine_table(void){
 8000fa0:	b590      	push	{r4, r7, lr}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
	uint16_t i, temp;
	for(i = 0; i < TABLE_SIZE; i++){
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	80fb      	strh	r3, [r7, #6]
 8000faa:	e040      	b.n	800102e <fill_sine_table+0x8e>
		temp = (uint16_t)((AMPLITUDE) * sin((2 * pi * i) / TABLE_SIZE) + DC_OFFSET);
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff fa5c 	bl	800046c <__aeabi_i2d>
 8000fb4:	a326      	add	r3, pc, #152	; (adr r3, 8001050 <fill_sine_table+0xb0>)
 8000fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fba:	f7ff fac1 	bl	8000540 <__aeabi_dmul>
 8000fbe:	4602      	mov	r2, r0
 8000fc0:	460b      	mov	r3, r1
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f04f 0200 	mov.w	r2, #0
 8000fca:	4b1f      	ldr	r3, [pc, #124]	; (8001048 <fill_sine_table+0xa8>)
 8000fcc:	f7ff fbe2 	bl	8000794 <__aeabi_ddiv>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	ec43 2b17 	vmov	d7, r2, r3
 8000fd8:	eeb0 0a47 	vmov.f32	s0, s14
 8000fdc:	eef0 0a67 	vmov.f32	s1, s15
 8000fe0:	f001 fa66 	bl	80024b0 <sin>
 8000fe4:	ec51 0b10 	vmov	r0, r1, d0
 8000fe8:	a315      	add	r3, pc, #84	; (adr r3, 8001040 <fill_sine_table+0xa0>)
 8000fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fee:	f7ff faa7 	bl	8000540 <__aeabi_dmul>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	460b      	mov	r3, r1
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	a311      	add	r3, pc, #68	; (adr r3, 8001040 <fill_sine_table+0xa0>)
 8000ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001000:	f7ff f8e8 	bl	80001d4 <__adddf3>
 8001004:	4602      	mov	r2, r0
 8001006:	460b      	mov	r3, r1
 8001008:	4610      	mov	r0, r2
 800100a:	4619      	mov	r1, r3
 800100c:	f7ff fd5a 	bl	8000ac4 <__aeabi_d2uiz>
 8001010:	4603      	mov	r3, r0
 8001012:	80bb      	strh	r3, [r7, #4]
		sine_table[i] = DAC_volt_conv(temp);
 8001014:	88fc      	ldrh	r4, [r7, #6]
 8001016:	88bb      	ldrh	r3, [r7, #4]
 8001018:	4618      	mov	r0, r3
 800101a:	f000 f9b3 	bl	8001384 <DAC_volt_conv>
 800101e:	4603      	mov	r3, r0
 8001020:	461a      	mov	r2, r3
 8001022:	4b0a      	ldr	r3, [pc, #40]	; (800104c <fill_sine_table+0xac>)
 8001024:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(i = 0; i < TABLE_SIZE; i++){
 8001028:	88fb      	ldrh	r3, [r7, #6]
 800102a:	3301      	adds	r3, #1
 800102c:	80fb      	strh	r3, [r7, #6]
 800102e:	88fb      	ldrh	r3, [r7, #6]
 8001030:	2bef      	cmp	r3, #239	; 0xef
 8001032:	d9bb      	bls.n	8000fac <fill_sine_table+0xc>
	}
}
 8001034:	bf00      	nop
 8001036:	bf00      	nop
 8001038:	370c      	adds	r7, #12
 800103a:	46bd      	mov	sp, r7
 800103c:	bd90      	pop	{r4, r7, pc}
 800103e:	bf00      	nop
 8001040:	00000000 	.word	0x00000000
 8001044:	40977000 	.word	0x40977000
 8001048:	406e0000 	.word	0x406e0000
 800104c:	20000028 	.word	0x20000028
 8001050:	f01b866e 	.word	0xf01b866e
 8001054:	401921f9 	.word	0x401921f9

08001058 <fill_saw_table>:

void fill_saw_table(void){
 8001058:	b590      	push	{r4, r7, lr}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
	uint16_t i, temp;
	for(i = 0; i < TABLE_SIZE; i++){
 800105e:	2300      	movs	r3, #0
 8001060:	80fb      	strh	r3, [r7, #6]
 8001062:	e019      	b.n	8001098 <fill_saw_table+0x40>
		temp = (uint16_t)((AMPLITUDE * i)/TABLE_SIZE);
 8001064:	88fb      	ldrh	r3, [r7, #6]
 8001066:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800106a:	fb02 f303 	mul.w	r3, r2, r3
 800106e:	4a0e      	ldr	r2, [pc, #56]	; (80010a8 <fill_saw_table+0x50>)
 8001070:	fb82 1203 	smull	r1, r2, r2, r3
 8001074:	441a      	add	r2, r3
 8001076:	11d2      	asrs	r2, r2, #7
 8001078:	17db      	asrs	r3, r3, #31
 800107a:	1ad3      	subs	r3, r2, r3
 800107c:	80bb      	strh	r3, [r7, #4]
		saw_table[i] = DAC_volt_conv(temp);
 800107e:	88fc      	ldrh	r4, [r7, #6]
 8001080:	88bb      	ldrh	r3, [r7, #4]
 8001082:	4618      	mov	r0, r3
 8001084:	f000 f97e 	bl	8001384 <DAC_volt_conv>
 8001088:	4603      	mov	r3, r0
 800108a:	461a      	mov	r2, r3
 800108c:	4b07      	ldr	r3, [pc, #28]	; (80010ac <fill_saw_table+0x54>)
 800108e:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
	for(i = 0; i < TABLE_SIZE; i++){
 8001092:	88fb      	ldrh	r3, [r7, #6]
 8001094:	3301      	adds	r3, #1
 8001096:	80fb      	strh	r3, [r7, #6]
 8001098:	88fb      	ldrh	r3, [r7, #6]
 800109a:	2bef      	cmp	r3, #239	; 0xef
 800109c:	d9e2      	bls.n	8001064 <fill_saw_table+0xc>
	}
}
 800109e:	bf00      	nop
 80010a0:	bf00      	nop
 80010a2:	370c      	adds	r7, #12
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd90      	pop	{r4, r7, pc}
 80010a8:	88888889 	.word	0x88888889
 80010ac:	20000208 	.word	0x20000208

080010b0 <fill_triangle_table>:

void fill_triangle_table(void){
 80010b0:	b590      	push	{r4, r7, lr}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
	uint16_t i, temp;
	for(i = 0; i < TABLE_SIZE/2; i++){
 80010b6:	2300      	movs	r3, #0
 80010b8:	80fb      	strh	r3, [r7, #6]
 80010ba:	e023      	b.n	8001104 <fill_triangle_table+0x54>
		temp = (uint16_t)((AMPLITUDE * i)/TABLE_SIZE);
 80010bc:	88fb      	ldrh	r3, [r7, #6]
 80010be:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80010c2:	fb02 f303 	mul.w	r3, r2, r3
 80010c6:	4a13      	ldr	r2, [pc, #76]	; (8001114 <fill_triangle_table+0x64>)
 80010c8:	fb82 1203 	smull	r1, r2, r2, r3
 80010cc:	441a      	add	r2, r3
 80010ce:	11d2      	asrs	r2, r2, #7
 80010d0:	17db      	asrs	r3, r3, #31
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	80bb      	strh	r3, [r7, #4]
		triangle_table[i] = DAC_volt_conv(temp);
 80010d6:	88fc      	ldrh	r4, [r7, #6]
 80010d8:	88bb      	ldrh	r3, [r7, #4]
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f952 	bl	8001384 <DAC_volt_conv>
 80010e0:	4603      	mov	r3, r0
 80010e2:	461a      	mov	r2, r3
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <fill_triangle_table+0x68>)
 80010e6:	f823 2014 	strh.w	r2, [r3, r4, lsl #1]
		triangle_table[(TABLE_SIZE - 1) - i] = triangle_table[i];
 80010ea:	88fa      	ldrh	r2, [r7, #6]
 80010ec:	88fb      	ldrh	r3, [r7, #6]
 80010ee:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 80010f2:	4909      	ldr	r1, [pc, #36]	; (8001118 <fill_triangle_table+0x68>)
 80010f4:	f831 1012 	ldrh.w	r1, [r1, r2, lsl #1]
 80010f8:	4a07      	ldr	r2, [pc, #28]	; (8001118 <fill_triangle_table+0x68>)
 80010fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(i = 0; i < TABLE_SIZE/2; i++){
 80010fe:	88fb      	ldrh	r3, [r7, #6]
 8001100:	3301      	adds	r3, #1
 8001102:	80fb      	strh	r3, [r7, #6]
 8001104:	88fb      	ldrh	r3, [r7, #6]
 8001106:	2b77      	cmp	r3, #119	; 0x77
 8001108:	d9d8      	bls.n	80010bc <fill_triangle_table+0xc>
	}
}
 800110a:	bf00      	nop
 800110c:	bf00      	nop
 800110e:	370c      	adds	r7, #12
 8001110:	46bd      	mov	sp, r7
 8001112:	bd90      	pop	{r4, r7, pc}
 8001114:	88888889 	.word	0x88888889
 8001118:	200003e8 	.word	0x200003e8

0800111c <TIM2_IRQHandler>:

void TIM2_IRQHandler(void){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
	 uint32_t C_int = TIM2->SR & TIM_SR_CC1IF;
 8001122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001126:	691b      	ldr	r3, [r3, #16]
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	607b      	str	r3, [r7, #4]
	 uint32_t ARR_int = TIM2->SR & TIM_SR_UIF;
 800112e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	f003 0301 	and.w	r3, r3, #1
 8001138:	603b      	str	r3, [r7, #0]

	 TIM2->SR &= ~(TIM_SR_CC1IF);
 800113a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001144:	f023 0302 	bic.w	r3, r3, #2
 8001148:	6113      	str	r3, [r2, #16]
	 TIM2->SR &= ~(TIM_SR_UIF);
 800114a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800114e:	691b      	ldr	r3, [r3, #16]
 8001150:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001154:	f023 0301 	bic.w	r3, r3, #1
 8001158:	6113      	str	r3, [r2, #16]

	 if (ARR_int){
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d063      	beq.n	8001228 <TIM2_IRQHandler+0x10c>
		 //reset CCR1 each time ARR reached
		 if (square_flag){
 8001160:	4b6c      	ldr	r3, [pc, #432]	; (8001314 <TIM2_IRQHandler+0x1f8>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00e      	beq.n	8001186 <TIM2_IRQHandler+0x6a>
			 //TIM2->CCR1 = increment;
			 TIM2->CCR1 = increment - 1;
 8001168:	4b6b      	ldr	r3, [pc, #428]	; (8001318 <TIM2_IRQHandler+0x1fc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	1e5a      	subs	r2, r3, #1
 800116e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001172:	635a      	str	r2, [r3, #52]	; 0x34
			 DAC_write(DAC_volt_conv(3000));
 8001174:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8001178:	f000 f904 	bl	8001384 <DAC_volt_conv>
 800117c:	4603      	mov	r3, r0
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f8de 	bl	8001340 <DAC_write>
		 //TIM2->CCR1 += 80000;
		 //TIM2->CCR1 += 60000;
		 //TIM2->CCR1 += 48000;

	 }
}
 8001184:	e0c1      	b.n	800130a <TIM2_IRQHandler+0x1ee>
			 if (sine_flag){
 8001186:	4b65      	ldr	r3, [pc, #404]	; (800131c <TIM2_IRQHandler+0x200>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d013      	beq.n	80011b6 <TIM2_IRQHandler+0x9a>
			 	 DAC_write(sine_table[((ccr_count + 1) * f_factor / 1000)]);
 800118e:	4b64      	ldr	r3, [pc, #400]	; (8001320 <TIM2_IRQHandler+0x204>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	4a63      	ldr	r2, [pc, #396]	; (8001324 <TIM2_IRQHandler+0x208>)
 8001196:	6812      	ldr	r2, [r2, #0]
 8001198:	fb02 f303 	mul.w	r3, r2, r3
 800119c:	4a62      	ldr	r2, [pc, #392]	; (8001328 <TIM2_IRQHandler+0x20c>)
 800119e:	fb82 1203 	smull	r1, r2, r2, r3
 80011a2:	1192      	asrs	r2, r2, #6
 80011a4:	17db      	asrs	r3, r3, #31
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	4a60      	ldr	r2, [pc, #384]	; (800132c <TIM2_IRQHandler+0x210>)
 80011aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011ae:	4618      	mov	r0, r3
 80011b0:	f000 f8c6 	bl	8001340 <DAC_write>
 80011b4:	e02e      	b.n	8001214 <TIM2_IRQHandler+0xf8>
		 	 else if (saw_flag){
 80011b6:	4b5e      	ldr	r3, [pc, #376]	; (8001330 <TIM2_IRQHandler+0x214>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d013      	beq.n	80011e6 <TIM2_IRQHandler+0xca>
			 	 DAC_write(saw_table[((ccr_count + 1) * f_factor / 1000)]);
 80011be:	4b58      	ldr	r3, [pc, #352]	; (8001320 <TIM2_IRQHandler+0x204>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	4a57      	ldr	r2, [pc, #348]	; (8001324 <TIM2_IRQHandler+0x208>)
 80011c6:	6812      	ldr	r2, [r2, #0]
 80011c8:	fb02 f303 	mul.w	r3, r2, r3
 80011cc:	4a56      	ldr	r2, [pc, #344]	; (8001328 <TIM2_IRQHandler+0x20c>)
 80011ce:	fb82 1203 	smull	r1, r2, r2, r3
 80011d2:	1192      	asrs	r2, r2, #6
 80011d4:	17db      	asrs	r3, r3, #31
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	4a56      	ldr	r2, [pc, #344]	; (8001334 <TIM2_IRQHandler+0x218>)
 80011da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 f8ae 	bl	8001340 <DAC_write>
 80011e4:	e016      	b.n	8001214 <TIM2_IRQHandler+0xf8>
		 	 else if (triangle_flag){
 80011e6:	4b54      	ldr	r3, [pc, #336]	; (8001338 <TIM2_IRQHandler+0x21c>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d012      	beq.n	8001214 <TIM2_IRQHandler+0xf8>
			 	 DAC_write(triangle_table[((ccr_count + 1) * f_factor / 1000)]);
 80011ee:	4b4c      	ldr	r3, [pc, #304]	; (8001320 <TIM2_IRQHandler+0x204>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3301      	adds	r3, #1
 80011f4:	4a4b      	ldr	r2, [pc, #300]	; (8001324 <TIM2_IRQHandler+0x208>)
 80011f6:	6812      	ldr	r2, [r2, #0]
 80011f8:	fb02 f303 	mul.w	r3, r2, r3
 80011fc:	4a4a      	ldr	r2, [pc, #296]	; (8001328 <TIM2_IRQHandler+0x20c>)
 80011fe:	fb82 1203 	smull	r1, r2, r2, r3
 8001202:	1192      	asrs	r2, r2, #6
 8001204:	17db      	asrs	r3, r3, #31
 8001206:	1ad3      	subs	r3, r2, r3
 8001208:	4a4c      	ldr	r2, [pc, #304]	; (800133c <TIM2_IRQHandler+0x220>)
 800120a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800120e:	4618      	mov	r0, r3
 8001210:	f000 f896 	bl	8001340 <DAC_write>
			 TIM2->CCR1 = increment -1;
 8001214:	4b40      	ldr	r3, [pc, #256]	; (8001318 <TIM2_IRQHandler+0x1fc>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	1e5a      	subs	r2, r3, #1
 800121a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800121e:	635a      	str	r2, [r3, #52]	; 0x34
			 ccr_count = 0;
 8001220:	4b3f      	ldr	r3, [pc, #252]	; (8001320 <TIM2_IRQHandler+0x204>)
 8001222:	2200      	movs	r2, #0
 8001224:	601a      	str	r2, [r3, #0]
}
 8001226:	e070      	b.n	800130a <TIM2_IRQHandler+0x1ee>
	 else if (C_int){
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d06d      	beq.n	800130a <TIM2_IRQHandler+0x1ee>
		 if (square_flag){
 800122e:	4b39      	ldr	r3, [pc, #228]	; (8001314 <TIM2_IRQHandler+0x1f8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d011      	beq.n	800125a <TIM2_IRQHandler+0x13e>
			 DAC_write(DAC_volt_conv(0));
 8001236:	2000      	movs	r0, #0
 8001238:	f000 f8a4 	bl	8001384 <DAC_volt_conv>
 800123c:	4603      	mov	r3, r0
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f87e 	bl	8001340 <DAC_write>
			 TIM2->CCR1 += increment; //now increment hopefully
 8001244:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124a:	4a33      	ldr	r2, [pc, #204]	; (8001318 <TIM2_IRQHandler+0x1fc>)
 800124c:	6812      	ldr	r2, [r2, #0]
 800124e:	4611      	mov	r1, r2
 8001250:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001254:	440b      	add	r3, r1
 8001256:	6353      	str	r3, [r2, #52]	; 0x34
}
 8001258:	e057      	b.n	800130a <TIM2_IRQHandler+0x1ee>
			 if (sine_flag){
 800125a:	4b30      	ldr	r3, [pc, #192]	; (800131c <TIM2_IRQHandler+0x200>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d013      	beq.n	800128a <TIM2_IRQHandler+0x16e>
				 DAC_write(sine_table[((ccr_count + 1) * f_factor / 1000)]);
 8001262:	4b2f      	ldr	r3, [pc, #188]	; (8001320 <TIM2_IRQHandler+0x204>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	3301      	adds	r3, #1
 8001268:	4a2e      	ldr	r2, [pc, #184]	; (8001324 <TIM2_IRQHandler+0x208>)
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	fb02 f303 	mul.w	r3, r2, r3
 8001270:	4a2d      	ldr	r2, [pc, #180]	; (8001328 <TIM2_IRQHandler+0x20c>)
 8001272:	fb82 1203 	smull	r1, r2, r2, r3
 8001276:	1192      	asrs	r2, r2, #6
 8001278:	17db      	asrs	r3, r3, #31
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	4a2b      	ldr	r2, [pc, #172]	; (800132c <TIM2_IRQHandler+0x210>)
 800127e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 f85c 	bl	8001340 <DAC_write>
 8001288:	e02e      	b.n	80012e8 <TIM2_IRQHandler+0x1cc>
			 else if (saw_flag){
 800128a:	4b29      	ldr	r3, [pc, #164]	; (8001330 <TIM2_IRQHandler+0x214>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2b00      	cmp	r3, #0
 8001290:	d013      	beq.n	80012ba <TIM2_IRQHandler+0x19e>
				 DAC_write(saw_table[((ccr_count + 1) * f_factor / 1000)]);
 8001292:	4b23      	ldr	r3, [pc, #140]	; (8001320 <TIM2_IRQHandler+0x204>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a22      	ldr	r2, [pc, #136]	; (8001324 <TIM2_IRQHandler+0x208>)
 800129a:	6812      	ldr	r2, [r2, #0]
 800129c:	fb02 f303 	mul.w	r3, r2, r3
 80012a0:	4a21      	ldr	r2, [pc, #132]	; (8001328 <TIM2_IRQHandler+0x20c>)
 80012a2:	fb82 1203 	smull	r1, r2, r2, r3
 80012a6:	1192      	asrs	r2, r2, #6
 80012a8:	17db      	asrs	r3, r3, #31
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	4a21      	ldr	r2, [pc, #132]	; (8001334 <TIM2_IRQHandler+0x218>)
 80012ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012b2:	4618      	mov	r0, r3
 80012b4:	f000 f844 	bl	8001340 <DAC_write>
 80012b8:	e016      	b.n	80012e8 <TIM2_IRQHandler+0x1cc>
			 else if (triangle_flag){
 80012ba:	4b1f      	ldr	r3, [pc, #124]	; (8001338 <TIM2_IRQHandler+0x21c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d012      	beq.n	80012e8 <TIM2_IRQHandler+0x1cc>
				 DAC_write(triangle_table[((ccr_count + 1) * f_factor / 1000)]);
 80012c2:	4b17      	ldr	r3, [pc, #92]	; (8001320 <TIM2_IRQHandler+0x204>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3301      	adds	r3, #1
 80012c8:	4a16      	ldr	r2, [pc, #88]	; (8001324 <TIM2_IRQHandler+0x208>)
 80012ca:	6812      	ldr	r2, [r2, #0]
 80012cc:	fb02 f303 	mul.w	r3, r2, r3
 80012d0:	4a15      	ldr	r2, [pc, #84]	; (8001328 <TIM2_IRQHandler+0x20c>)
 80012d2:	fb82 1203 	smull	r1, r2, r2, r3
 80012d6:	1192      	asrs	r2, r2, #6
 80012d8:	17db      	asrs	r3, r3, #31
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	4a17      	ldr	r2, [pc, #92]	; (800133c <TIM2_IRQHandler+0x220>)
 80012de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f82c 	bl	8001340 <DAC_write>
			 ccr_count += increment;
 80012e8:	4b0d      	ldr	r3, [pc, #52]	; (8001320 <TIM2_IRQHandler+0x204>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b0a      	ldr	r3, [pc, #40]	; (8001318 <TIM2_IRQHandler+0x1fc>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4413      	add	r3, r2
 80012f2:	4a0b      	ldr	r2, [pc, #44]	; (8001320 <TIM2_IRQHandler+0x204>)
 80012f4:	6013      	str	r3, [r2, #0]
			 TIM2->CCR1 += increment;
 80012f6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012fc:	4a06      	ldr	r2, [pc, #24]	; (8001318 <TIM2_IRQHandler+0x1fc>)
 80012fe:	6812      	ldr	r2, [r2, #0]
 8001300:	4611      	mov	r1, r2
 8001302:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001306:	440b      	add	r3, r1
 8001308:	6353      	str	r3, [r2, #52]	; 0x34
}
 800130a:	bf00      	nop
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
 8001312:	bf00      	nop
 8001314:	200005d8 	.word	0x200005d8
 8001318:	200005cc 	.word	0x200005cc
 800131c:	200005e0 	.word	0x200005e0
 8001320:	200005c8 	.word	0x200005c8
 8001324:	200005d0 	.word	0x200005d0
 8001328:	10624dd3 	.word	0x10624dd3
 800132c:	20000028 	.word	0x20000028
 8001330:	200005dc 	.word	0x200005dc
 8001334:	20000208 	.word	0x20000208
 8001338:	200005e4 	.word	0x200005e4
 800133c:	200003e8 	.word	0x200003e8

08001340 <DAC_write>:

void DAC_write(uint16_t data){
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	4603      	mov	r3, r0
 8001348:	80fb      	strh	r3, [r7, #6]
  while (!(SPI1->SR & SPI_SR_TXE)){
 800134a:	bf00      	nop
 800134c:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <DAC_write+0x40>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f003 0302 	and.w	r3, r3, #2
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f9      	beq.n	800134c <DAC_write+0xc>
	  //wait until transmit fifo is empty
  }

  SPI1->DR = (0b0011 << 12) | data;
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
 800135e:	b29a      	uxth	r2, r3
 8001360:	4b07      	ldr	r3, [pc, #28]	; (8001380 <DAC_write+0x40>)
 8001362:	60da      	str	r2, [r3, #12]

  while (!(SPI1->SR & SPI_SR_TXE)){
 8001364:	bf00      	nop
 8001366:	4b06      	ldr	r3, [pc, #24]	; (8001380 <DAC_write+0x40>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	2b00      	cmp	r3, #0
 8001370:	d0f9      	beq.n	8001366 <DAC_write+0x26>
	  //wait until tramsit fifo empty
  }
}
 8001372:	bf00      	nop
 8001374:	bf00      	nop
 8001376:	370c      	adds	r7, #12
 8001378:	46bd      	mov	sp, r7
 800137a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137e:	4770      	bx	lr
 8001380:	40013000 	.word	0x40013000

08001384 <DAC_volt_conv>:

uint16_t DAC_volt_conv(uint16_t milli_volt){
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	4603      	mov	r3, r0
 800138c:	80fb      	strh	r3, [r7, #6]
  return (4096 / Vref) * milli_volt;
 800138e:	88fb      	ldrh	r3, [r7, #6]
}
 8001390:	4618      	mov	r0, r3
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b096      	sub	sp, #88	; 0x58
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0314 	add.w	r3, r7, #20
 80013a6:	2244      	movs	r2, #68	; 0x44
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f001 f852 	bl	8002454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013be:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013c2:	f000 fa29 	bl	8001818 <HAL_PWREx_ControlVoltageScaling>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <SystemClock_Config+0x34>
  {
	Error_Handler();
 80013cc:	f000 f82c 	bl	8001428 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013d0:	2310      	movs	r3, #16
 80013d2:	617b      	str	r3, [r7, #20]
  //RCC_OscInitStruct.MSIState = RCC_MSI_ON;  //datasheet says NOT to turn on the MSI then change the frequency.
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_9;
 80013d8:	2390      	movs	r3, #144	; 0x90
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
	#define RCC_MSIRANGE_7                 MSI = 8 MHz
	#define RCC_MSIRANGE_8                 MSI = 16 MHz
	#define RCC_MSIRANGE_9                 MSI = 24 MHz
	#define RCC_MSIRANGE_10                MSI = 32 MHz
	#define RCC_MSIRANGE_11                MSI = 48 MHz   dont use this one*/
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;  //datasheet says NOT to turn on the MSI then change the frequency.
 80013dc:	2301      	movs	r3, #1
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e4:	f107 0314 	add.w	r3, r7, #20
 80013e8:	4618      	mov	r0, r3
 80013ea:	f000 fa6b 	bl	80018c4 <HAL_RCC_OscConfig>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <SystemClock_Config+0x5c>
  {
	Error_Handler();
 80013f4:	f000 f818 	bl	8001428 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013f8:	230f      	movs	r3, #15
 80013fa:	603b      	str	r3, [r7, #0]
							  |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013fc:	2300      	movs	r3, #0
 80013fe:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001400:	2300      	movs	r3, #0
 8001402:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001404:	2300      	movs	r3, #0
 8001406:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f000 fe33 	bl	800207c <HAL_RCC_ClockConfig>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <SystemClock_Config+0x84>
  {
	Error_Handler();
 800141c:	f000 f804 	bl	8001428 <Error_Handler>
  }
}
 8001420:	bf00      	nop
 8001422:	3758      	adds	r7, #88	; 0x58
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143a:	4b0f      	ldr	r3, [pc, #60]	; (8001478 <HAL_MspInit+0x44>)
 800143c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800143e:	4a0e      	ldr	r2, [pc, #56]	; (8001478 <HAL_MspInit+0x44>)
 8001440:	f043 0301 	orr.w	r3, r3, #1
 8001444:	6613      	str	r3, [r2, #96]	; 0x60
 8001446:	4b0c      	ldr	r3, [pc, #48]	; (8001478 <HAL_MspInit+0x44>)
 8001448:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800144a:	f003 0301 	and.w	r3, r3, #1
 800144e:	607b      	str	r3, [r7, #4]
 8001450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	4b09      	ldr	r3, [pc, #36]	; (8001478 <HAL_MspInit+0x44>)
 8001454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_MspInit+0x44>)
 8001458:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800145c:	6593      	str	r3, [r2, #88]	; 0x58
 800145e:	4b06      	ldr	r3, [pc, #24]	; (8001478 <HAL_MspInit+0x44>)
 8001460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001466:	603b      	str	r3, [r7, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop
 8001478:	40021000 	.word	0x40021000

0800147c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800147c:	b480      	push	{r7}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001480:	e7fe      	b.n	8001480 <NMI_Handler+0x4>

08001482 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001486:	e7fe      	b.n	8001486 <HardFault_Handler+0x4>

08001488 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800148c:	e7fe      	b.n	800148c <MemManage_Handler+0x4>

0800148e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800148e:	b480      	push	{r7}
 8001490:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001492:	e7fe      	b.n	8001492 <BusFault_Handler+0x4>

08001494 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001498:	e7fe      	b.n	8001498 <UsageFault_Handler+0x4>

0800149a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80014ac:	bf00      	nop
 80014ae:	46bd      	mov	sp, r7
 80014b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b4:	4770      	bx	lr

080014b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80014ba:	bf00      	nop
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr

080014c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014c8:	f000 f892 	bl	80015f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014cc:	bf00      	nop
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014d4:	4b06      	ldr	r3, [pc, #24]	; (80014f0 <SystemInit+0x20>)
 80014d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <SystemInit+0x20>)
 80014dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014e4:	bf00      	nop
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	e000ed00 	.word	0xe000ed00

080014f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800152c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014f8:	f7ff ffea 	bl	80014d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014fc:	480c      	ldr	r0, [pc, #48]	; (8001530 <LoopForever+0x6>)
  ldr r1, =_edata
 80014fe:	490d      	ldr	r1, [pc, #52]	; (8001534 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001500:	4a0d      	ldr	r2, [pc, #52]	; (8001538 <LoopForever+0xe>)
  movs r3, #0
 8001502:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001504:	e002      	b.n	800150c <LoopCopyDataInit>

08001506 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001506:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001508:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800150a:	3304      	adds	r3, #4

0800150c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800150c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800150e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001510:	d3f9      	bcc.n	8001506 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001512:	4a0a      	ldr	r2, [pc, #40]	; (800153c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001514:	4c0a      	ldr	r4, [pc, #40]	; (8001540 <LoopForever+0x16>)
  movs r3, #0
 8001516:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001518:	e001      	b.n	800151e <LoopFillZerobss>

0800151a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800151a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800151c:	3204      	adds	r2, #4

0800151e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800151e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001520:	d3fb      	bcc.n	800151a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001522:	f000 ff9f 	bl	8002464 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001526:	f7ff faed 	bl	8000b04 <main>

0800152a <LoopForever>:

LoopForever:
    b LoopForever
 800152a:	e7fe      	b.n	800152a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800152c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001530:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001534:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001538:	08003768 	.word	0x08003768
  ldr r2, =_sbss
 800153c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001540:	200005f4 	.word	0x200005f4

08001544 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001544:	e7fe      	b.n	8001544 <ADC1_2_IRQHandler>

08001546 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001546:	b580      	push	{r7, lr}
 8001548:	b082      	sub	sp, #8
 800154a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800154c:	2300      	movs	r3, #0
 800154e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001550:	2003      	movs	r0, #3
 8001552:	f000 f91f 	bl	8001794 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001556:	200f      	movs	r0, #15
 8001558:	f000 f80e 	bl	8001578 <HAL_InitTick>
 800155c:	4603      	mov	r3, r0
 800155e:	2b00      	cmp	r3, #0
 8001560:	d002      	beq.n	8001568 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001562:	2301      	movs	r3, #1
 8001564:	71fb      	strb	r3, [r7, #7]
 8001566:	e001      	b.n	800156c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001568:	f7ff ff64 	bl	8001434 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800156c:	79fb      	ldrb	r3, [r7, #7]
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
	...

08001578 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b084      	sub	sp, #16
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001580:	2300      	movs	r3, #0
 8001582:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_InitTick+0x6c>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d023      	beq.n	80015d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800158c:	4b16      	ldr	r3, [pc, #88]	; (80015e8 <HAL_InitTick+0x70>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_InitTick+0x6c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	4619      	mov	r1, r3
 8001596:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159a:	fbb3 f3f1 	udiv	r3, r3, r1
 800159e:	fbb2 f3f3 	udiv	r3, r2, r3
 80015a2:	4618      	mov	r0, r3
 80015a4:	f000 f91d 	bl	80017e2 <HAL_SYSTICK_Config>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10f      	bne.n	80015ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b0f      	cmp	r3, #15
 80015b2:	d809      	bhi.n	80015c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015b4:	2200      	movs	r2, #0
 80015b6:	6879      	ldr	r1, [r7, #4]
 80015b8:	f04f 30ff 	mov.w	r0, #4294967295
 80015bc:	f000 f8f5 	bl	80017aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015c0:	4a0a      	ldr	r2, [pc, #40]	; (80015ec <HAL_InitTick+0x74>)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e007      	b.n	80015d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	73fb      	strb	r3, [r7, #15]
 80015cc:	e004      	b.n	80015d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	e001      	b.n	80015d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3710      	adds	r7, #16
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000008 	.word	0x20000008
 80015e8:	20000000 	.word	0x20000000
 80015ec:	20000004 	.word	0x20000004

080015f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015f4:	4b06      	ldr	r3, [pc, #24]	; (8001610 <HAL_IncTick+0x20>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	461a      	mov	r2, r3
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_IncTick+0x24>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4413      	add	r3, r2
 8001600:	4a04      	ldr	r2, [pc, #16]	; (8001614 <HAL_IncTick+0x24>)
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008
 8001614:	200005f0 	.word	0x200005f0

08001618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return uwTick;
 800161c:	4b03      	ldr	r3, [pc, #12]	; (800162c <HAL_GetTick+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	200005f0 	.word	0x200005f0

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0c      	ldr	r3, [pc, #48]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001658:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800165c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001660:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001662:	4a04      	ldr	r2, [pc, #16]	; (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	60d3      	str	r3, [r2, #12]
}
 8001668:	bf00      	nop
 800166a:	3714      	adds	r7, #20
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	; (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	6039      	str	r1, [r7, #0]
 800169e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	db0a      	blt.n	80016be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a8:	683b      	ldr	r3, [r7, #0]
 80016aa:	b2da      	uxtb	r2, r3
 80016ac:	490c      	ldr	r1, [pc, #48]	; (80016e0 <__NVIC_SetPriority+0x4c>)
 80016ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b2:	0112      	lsls	r2, r2, #4
 80016b4:	b2d2      	uxtb	r2, r2
 80016b6:	440b      	add	r3, r1
 80016b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016bc:	e00a      	b.n	80016d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	4908      	ldr	r1, [pc, #32]	; (80016e4 <__NVIC_SetPriority+0x50>)
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	3b04      	subs	r3, #4
 80016cc:	0112      	lsls	r2, r2, #4
 80016ce:	b2d2      	uxtb	r2, r2
 80016d0:	440b      	add	r3, r1
 80016d2:	761a      	strb	r2, [r3, #24]
}
 80016d4:	bf00      	nop
 80016d6:	370c      	adds	r7, #12
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	e000e100 	.word	0xe000e100
 80016e4:	e000ed00 	.word	0xe000ed00

080016e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b089      	sub	sp, #36	; 0x24
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	60f8      	str	r0, [r7, #12]
 80016f0:	60b9      	str	r1, [r7, #8]
 80016f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0307 	and.w	r3, r3, #7
 80016fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	f1c3 0307 	rsb	r3, r3, #7
 8001702:	2b04      	cmp	r3, #4
 8001704:	bf28      	it	cs
 8001706:	2304      	movcs	r3, #4
 8001708:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	3304      	adds	r3, #4
 800170e:	2b06      	cmp	r3, #6
 8001710:	d902      	bls.n	8001718 <NVIC_EncodePriority+0x30>
 8001712:	69fb      	ldr	r3, [r7, #28]
 8001714:	3b03      	subs	r3, #3
 8001716:	e000      	b.n	800171a <NVIC_EncodePriority+0x32>
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800171c:	f04f 32ff 	mov.w	r2, #4294967295
 8001720:	69bb      	ldr	r3, [r7, #24]
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	43da      	mvns	r2, r3
 8001728:	68bb      	ldr	r3, [r7, #8]
 800172a:	401a      	ands	r2, r3
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001730:	f04f 31ff 	mov.w	r1, #4294967295
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	fa01 f303 	lsl.w	r3, r1, r3
 800173a:	43d9      	mvns	r1, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001740:	4313      	orrs	r3, r2
         );
}
 8001742:	4618      	mov	r0, r3
 8001744:	3724      	adds	r7, #36	; 0x24
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
	...

08001750 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3b01      	subs	r3, #1
 800175c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001760:	d301      	bcc.n	8001766 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001762:	2301      	movs	r3, #1
 8001764:	e00f      	b.n	8001786 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001766:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <SysTick_Config+0x40>)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	3b01      	subs	r3, #1
 800176c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800176e:	210f      	movs	r1, #15
 8001770:	f04f 30ff 	mov.w	r0, #4294967295
 8001774:	f7ff ff8e 	bl	8001694 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001778:	4b05      	ldr	r3, [pc, #20]	; (8001790 <SysTick_Config+0x40>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800177e:	4b04      	ldr	r3, [pc, #16]	; (8001790 <SysTick_Config+0x40>)
 8001780:	2207      	movs	r2, #7
 8001782:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	e000e010 	.word	0xe000e010

08001794 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	f7ff ff47 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b086      	sub	sp, #24
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	4603      	mov	r3, r0
 80017b2:	60b9      	str	r1, [r7, #8]
 80017b4:	607a      	str	r2, [r7, #4]
 80017b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80017b8:	2300      	movs	r3, #0
 80017ba:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017bc:	f7ff ff5c 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017c0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017c2:	687a      	ldr	r2, [r7, #4]
 80017c4:	68b9      	ldr	r1, [r7, #8]
 80017c6:	6978      	ldr	r0, [r7, #20]
 80017c8:	f7ff ff8e 	bl	80016e8 <NVIC_EncodePriority>
 80017cc:	4602      	mov	r2, r0
 80017ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017d2:	4611      	mov	r1, r2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7ff ff5d 	bl	8001694 <__NVIC_SetPriority>
}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}

080017e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ffb0 	bl	8001750 <SysTick_Config>
 80017f0:	4603      	mov	r3, r0
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3708      	adds	r7, #8
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
	...

080017fc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001800:	4b04      	ldr	r3, [pc, #16]	; (8001814 <HAL_PWREx_GetVoltageRange+0x18>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001808:	4618      	mov	r0, r3
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	40007000 	.word	0x40007000

08001818 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001826:	d130      	bne.n	800188a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001828:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001830:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001834:	d038      	beq.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001836:	4b20      	ldr	r3, [pc, #128]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800183e:	4a1e      	ldr	r2, [pc, #120]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001840:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001844:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2232      	movs	r2, #50	; 0x32
 800184c:	fb02 f303 	mul.w	r3, r2, r3
 8001850:	4a1b      	ldr	r2, [pc, #108]	; (80018c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001852:	fba2 2303 	umull	r2, r3, r2, r3
 8001856:	0c9b      	lsrs	r3, r3, #18
 8001858:	3301      	adds	r3, #1
 800185a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800185c:	e002      	b.n	8001864 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	3b01      	subs	r3, #1
 8001862:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001864:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001866:	695b      	ldr	r3, [r3, #20]
 8001868:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800186c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001870:	d102      	bne.n	8001878 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d1f2      	bne.n	800185e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001878:	4b0f      	ldr	r3, [pc, #60]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800187a:	695b      	ldr	r3, [r3, #20]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001884:	d110      	bne.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e00f      	b.n	80018aa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001892:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001896:	d007      	beq.n	80018a8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018a0:	4a05      	ldr	r2, [pc, #20]	; (80018b8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018a2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018a6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3714      	adds	r7, #20
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	40007000 	.word	0x40007000
 80018bc:	20000000 	.word	0x20000000
 80018c0:	431bde83 	.word	0x431bde83

080018c4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b088      	sub	sp, #32
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e3ca      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d6:	4b97      	ldr	r3, [pc, #604]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e0:	4b94      	ldr	r3, [pc, #592]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f003 0310 	and.w	r3, r3, #16
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	f000 80e4 	beq.w	8001ac0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d007      	beq.n	800190e <HAL_RCC_OscConfig+0x4a>
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	f040 808b 	bne.w	8001a1c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	2b01      	cmp	r3, #1
 800190a:	f040 8087 	bne.w	8001a1c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800190e:	4b89      	ldr	r3, [pc, #548]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	2b00      	cmp	r3, #0
 8001918:	d005      	beq.n	8001926 <HAL_RCC_OscConfig+0x62>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	699b      	ldr	r3, [r3, #24]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e3a2      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6a1a      	ldr	r2, [r3, #32]
 800192a:	4b82      	ldr	r3, [pc, #520]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 0308 	and.w	r3, r3, #8
 8001932:	2b00      	cmp	r3, #0
 8001934:	d004      	beq.n	8001940 <HAL_RCC_OscConfig+0x7c>
 8001936:	4b7f      	ldr	r3, [pc, #508]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800193e:	e005      	b.n	800194c <HAL_RCC_OscConfig+0x88>
 8001940:	4b7c      	ldr	r3, [pc, #496]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001946:	091b      	lsrs	r3, r3, #4
 8001948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800194c:	4293      	cmp	r3, r2
 800194e:	d223      	bcs.n	8001998 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6a1b      	ldr	r3, [r3, #32]
 8001954:	4618      	mov	r0, r3
 8001956:	f000 fd1d 	bl	8002394 <RCC_SetFlashLatencyFromMSIRange>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001960:	2301      	movs	r3, #1
 8001962:	e383      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001964:	4b73      	ldr	r3, [pc, #460]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a72      	ldr	r2, [pc, #456]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 800196a:	f043 0308 	orr.w	r3, r3, #8
 800196e:	6013      	str	r3, [r2, #0]
 8001970:	4b70      	ldr	r3, [pc, #448]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a1b      	ldr	r3, [r3, #32]
 800197c:	496d      	ldr	r1, [pc, #436]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 800197e:	4313      	orrs	r3, r2
 8001980:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001982:	4b6c      	ldr	r3, [pc, #432]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	021b      	lsls	r3, r3, #8
 8001990:	4968      	ldr	r1, [pc, #416]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001992:	4313      	orrs	r3, r2
 8001994:	604b      	str	r3, [r1, #4]
 8001996:	e025      	b.n	80019e4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001998:	4b66      	ldr	r3, [pc, #408]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a65      	ldr	r2, [pc, #404]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 800199e:	f043 0308 	orr.w	r3, r3, #8
 80019a2:	6013      	str	r3, [r2, #0]
 80019a4:	4b63      	ldr	r3, [pc, #396]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4960      	ldr	r1, [pc, #384]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019b2:	4313      	orrs	r3, r2
 80019b4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019b6:	4b5f      	ldr	r3, [pc, #380]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69db      	ldr	r3, [r3, #28]
 80019c2:	021b      	lsls	r3, r3, #8
 80019c4:	495b      	ldr	r1, [pc, #364]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019c6:	4313      	orrs	r3, r2
 80019c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019ca:	69bb      	ldr	r3, [r7, #24]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d109      	bne.n	80019e4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f000 fcdd 	bl	8002394 <RCC_SetFlashLatencyFromMSIRange>
 80019da:	4603      	mov	r3, r0
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d001      	beq.n	80019e4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019e0:	2301      	movs	r3, #1
 80019e2:	e343      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019e4:	f000 fc4a 	bl	800227c <HAL_RCC_GetSysClockFreq>
 80019e8:	4602      	mov	r2, r0
 80019ea:	4b52      	ldr	r3, [pc, #328]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	091b      	lsrs	r3, r3, #4
 80019f0:	f003 030f 	and.w	r3, r3, #15
 80019f4:	4950      	ldr	r1, [pc, #320]	; (8001b38 <HAL_RCC_OscConfig+0x274>)
 80019f6:	5ccb      	ldrb	r3, [r1, r3]
 80019f8:	f003 031f 	and.w	r3, r3, #31
 80019fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001a00:	4a4e      	ldr	r2, [pc, #312]	; (8001b3c <HAL_RCC_OscConfig+0x278>)
 8001a02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a04:	4b4e      	ldr	r3, [pc, #312]	; (8001b40 <HAL_RCC_OscConfig+0x27c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f7ff fdb5 	bl	8001578 <HAL_InitTick>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d052      	beq.n	8001abe <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a18:	7bfb      	ldrb	r3, [r7, #15]
 8001a1a:	e327      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	699b      	ldr	r3, [r3, #24]
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d032      	beq.n	8001a8a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a24:	4b43      	ldr	r3, [pc, #268]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a42      	ldr	r2, [pc, #264]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a2a:	f043 0301 	orr.w	r3, r3, #1
 8001a2e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a30:	f7ff fdf2 	bl	8001618 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a38:	f7ff fdee 	bl	8001618 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e310      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a4a:	4b3a      	ldr	r3, [pc, #232]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 0302 	and.w	r3, r3, #2
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a56:	4b37      	ldr	r3, [pc, #220]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a36      	ldr	r2, [pc, #216]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a5c:	f043 0308 	orr.w	r3, r3, #8
 8001a60:	6013      	str	r3, [r2, #0]
 8001a62:	4b34      	ldr	r3, [pc, #208]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a1b      	ldr	r3, [r3, #32]
 8001a6e:	4931      	ldr	r1, [pc, #196]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a74:	4b2f      	ldr	r3, [pc, #188]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
 8001a80:	021b      	lsls	r3, r3, #8
 8001a82:	492c      	ldr	r1, [pc, #176]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	604b      	str	r3, [r1, #4]
 8001a88:	e01a      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a8a:	4b2a      	ldr	r3, [pc, #168]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4a29      	ldr	r2, [pc, #164]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001a90:	f023 0301 	bic.w	r3, r3, #1
 8001a94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a96:	f7ff fdbf 	bl	8001618 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a9e:	f7ff fdbb 	bl	8001618 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e2dd      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001ab0:	4b20      	ldr	r3, [pc, #128]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f0      	bne.n	8001a9e <HAL_RCC_OscConfig+0x1da>
 8001abc:	e000      	b.n	8001ac0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001abe:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0301 	and.w	r3, r3, #1
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d074      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	2b08      	cmp	r3, #8
 8001ad0:	d005      	beq.n	8001ade <HAL_RCC_OscConfig+0x21a>
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d10e      	bne.n	8001af6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	2b03      	cmp	r3, #3
 8001adc:	d10b      	bne.n	8001af6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ade:	4b15      	ldr	r3, [pc, #84]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d064      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d160      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e2ba      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afe:	d106      	bne.n	8001b0e <HAL_RCC_OscConfig+0x24a>
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b0a:	6013      	str	r3, [r2, #0]
 8001b0c:	e026      	b.n	8001b5c <HAL_RCC_OscConfig+0x298>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b16:	d115      	bne.n	8001b44 <HAL_RCC_OscConfig+0x280>
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a05      	ldr	r2, [pc, #20]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	4b03      	ldr	r3, [pc, #12]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a02      	ldr	r2, [pc, #8]	; (8001b34 <HAL_RCC_OscConfig+0x270>)
 8001b2a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b2e:	6013      	str	r3, [r2, #0]
 8001b30:	e014      	b.n	8001b5c <HAL_RCC_OscConfig+0x298>
 8001b32:	bf00      	nop
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08003548 	.word	0x08003548
 8001b3c:	20000000 	.word	0x20000000
 8001b40:	20000004 	.word	0x20000004
 8001b44:	4ba0      	ldr	r3, [pc, #640]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a9f      	ldr	r2, [pc, #636]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b4e:	6013      	str	r3, [r2, #0]
 8001b50:	4b9d      	ldr	r3, [pc, #628]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a9c      	ldr	r2, [pc, #624]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d013      	beq.n	8001b8c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff fd58 	bl	8001618 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fd54 	bl	8001618 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e276      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b7e:	4b92      	ldr	r3, [pc, #584]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d0f0      	beq.n	8001b6c <HAL_RCC_OscConfig+0x2a8>
 8001b8a:	e014      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8c:	f7ff fd44 	bl	8001618 <HAL_GetTick>
 8001b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b92:	e008      	b.n	8001ba6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b94:	f7ff fd40 	bl	8001618 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	693b      	ldr	r3, [r7, #16]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	2b64      	cmp	r3, #100	; 0x64
 8001ba0:	d901      	bls.n	8001ba6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ba2:	2303      	movs	r3, #3
 8001ba4:	e262      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ba6:	4b88      	ldr	r3, [pc, #544]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f0      	bne.n	8001b94 <HAL_RCC_OscConfig+0x2d0>
 8001bb2:	e000      	b.n	8001bb6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bb4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d060      	beq.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b04      	cmp	r3, #4
 8001bc6:	d005      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x310>
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	2b0c      	cmp	r3, #12
 8001bcc:	d119      	bne.n	8001c02 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bce:	697b      	ldr	r3, [r7, #20]
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d116      	bne.n	8001c02 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bd4:	4b7c      	ldr	r3, [pc, #496]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d005      	beq.n	8001bec <HAL_RCC_OscConfig+0x328>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001be8:	2301      	movs	r3, #1
 8001bea:	e23f      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bec:	4b76      	ldr	r3, [pc, #472]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	061b      	lsls	r3, r3, #24
 8001bfa:	4973      	ldr	r1, [pc, #460]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c00:	e040      	b.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d023      	beq.n	8001c52 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c0a:	4b6f      	ldr	r3, [pc, #444]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a6e      	ldr	r2, [pc, #440]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c14:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c16:	f7ff fcff 	bl	8001618 <HAL_GetTick>
 8001c1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c1c:	e008      	b.n	8001c30 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1e:	f7ff fcfb 	bl	8001618 <HAL_GetTick>
 8001c22:	4602      	mov	r2, r0
 8001c24:	693b      	ldr	r3, [r7, #16]
 8001c26:	1ad3      	subs	r3, r2, r3
 8001c28:	2b02      	cmp	r3, #2
 8001c2a:	d901      	bls.n	8001c30 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c2c:	2303      	movs	r3, #3
 8001c2e:	e21d      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c30:	4b65      	ldr	r3, [pc, #404]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d0f0      	beq.n	8001c1e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c3c:	4b62      	ldr	r3, [pc, #392]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	691b      	ldr	r3, [r3, #16]
 8001c48:	061b      	lsls	r3, r3, #24
 8001c4a:	495f      	ldr	r1, [pc, #380]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	604b      	str	r3, [r1, #4]
 8001c50:	e018      	b.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c52:	4b5d      	ldr	r3, [pc, #372]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	4a5c      	ldr	r2, [pc, #368]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff fcdb 	bl	8001618 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c66:	f7ff fcd7 	bl	8001618 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e1f9      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c78:	4b53      	ldr	r3, [pc, #332]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0308 	and.w	r3, r3, #8
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d03c      	beq.n	8001d0a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	695b      	ldr	r3, [r3, #20]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d01c      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c98:	4b4b      	ldr	r3, [pc, #300]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c9e:	4a4a      	ldr	r2, [pc, #296]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001ca0:	f043 0301 	orr.w	r3, r3, #1
 8001ca4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ca8:	f7ff fcb6 	bl	8001618 <HAL_GetTick>
 8001cac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cae:	e008      	b.n	8001cc2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cb0:	f7ff fcb2 	bl	8001618 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	693b      	ldr	r3, [r7, #16]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d901      	bls.n	8001cc2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e1d4      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cc2:	4b41      	ldr	r3, [pc, #260]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cc8:	f003 0302 	and.w	r3, r3, #2
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d0ef      	beq.n	8001cb0 <HAL_RCC_OscConfig+0x3ec>
 8001cd0:	e01b      	b.n	8001d0a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cd2:	4b3d      	ldr	r3, [pc, #244]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cd8:	4a3b      	ldr	r2, [pc, #236]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cda:	f023 0301 	bic.w	r3, r3, #1
 8001cde:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ce2:	f7ff fc99 	bl	8001618 <HAL_GetTick>
 8001ce6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ce8:	e008      	b.n	8001cfc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cea:	f7ff fc95 	bl	8001618 <HAL_GetTick>
 8001cee:	4602      	mov	r2, r0
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	1ad3      	subs	r3, r2, r3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d901      	bls.n	8001cfc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e1b7      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cfc:	4b32      	ldr	r3, [pc, #200]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1ef      	bne.n	8001cea <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0304 	and.w	r3, r3, #4
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80a6 	beq.w	8001e64 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d1c:	4b2a      	ldr	r3, [pc, #168]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10d      	bne.n	8001d44 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d28:	4b27      	ldr	r3, [pc, #156]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	4a26      	ldr	r2, [pc, #152]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d32:	6593      	str	r3, [r2, #88]	; 0x58
 8001d34:	4b24      	ldr	r3, [pc, #144]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	60bb      	str	r3, [r7, #8]
 8001d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d40:	2301      	movs	r3, #1
 8001d42:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d44:	4b21      	ldr	r3, [pc, #132]	; (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d118      	bne.n	8001d82 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d50:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a1d      	ldr	r2, [pc, #116]	; (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d5c:	f7ff fc5c 	bl	8001618 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d64:	f7ff fc58 	bl	8001618 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b02      	cmp	r3, #2
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e17a      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d76:	4b15      	ldr	r3, [pc, #84]	; (8001dcc <HAL_RCC_OscConfig+0x508>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d108      	bne.n	8001d9c <HAL_RCC_OscConfig+0x4d8>
 8001d8a:	4b0f      	ldr	r3, [pc, #60]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	4a0d      	ldr	r2, [pc, #52]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d9a:	e029      	b.n	8001df0 <HAL_RCC_OscConfig+0x52c>
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	689b      	ldr	r3, [r3, #8]
 8001da0:	2b05      	cmp	r3, #5
 8001da2:	d115      	bne.n	8001dd0 <HAL_RCC_OscConfig+0x50c>
 8001da4:	4b08      	ldr	r3, [pc, #32]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001daa:	4a07      	ldr	r2, [pc, #28]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001dac:	f043 0304 	orr.w	r3, r3, #4
 8001db0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db4:	4b04      	ldr	r3, [pc, #16]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dba:	4a03      	ldr	r2, [pc, #12]	; (8001dc8 <HAL_RCC_OscConfig+0x504>)
 8001dbc:	f043 0301 	orr.w	r3, r3, #1
 8001dc0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dc4:	e014      	b.n	8001df0 <HAL_RCC_OscConfig+0x52c>
 8001dc6:	bf00      	nop
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40007000 	.word	0x40007000
 8001dd0:	4b9c      	ldr	r3, [pc, #624]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd6:	4a9b      	ldr	r2, [pc, #620]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001dd8:	f023 0301 	bic.w	r3, r3, #1
 8001ddc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001de0:	4b98      	ldr	r3, [pc, #608]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de6:	4a97      	ldr	r2, [pc, #604]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001de8:	f023 0304 	bic.w	r3, r3, #4
 8001dec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d016      	beq.n	8001e26 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001df8:	f7ff fc0e 	bl	8001618 <HAL_GetTick>
 8001dfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001dfe:	e00a      	b.n	8001e16 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7ff fc0a 	bl	8001618 <HAL_GetTick>
 8001e04:	4602      	mov	r2, r0
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e12a      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e16:	4b8b      	ldr	r3, [pc, #556]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ed      	beq.n	8001e00 <HAL_RCC_OscConfig+0x53c>
 8001e24:	e015      	b.n	8001e52 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e26:	f7ff fbf7 	bl	8001618 <HAL_GetTick>
 8001e2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e2c:	e00a      	b.n	8001e44 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2e:	f7ff fbf3 	bl	8001618 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e113      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e44:	4b7f      	ldr	r3, [pc, #508]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1ed      	bne.n	8001e2e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e52:	7ffb      	ldrb	r3, [r7, #31]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e58:	4b7a      	ldr	r3, [pc, #488]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	4a79      	ldr	r2, [pc, #484]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f000 80fe 	beq.w	800206a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	f040 80d0 	bne.w	8002018 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e78:	4b72      	ldr	r3, [pc, #456]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	f003 0203 	and.w	r2, r3, #3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d130      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e96:	3b01      	subs	r3, #1
 8001e98:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d127      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d11f      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eb8:	2a07      	cmp	r2, #7
 8001eba:	bf14      	ite	ne
 8001ebc:	2201      	movne	r2, #1
 8001ebe:	2200      	moveq	r2, #0
 8001ec0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d113      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ec6:	697b      	ldr	r3, [r7, #20]
 8001ec8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	085b      	lsrs	r3, r3, #1
 8001ed2:	3b01      	subs	r3, #1
 8001ed4:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee4:	085b      	lsrs	r3, r3, #1
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d06e      	beq.n	8001fcc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	2b0c      	cmp	r3, #12
 8001ef2:	d069      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ef4:	4b53      	ldr	r3, [pc, #332]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d105      	bne.n	8001f0c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f00:	4b50      	ldr	r3, [pc, #320]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	e0ad      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f10:	4b4c      	ldr	r3, [pc, #304]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a4b      	ldr	r2, [pc, #300]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f1a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f1c:	f7ff fb7c 	bl	8001618 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f22:	e008      	b.n	8001f36 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f24:	f7ff fb78 	bl	8001618 <HAL_GetTick>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	693b      	ldr	r3, [r7, #16]
 8001f2c:	1ad3      	subs	r3, r2, r3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d901      	bls.n	8001f36 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f32:	2303      	movs	r3, #3
 8001f34:	e09a      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f36:	4b43      	ldr	r3, [pc, #268]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d1f0      	bne.n	8001f24 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f42:	4b40      	ldr	r3, [pc, #256]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f44:	68da      	ldr	r2, [r3, #12]
 8001f46:	4b40      	ldr	r3, [pc, #256]	; (8002048 <HAL_RCC_OscConfig+0x784>)
 8001f48:	4013      	ands	r3, r2
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f52:	3a01      	subs	r2, #1
 8001f54:	0112      	lsls	r2, r2, #4
 8001f56:	4311      	orrs	r1, r2
 8001f58:	687a      	ldr	r2, [r7, #4]
 8001f5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f5c:	0212      	lsls	r2, r2, #8
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f64:	0852      	lsrs	r2, r2, #1
 8001f66:	3a01      	subs	r2, #1
 8001f68:	0552      	lsls	r2, r2, #21
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f70:	0852      	lsrs	r2, r2, #1
 8001f72:	3a01      	subs	r2, #1
 8001f74:	0652      	lsls	r2, r2, #25
 8001f76:	4311      	orrs	r1, r2
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f7c:	0912      	lsrs	r2, r2, #4
 8001f7e:	0452      	lsls	r2, r2, #17
 8001f80:	430a      	orrs	r2, r1
 8001f82:	4930      	ldr	r1, [pc, #192]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f88:	4b2e      	ldr	r3, [pc, #184]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a2d      	ldr	r2, [pc, #180]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	4a2a      	ldr	r2, [pc, #168]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001f9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001fa0:	f7ff fb3a 	bl	8001618 <HAL_GetTick>
 8001fa4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fa6:	e008      	b.n	8001fba <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa8:	f7ff fb36 	bl	8001618 <HAL_GetTick>
 8001fac:	4602      	mov	r2, r0
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	1ad3      	subs	r3, r2, r3
 8001fb2:	2b02      	cmp	r3, #2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e058      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fba:	4b22      	ldr	r3, [pc, #136]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d0f0      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fc6:	e050      	b.n	800206a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e04f      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fcc:	4b1d      	ldr	r3, [pc, #116]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d148      	bne.n	800206a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fd8:	4b1a      	ldr	r3, [pc, #104]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a19      	ldr	r2, [pc, #100]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fe4:	4b17      	ldr	r3, [pc, #92]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4a16      	ldr	r2, [pc, #88]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ff0:	f7ff fb12 	bl	8001618 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ff8:	f7ff fb0e 	bl	8001618 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b02      	cmp	r3, #2
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e030      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800200a:	4b0e      	ldr	r3, [pc, #56]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x734>
 8002016:	e028      	b.n	800206a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	2b0c      	cmp	r3, #12
 800201c:	d023      	beq.n	8002066 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800201e:	4b09      	ldr	r3, [pc, #36]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4a08      	ldr	r2, [pc, #32]	; (8002044 <HAL_RCC_OscConfig+0x780>)
 8002024:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002028:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800202a:	f7ff faf5 	bl	8001618 <HAL_GetTick>
 800202e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002030:	e00c      	b.n	800204c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002032:	f7ff faf1 	bl	8001618 <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	693b      	ldr	r3, [r7, #16]
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d905      	bls.n	800204c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e013      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
 8002044:	40021000 	.word	0x40021000
 8002048:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800204c:	4b09      	ldr	r3, [pc, #36]	; (8002074 <HAL_RCC_OscConfig+0x7b0>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d1ec      	bne.n	8002032 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002058:	4b06      	ldr	r3, [pc, #24]	; (8002074 <HAL_RCC_OscConfig+0x7b0>)
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	4905      	ldr	r1, [pc, #20]	; (8002074 <HAL_RCC_OscConfig+0x7b0>)
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_OscConfig+0x7b4>)
 8002060:	4013      	ands	r3, r2
 8002062:	60cb      	str	r3, [r1, #12]
 8002064:	e001      	b.n	800206a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e000      	b.n	800206c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800206a:	2300      	movs	r3, #0
}
 800206c:	4618      	mov	r0, r3
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	feeefffc 	.word	0xfeeefffc

0800207c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d101      	bne.n	8002090 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e0e7      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002090:	4b75      	ldr	r3, [pc, #468]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d910      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209e:	4b72      	ldr	r3, [pc, #456]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f023 0207 	bic.w	r2, r3, #7
 80020a6:	4970      	ldr	r1, [pc, #448]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	4313      	orrs	r3, r2
 80020ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b6e      	ldr	r3, [pc, #440]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0307 	and.w	r3, r3, #7
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e0cf      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d010      	beq.n	80020ee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	4b66      	ldr	r3, [pc, #408]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020d8:	429a      	cmp	r2, r3
 80020da:	d908      	bls.n	80020ee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020dc:	4b63      	ldr	r3, [pc, #396]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	4960      	ldr	r1, [pc, #384]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d04c      	beq.n	8002194 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	2b03      	cmp	r3, #3
 8002100:	d107      	bne.n	8002112 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002102:	4b5a      	ldr	r3, [pc, #360]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d121      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800210e:	2301      	movs	r3, #1
 8002110:	e0a6      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	2b02      	cmp	r3, #2
 8002118:	d107      	bne.n	800212a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800211a:	4b54      	ldr	r3, [pc, #336]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002122:	2b00      	cmp	r3, #0
 8002124:	d115      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002126:	2301      	movs	r3, #1
 8002128:	e09a      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	685b      	ldr	r3, [r3, #4]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d107      	bne.n	8002142 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002132:	4b4e      	ldr	r3, [pc, #312]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	2b00      	cmp	r3, #0
 800213c:	d109      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e08e      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002142:	4b4a      	ldr	r3, [pc, #296]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e086      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002152:	4b46      	ldr	r3, [pc, #280]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	f023 0203 	bic.w	r2, r3, #3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	685b      	ldr	r3, [r3, #4]
 800215e:	4943      	ldr	r1, [pc, #268]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	4313      	orrs	r3, r2
 8002162:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002164:	f7ff fa58 	bl	8001618 <HAL_GetTick>
 8002168:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800216a:	e00a      	b.n	8002182 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800216c:	f7ff fa54 	bl	8001618 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e06e      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002182:	4b3a      	ldr	r3, [pc, #232]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	f003 020c 	and.w	r2, r3, #12
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	429a      	cmp	r2, r3
 8002192:	d1eb      	bne.n	800216c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f003 0302 	and.w	r3, r3, #2
 800219c:	2b00      	cmp	r3, #0
 800219e:	d010      	beq.n	80021c2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	4b31      	ldr	r3, [pc, #196]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021ac:	429a      	cmp	r2, r3
 80021ae:	d208      	bcs.n	80021c2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b0:	4b2e      	ldr	r3, [pc, #184]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	492b      	ldr	r1, [pc, #172]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 80021be:	4313      	orrs	r3, r2
 80021c0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021c2:	4b29      	ldr	r3, [pc, #164]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0307 	and.w	r3, r3, #7
 80021ca:	683a      	ldr	r2, [r7, #0]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d210      	bcs.n	80021f2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d0:	4b25      	ldr	r3, [pc, #148]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f023 0207 	bic.w	r2, r3, #7
 80021d8:	4923      	ldr	r1, [pc, #140]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	4313      	orrs	r3, r2
 80021de:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCC_ClockConfig+0x1ec>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0307 	and.w	r3, r3, #7
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d001      	beq.n	80021f2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	e036      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0304 	and.w	r3, r3, #4
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d008      	beq.n	8002210 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021fe:	4b1b      	ldr	r3, [pc, #108]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	4918      	ldr	r1, [pc, #96]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800220c:	4313      	orrs	r3, r2
 800220e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b00      	cmp	r3, #0
 800221a:	d009      	beq.n	8002230 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800221c:	4b13      	ldr	r3, [pc, #76]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4910      	ldr	r1, [pc, #64]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	4313      	orrs	r3, r2
 800222e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002230:	f000 f824 	bl	800227c <HAL_RCC_GetSysClockFreq>
 8002234:	4602      	mov	r2, r0
 8002236:	4b0d      	ldr	r3, [pc, #52]	; (800226c <HAL_RCC_ClockConfig+0x1f0>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	490b      	ldr	r1, [pc, #44]	; (8002270 <HAL_RCC_ClockConfig+0x1f4>)
 8002242:	5ccb      	ldrb	r3, [r1, r3]
 8002244:	f003 031f 	and.w	r3, r3, #31
 8002248:	fa22 f303 	lsr.w	r3, r2, r3
 800224c:	4a09      	ldr	r2, [pc, #36]	; (8002274 <HAL_RCC_ClockConfig+0x1f8>)
 800224e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002250:	4b09      	ldr	r3, [pc, #36]	; (8002278 <HAL_RCC_ClockConfig+0x1fc>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4618      	mov	r0, r3
 8002256:	f7ff f98f 	bl	8001578 <HAL_InitTick>
 800225a:	4603      	mov	r3, r0
 800225c:	72fb      	strb	r3, [r7, #11]

  return status;
 800225e:	7afb      	ldrb	r3, [r7, #11]
}
 8002260:	4618      	mov	r0, r3
 8002262:	3710      	adds	r7, #16
 8002264:	46bd      	mov	sp, r7
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40022000 	.word	0x40022000
 800226c:	40021000 	.word	0x40021000
 8002270:	08003548 	.word	0x08003548
 8002274:	20000000 	.word	0x20000000
 8002278:	20000004 	.word	0x20000004

0800227c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800227c:	b480      	push	{r7}
 800227e:	b089      	sub	sp, #36	; 0x24
 8002280:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002282:	2300      	movs	r3, #0
 8002284:	61fb      	str	r3, [r7, #28]
 8002286:	2300      	movs	r3, #0
 8002288:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800228a:	4b3e      	ldr	r3, [pc, #248]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	f003 030c 	and.w	r3, r3, #12
 8002292:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002294:	4b3b      	ldr	r3, [pc, #236]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002296:	68db      	ldr	r3, [r3, #12]
 8002298:	f003 0303 	and.w	r3, r3, #3
 800229c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_GetSysClockFreq+0x34>
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	2b0c      	cmp	r3, #12
 80022a8:	d121      	bne.n	80022ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d11e      	bne.n	80022ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022b0:	4b34      	ldr	r3, [pc, #208]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0308 	and.w	r3, r3, #8
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022bc:	4b31      	ldr	r3, [pc, #196]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	f003 030f 	and.w	r3, r3, #15
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e005      	b.n	80022d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022cc:	4b2d      	ldr	r3, [pc, #180]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	091b      	lsrs	r3, r3, #4
 80022d2:	f003 030f 	and.w	r3, r3, #15
 80022d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022d8:	4a2b      	ldr	r2, [pc, #172]	; (8002388 <HAL_RCC_GetSysClockFreq+0x10c>)
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d10d      	bne.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022ec:	e00a      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d102      	bne.n	80022fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022f4:	4b25      	ldr	r3, [pc, #148]	; (800238c <HAL_RCC_GetSysClockFreq+0x110>)
 80022f6:	61bb      	str	r3, [r7, #24]
 80022f8:	e004      	b.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b08      	cmp	r3, #8
 80022fe:	d101      	bne.n	8002304 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002300:	4b23      	ldr	r3, [pc, #140]	; (8002390 <HAL_RCC_GetSysClockFreq+0x114>)
 8002302:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	2b0c      	cmp	r3, #12
 8002308:	d134      	bne.n	8002374 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	f003 0303 	and.w	r3, r3, #3
 8002312:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0xa6>
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b03      	cmp	r3, #3
 800231e:	d003      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0xac>
 8002320:	e005      	b.n	800232e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002322:	4b1a      	ldr	r3, [pc, #104]	; (800238c <HAL_RCC_GetSysClockFreq+0x110>)
 8002324:	617b      	str	r3, [r7, #20]
      break;
 8002326:	e005      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002328:	4b19      	ldr	r3, [pc, #100]	; (8002390 <HAL_RCC_GetSysClockFreq+0x114>)
 800232a:	617b      	str	r3, [r7, #20]
      break;
 800232c:	e002      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	617b      	str	r3, [r7, #20]
      break;
 8002332:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002334:	4b13      	ldr	r3, [pc, #76]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	091b      	lsrs	r3, r3, #4
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	3301      	adds	r3, #1
 8002340:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002342:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 8002344:	68db      	ldr	r3, [r3, #12]
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800234c:	697a      	ldr	r2, [r7, #20]
 800234e:	fb03 f202 	mul.w	r2, r3, r2
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800235a:	4b0a      	ldr	r3, [pc, #40]	; (8002384 <HAL_RCC_GetSysClockFreq+0x108>)
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	0e5b      	lsrs	r3, r3, #25
 8002360:	f003 0303 	and.w	r3, r3, #3
 8002364:	3301      	adds	r3, #1
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800236a:	697a      	ldr	r2, [r7, #20]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002372:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002374:	69bb      	ldr	r3, [r7, #24]
}
 8002376:	4618      	mov	r0, r3
 8002378:	3724      	adds	r7, #36	; 0x24
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr
 8002382:	bf00      	nop
 8002384:	40021000 	.word	0x40021000
 8002388:	08003558 	.word	0x08003558
 800238c:	00f42400 	.word	0x00f42400
 8002390:	007a1200 	.word	0x007a1200

08002394 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b086      	sub	sp, #24
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80023a0:	4b2a      	ldr	r3, [pc, #168]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d003      	beq.n	80023b4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80023ac:	f7ff fa26 	bl	80017fc <HAL_PWREx_GetVoltageRange>
 80023b0:	6178      	str	r0, [r7, #20]
 80023b2:	e014      	b.n	80023de <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80023b4:	4b25      	ldr	r3, [pc, #148]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023b8:	4a24      	ldr	r2, [pc, #144]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023be:	6593      	str	r3, [r2, #88]	; 0x58
 80023c0:	4b22      	ldr	r3, [pc, #136]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023c8:	60fb      	str	r3, [r7, #12]
 80023ca:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80023cc:	f7ff fa16 	bl	80017fc <HAL_PWREx_GetVoltageRange>
 80023d0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023d2:	4b1e      	ldr	r3, [pc, #120]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d6:	4a1d      	ldr	r2, [pc, #116]	; (800244c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023dc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023e4:	d10b      	bne.n	80023fe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b80      	cmp	r3, #128	; 0x80
 80023ea:	d919      	bls.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2ba0      	cmp	r3, #160	; 0xa0
 80023f0:	d902      	bls.n	80023f8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023f2:	2302      	movs	r3, #2
 80023f4:	613b      	str	r3, [r7, #16]
 80023f6:	e013      	b.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023f8:	2301      	movs	r3, #1
 80023fa:	613b      	str	r3, [r7, #16]
 80023fc:	e010      	b.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b80      	cmp	r3, #128	; 0x80
 8002402:	d902      	bls.n	800240a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002404:	2303      	movs	r3, #3
 8002406:	613b      	str	r3, [r7, #16]
 8002408:	e00a      	b.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2b80      	cmp	r3, #128	; 0x80
 800240e:	d102      	bne.n	8002416 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002410:	2302      	movs	r3, #2
 8002412:	613b      	str	r3, [r7, #16]
 8002414:	e004      	b.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2b70      	cmp	r3, #112	; 0x70
 800241a:	d101      	bne.n	8002420 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800241c:	2301      	movs	r3, #1
 800241e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002420:	4b0b      	ldr	r3, [pc, #44]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f023 0207 	bic.w	r2, r3, #7
 8002428:	4909      	ldr	r1, [pc, #36]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002430:	4b07      	ldr	r3, [pc, #28]	; (8002450 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0307 	and.w	r3, r3, #7
 8002438:	693a      	ldr	r2, [r7, #16]
 800243a:	429a      	cmp	r2, r3
 800243c:	d001      	beq.n	8002442 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3718      	adds	r7, #24
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	40022000 	.word	0x40022000

08002454 <memset>:
 8002454:	4402      	add	r2, r0
 8002456:	4603      	mov	r3, r0
 8002458:	4293      	cmp	r3, r2
 800245a:	d100      	bne.n	800245e <memset+0xa>
 800245c:	4770      	bx	lr
 800245e:	f803 1b01 	strb.w	r1, [r3], #1
 8002462:	e7f9      	b.n	8002458 <memset+0x4>

08002464 <__libc_init_array>:
 8002464:	b570      	push	{r4, r5, r6, lr}
 8002466:	4d0d      	ldr	r5, [pc, #52]	; (800249c <__libc_init_array+0x38>)
 8002468:	4c0d      	ldr	r4, [pc, #52]	; (80024a0 <__libc_init_array+0x3c>)
 800246a:	1b64      	subs	r4, r4, r5
 800246c:	10a4      	asrs	r4, r4, #2
 800246e:	2600      	movs	r6, #0
 8002470:	42a6      	cmp	r6, r4
 8002472:	d109      	bne.n	8002488 <__libc_init_array+0x24>
 8002474:	4d0b      	ldr	r5, [pc, #44]	; (80024a4 <__libc_init_array+0x40>)
 8002476:	4c0c      	ldr	r4, [pc, #48]	; (80024a8 <__libc_init_array+0x44>)
 8002478:	f001 f85a 	bl	8003530 <_init>
 800247c:	1b64      	subs	r4, r4, r5
 800247e:	10a4      	asrs	r4, r4, #2
 8002480:	2600      	movs	r6, #0
 8002482:	42a6      	cmp	r6, r4
 8002484:	d105      	bne.n	8002492 <__libc_init_array+0x2e>
 8002486:	bd70      	pop	{r4, r5, r6, pc}
 8002488:	f855 3b04 	ldr.w	r3, [r5], #4
 800248c:	4798      	blx	r3
 800248e:	3601      	adds	r6, #1
 8002490:	e7ee      	b.n	8002470 <__libc_init_array+0xc>
 8002492:	f855 3b04 	ldr.w	r3, [r5], #4
 8002496:	4798      	blx	r3
 8002498:	3601      	adds	r6, #1
 800249a:	e7f2      	b.n	8002482 <__libc_init_array+0x1e>
 800249c:	08003760 	.word	0x08003760
 80024a0:	08003760 	.word	0x08003760
 80024a4:	08003760 	.word	0x08003760
 80024a8:	08003764 	.word	0x08003764
 80024ac:	00000000 	.word	0x00000000

080024b0 <sin>:
 80024b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80024b2:	ec53 2b10 	vmov	r2, r3, d0
 80024b6:	4828      	ldr	r0, [pc, #160]	; (8002558 <sin+0xa8>)
 80024b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80024bc:	4281      	cmp	r1, r0
 80024be:	dc07      	bgt.n	80024d0 <sin+0x20>
 80024c0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8002550 <sin+0xa0>
 80024c4:	2000      	movs	r0, #0
 80024c6:	b005      	add	sp, #20
 80024c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80024cc:	f000 b910 	b.w	80026f0 <__kernel_sin>
 80024d0:	4822      	ldr	r0, [pc, #136]	; (800255c <sin+0xac>)
 80024d2:	4281      	cmp	r1, r0
 80024d4:	dd09      	ble.n	80024ea <sin+0x3a>
 80024d6:	ee10 0a10 	vmov	r0, s0
 80024da:	4619      	mov	r1, r3
 80024dc:	f7fd fe78 	bl	80001d0 <__aeabi_dsub>
 80024e0:	ec41 0b10 	vmov	d0, r0, r1
 80024e4:	b005      	add	sp, #20
 80024e6:	f85d fb04 	ldr.w	pc, [sp], #4
 80024ea:	4668      	mov	r0, sp
 80024ec:	f000 f9c0 	bl	8002870 <__ieee754_rem_pio2>
 80024f0:	f000 0003 	and.w	r0, r0, #3
 80024f4:	2801      	cmp	r0, #1
 80024f6:	d00c      	beq.n	8002512 <sin+0x62>
 80024f8:	2802      	cmp	r0, #2
 80024fa:	d011      	beq.n	8002520 <sin+0x70>
 80024fc:	b9f0      	cbnz	r0, 800253c <sin+0x8c>
 80024fe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002502:	ed9d 0b00 	vldr	d0, [sp]
 8002506:	2001      	movs	r0, #1
 8002508:	f000 f8f2 	bl	80026f0 <__kernel_sin>
 800250c:	ec51 0b10 	vmov	r0, r1, d0
 8002510:	e7e6      	b.n	80024e0 <sin+0x30>
 8002512:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002516:	ed9d 0b00 	vldr	d0, [sp]
 800251a:	f000 f821 	bl	8002560 <__kernel_cos>
 800251e:	e7f5      	b.n	800250c <sin+0x5c>
 8002520:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002524:	ed9d 0b00 	vldr	d0, [sp]
 8002528:	2001      	movs	r0, #1
 800252a:	f000 f8e1 	bl	80026f0 <__kernel_sin>
 800252e:	ec53 2b10 	vmov	r2, r3, d0
 8002532:	ee10 0a10 	vmov	r0, s0
 8002536:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800253a:	e7d1      	b.n	80024e0 <sin+0x30>
 800253c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8002540:	ed9d 0b00 	vldr	d0, [sp]
 8002544:	f000 f80c 	bl	8002560 <__kernel_cos>
 8002548:	e7f1      	b.n	800252e <sin+0x7e>
 800254a:	bf00      	nop
 800254c:	f3af 8000 	nop.w
	...
 8002558:	3fe921fb 	.word	0x3fe921fb
 800255c:	7fefffff 	.word	0x7fefffff

08002560 <__kernel_cos>:
 8002560:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002564:	ec57 6b10 	vmov	r6, r7, d0
 8002568:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800256c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8002570:	ed8d 1b00 	vstr	d1, [sp]
 8002574:	da07      	bge.n	8002586 <__kernel_cos+0x26>
 8002576:	ee10 0a10 	vmov	r0, s0
 800257a:	4639      	mov	r1, r7
 800257c:	f7fe fa7a 	bl	8000a74 <__aeabi_d2iz>
 8002580:	2800      	cmp	r0, #0
 8002582:	f000 8088 	beq.w	8002696 <__kernel_cos+0x136>
 8002586:	4632      	mov	r2, r6
 8002588:	463b      	mov	r3, r7
 800258a:	4630      	mov	r0, r6
 800258c:	4639      	mov	r1, r7
 800258e:	f7fd ffd7 	bl	8000540 <__aeabi_dmul>
 8002592:	4b51      	ldr	r3, [pc, #324]	; (80026d8 <__kernel_cos+0x178>)
 8002594:	2200      	movs	r2, #0
 8002596:	4604      	mov	r4, r0
 8002598:	460d      	mov	r5, r1
 800259a:	f7fd ffd1 	bl	8000540 <__aeabi_dmul>
 800259e:	a340      	add	r3, pc, #256	; (adr r3, 80026a0 <__kernel_cos+0x140>)
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	4682      	mov	sl, r0
 80025a6:	468b      	mov	fp, r1
 80025a8:	4620      	mov	r0, r4
 80025aa:	4629      	mov	r1, r5
 80025ac:	f7fd ffc8 	bl	8000540 <__aeabi_dmul>
 80025b0:	a33d      	add	r3, pc, #244	; (adr r3, 80026a8 <__kernel_cos+0x148>)
 80025b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025b6:	f7fd fe0d 	bl	80001d4 <__adddf3>
 80025ba:	4622      	mov	r2, r4
 80025bc:	462b      	mov	r3, r5
 80025be:	f7fd ffbf 	bl	8000540 <__aeabi_dmul>
 80025c2:	a33b      	add	r3, pc, #236	; (adr r3, 80026b0 <__kernel_cos+0x150>)
 80025c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025c8:	f7fd fe02 	bl	80001d0 <__aeabi_dsub>
 80025cc:	4622      	mov	r2, r4
 80025ce:	462b      	mov	r3, r5
 80025d0:	f7fd ffb6 	bl	8000540 <__aeabi_dmul>
 80025d4:	a338      	add	r3, pc, #224	; (adr r3, 80026b8 <__kernel_cos+0x158>)
 80025d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025da:	f7fd fdfb 	bl	80001d4 <__adddf3>
 80025de:	4622      	mov	r2, r4
 80025e0:	462b      	mov	r3, r5
 80025e2:	f7fd ffad 	bl	8000540 <__aeabi_dmul>
 80025e6:	a336      	add	r3, pc, #216	; (adr r3, 80026c0 <__kernel_cos+0x160>)
 80025e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025ec:	f7fd fdf0 	bl	80001d0 <__aeabi_dsub>
 80025f0:	4622      	mov	r2, r4
 80025f2:	462b      	mov	r3, r5
 80025f4:	f7fd ffa4 	bl	8000540 <__aeabi_dmul>
 80025f8:	a333      	add	r3, pc, #204	; (adr r3, 80026c8 <__kernel_cos+0x168>)
 80025fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025fe:	f7fd fde9 	bl	80001d4 <__adddf3>
 8002602:	4622      	mov	r2, r4
 8002604:	462b      	mov	r3, r5
 8002606:	f7fd ff9b 	bl	8000540 <__aeabi_dmul>
 800260a:	4622      	mov	r2, r4
 800260c:	462b      	mov	r3, r5
 800260e:	f7fd ff97 	bl	8000540 <__aeabi_dmul>
 8002612:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002616:	4604      	mov	r4, r0
 8002618:	460d      	mov	r5, r1
 800261a:	4630      	mov	r0, r6
 800261c:	4639      	mov	r1, r7
 800261e:	f7fd ff8f 	bl	8000540 <__aeabi_dmul>
 8002622:	460b      	mov	r3, r1
 8002624:	4602      	mov	r2, r0
 8002626:	4629      	mov	r1, r5
 8002628:	4620      	mov	r0, r4
 800262a:	f7fd fdd1 	bl	80001d0 <__aeabi_dsub>
 800262e:	4b2b      	ldr	r3, [pc, #172]	; (80026dc <__kernel_cos+0x17c>)
 8002630:	4598      	cmp	r8, r3
 8002632:	4606      	mov	r6, r0
 8002634:	460f      	mov	r7, r1
 8002636:	dc10      	bgt.n	800265a <__kernel_cos+0xfa>
 8002638:	4602      	mov	r2, r0
 800263a:	460b      	mov	r3, r1
 800263c:	4650      	mov	r0, sl
 800263e:	4659      	mov	r1, fp
 8002640:	f7fd fdc6 	bl	80001d0 <__aeabi_dsub>
 8002644:	460b      	mov	r3, r1
 8002646:	4926      	ldr	r1, [pc, #152]	; (80026e0 <__kernel_cos+0x180>)
 8002648:	4602      	mov	r2, r0
 800264a:	2000      	movs	r0, #0
 800264c:	f7fd fdc0 	bl	80001d0 <__aeabi_dsub>
 8002650:	ec41 0b10 	vmov	d0, r0, r1
 8002654:	b003      	add	sp, #12
 8002656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800265a:	4b22      	ldr	r3, [pc, #136]	; (80026e4 <__kernel_cos+0x184>)
 800265c:	4920      	ldr	r1, [pc, #128]	; (80026e0 <__kernel_cos+0x180>)
 800265e:	4598      	cmp	r8, r3
 8002660:	bfcc      	ite	gt
 8002662:	4d21      	ldrgt	r5, [pc, #132]	; (80026e8 <__kernel_cos+0x188>)
 8002664:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8002668:	2400      	movs	r4, #0
 800266a:	4622      	mov	r2, r4
 800266c:	462b      	mov	r3, r5
 800266e:	2000      	movs	r0, #0
 8002670:	f7fd fdae 	bl	80001d0 <__aeabi_dsub>
 8002674:	4622      	mov	r2, r4
 8002676:	4680      	mov	r8, r0
 8002678:	4689      	mov	r9, r1
 800267a:	462b      	mov	r3, r5
 800267c:	4650      	mov	r0, sl
 800267e:	4659      	mov	r1, fp
 8002680:	f7fd fda6 	bl	80001d0 <__aeabi_dsub>
 8002684:	4632      	mov	r2, r6
 8002686:	463b      	mov	r3, r7
 8002688:	f7fd fda2 	bl	80001d0 <__aeabi_dsub>
 800268c:	4602      	mov	r2, r0
 800268e:	460b      	mov	r3, r1
 8002690:	4640      	mov	r0, r8
 8002692:	4649      	mov	r1, r9
 8002694:	e7da      	b.n	800264c <__kernel_cos+0xec>
 8002696:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80026d0 <__kernel_cos+0x170>
 800269a:	e7db      	b.n	8002654 <__kernel_cos+0xf4>
 800269c:	f3af 8000 	nop.w
 80026a0:	be8838d4 	.word	0xbe8838d4
 80026a4:	bda8fae9 	.word	0xbda8fae9
 80026a8:	bdb4b1c4 	.word	0xbdb4b1c4
 80026ac:	3e21ee9e 	.word	0x3e21ee9e
 80026b0:	809c52ad 	.word	0x809c52ad
 80026b4:	3e927e4f 	.word	0x3e927e4f
 80026b8:	19cb1590 	.word	0x19cb1590
 80026bc:	3efa01a0 	.word	0x3efa01a0
 80026c0:	16c15177 	.word	0x16c15177
 80026c4:	3f56c16c 	.word	0x3f56c16c
 80026c8:	5555554c 	.word	0x5555554c
 80026cc:	3fa55555 	.word	0x3fa55555
 80026d0:	00000000 	.word	0x00000000
 80026d4:	3ff00000 	.word	0x3ff00000
 80026d8:	3fe00000 	.word	0x3fe00000
 80026dc:	3fd33332 	.word	0x3fd33332
 80026e0:	3ff00000 	.word	0x3ff00000
 80026e4:	3fe90000 	.word	0x3fe90000
 80026e8:	3fd20000 	.word	0x3fd20000
 80026ec:	00000000 	.word	0x00000000

080026f0 <__kernel_sin>:
 80026f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026f4:	ed2d 8b04 	vpush	{d8-d9}
 80026f8:	eeb0 8a41 	vmov.f32	s16, s2
 80026fc:	eef0 8a61 	vmov.f32	s17, s3
 8002700:	ec55 4b10 	vmov	r4, r5, d0
 8002704:	b083      	sub	sp, #12
 8002706:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800270a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800270e:	9001      	str	r0, [sp, #4]
 8002710:	da06      	bge.n	8002720 <__kernel_sin+0x30>
 8002712:	ee10 0a10 	vmov	r0, s0
 8002716:	4629      	mov	r1, r5
 8002718:	f7fe f9ac 	bl	8000a74 <__aeabi_d2iz>
 800271c:	2800      	cmp	r0, #0
 800271e:	d051      	beq.n	80027c4 <__kernel_sin+0xd4>
 8002720:	4622      	mov	r2, r4
 8002722:	462b      	mov	r3, r5
 8002724:	4620      	mov	r0, r4
 8002726:	4629      	mov	r1, r5
 8002728:	f7fd ff0a 	bl	8000540 <__aeabi_dmul>
 800272c:	4682      	mov	sl, r0
 800272e:	468b      	mov	fp, r1
 8002730:	4602      	mov	r2, r0
 8002732:	460b      	mov	r3, r1
 8002734:	4620      	mov	r0, r4
 8002736:	4629      	mov	r1, r5
 8002738:	f7fd ff02 	bl	8000540 <__aeabi_dmul>
 800273c:	a341      	add	r3, pc, #260	; (adr r3, 8002844 <__kernel_sin+0x154>)
 800273e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002742:	4680      	mov	r8, r0
 8002744:	4689      	mov	r9, r1
 8002746:	4650      	mov	r0, sl
 8002748:	4659      	mov	r1, fp
 800274a:	f7fd fef9 	bl	8000540 <__aeabi_dmul>
 800274e:	a33f      	add	r3, pc, #252	; (adr r3, 800284c <__kernel_sin+0x15c>)
 8002750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002754:	f7fd fd3c 	bl	80001d0 <__aeabi_dsub>
 8002758:	4652      	mov	r2, sl
 800275a:	465b      	mov	r3, fp
 800275c:	f7fd fef0 	bl	8000540 <__aeabi_dmul>
 8002760:	a33c      	add	r3, pc, #240	; (adr r3, 8002854 <__kernel_sin+0x164>)
 8002762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002766:	f7fd fd35 	bl	80001d4 <__adddf3>
 800276a:	4652      	mov	r2, sl
 800276c:	465b      	mov	r3, fp
 800276e:	f7fd fee7 	bl	8000540 <__aeabi_dmul>
 8002772:	a33a      	add	r3, pc, #232	; (adr r3, 800285c <__kernel_sin+0x16c>)
 8002774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002778:	f7fd fd2a 	bl	80001d0 <__aeabi_dsub>
 800277c:	4652      	mov	r2, sl
 800277e:	465b      	mov	r3, fp
 8002780:	f7fd fede 	bl	8000540 <__aeabi_dmul>
 8002784:	a337      	add	r3, pc, #220	; (adr r3, 8002864 <__kernel_sin+0x174>)
 8002786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800278a:	f7fd fd23 	bl	80001d4 <__adddf3>
 800278e:	9b01      	ldr	r3, [sp, #4]
 8002790:	4606      	mov	r6, r0
 8002792:	460f      	mov	r7, r1
 8002794:	b9eb      	cbnz	r3, 80027d2 <__kernel_sin+0xe2>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4650      	mov	r0, sl
 800279c:	4659      	mov	r1, fp
 800279e:	f7fd fecf 	bl	8000540 <__aeabi_dmul>
 80027a2:	a325      	add	r3, pc, #148	; (adr r3, 8002838 <__kernel_sin+0x148>)
 80027a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027a8:	f7fd fd12 	bl	80001d0 <__aeabi_dsub>
 80027ac:	4642      	mov	r2, r8
 80027ae:	464b      	mov	r3, r9
 80027b0:	f7fd fec6 	bl	8000540 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4620      	mov	r0, r4
 80027ba:	4629      	mov	r1, r5
 80027bc:	f7fd fd0a 	bl	80001d4 <__adddf3>
 80027c0:	4604      	mov	r4, r0
 80027c2:	460d      	mov	r5, r1
 80027c4:	ec45 4b10 	vmov	d0, r4, r5
 80027c8:	b003      	add	sp, #12
 80027ca:	ecbd 8b04 	vpop	{d8-d9}
 80027ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80027d2:	4b1b      	ldr	r3, [pc, #108]	; (8002840 <__kernel_sin+0x150>)
 80027d4:	ec51 0b18 	vmov	r0, r1, d8
 80027d8:	2200      	movs	r2, #0
 80027da:	f7fd feb1 	bl	8000540 <__aeabi_dmul>
 80027de:	4632      	mov	r2, r6
 80027e0:	ec41 0b19 	vmov	d9, r0, r1
 80027e4:	463b      	mov	r3, r7
 80027e6:	4640      	mov	r0, r8
 80027e8:	4649      	mov	r1, r9
 80027ea:	f7fd fea9 	bl	8000540 <__aeabi_dmul>
 80027ee:	4602      	mov	r2, r0
 80027f0:	460b      	mov	r3, r1
 80027f2:	ec51 0b19 	vmov	r0, r1, d9
 80027f6:	f7fd fceb 	bl	80001d0 <__aeabi_dsub>
 80027fa:	4652      	mov	r2, sl
 80027fc:	465b      	mov	r3, fp
 80027fe:	f7fd fe9f 	bl	8000540 <__aeabi_dmul>
 8002802:	ec53 2b18 	vmov	r2, r3, d8
 8002806:	f7fd fce3 	bl	80001d0 <__aeabi_dsub>
 800280a:	a30b      	add	r3, pc, #44	; (adr r3, 8002838 <__kernel_sin+0x148>)
 800280c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002810:	4606      	mov	r6, r0
 8002812:	460f      	mov	r7, r1
 8002814:	4640      	mov	r0, r8
 8002816:	4649      	mov	r1, r9
 8002818:	f7fd fe92 	bl	8000540 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4630      	mov	r0, r6
 8002822:	4639      	mov	r1, r7
 8002824:	f7fd fcd6 	bl	80001d4 <__adddf3>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4620      	mov	r0, r4
 800282e:	4629      	mov	r1, r5
 8002830:	f7fd fcce 	bl	80001d0 <__aeabi_dsub>
 8002834:	e7c4      	b.n	80027c0 <__kernel_sin+0xd0>
 8002836:	bf00      	nop
 8002838:	55555549 	.word	0x55555549
 800283c:	3fc55555 	.word	0x3fc55555
 8002840:	3fe00000 	.word	0x3fe00000
 8002844:	5acfd57c 	.word	0x5acfd57c
 8002848:	3de5d93a 	.word	0x3de5d93a
 800284c:	8a2b9ceb 	.word	0x8a2b9ceb
 8002850:	3e5ae5e6 	.word	0x3e5ae5e6
 8002854:	57b1fe7d 	.word	0x57b1fe7d
 8002858:	3ec71de3 	.word	0x3ec71de3
 800285c:	19c161d5 	.word	0x19c161d5
 8002860:	3f2a01a0 	.word	0x3f2a01a0
 8002864:	1110f8a6 	.word	0x1110f8a6
 8002868:	3f811111 	.word	0x3f811111
 800286c:	00000000 	.word	0x00000000

08002870 <__ieee754_rem_pio2>:
 8002870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002874:	ed2d 8b02 	vpush	{d8}
 8002878:	ec55 4b10 	vmov	r4, r5, d0
 800287c:	4bca      	ldr	r3, [pc, #808]	; (8002ba8 <__ieee754_rem_pio2+0x338>)
 800287e:	b08b      	sub	sp, #44	; 0x2c
 8002880:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8002884:	4598      	cmp	r8, r3
 8002886:	4682      	mov	sl, r0
 8002888:	9502      	str	r5, [sp, #8]
 800288a:	dc08      	bgt.n	800289e <__ieee754_rem_pio2+0x2e>
 800288c:	2200      	movs	r2, #0
 800288e:	2300      	movs	r3, #0
 8002890:	ed80 0b00 	vstr	d0, [r0]
 8002894:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8002898:	f04f 0b00 	mov.w	fp, #0
 800289c:	e028      	b.n	80028f0 <__ieee754_rem_pio2+0x80>
 800289e:	4bc3      	ldr	r3, [pc, #780]	; (8002bac <__ieee754_rem_pio2+0x33c>)
 80028a0:	4598      	cmp	r8, r3
 80028a2:	dc78      	bgt.n	8002996 <__ieee754_rem_pio2+0x126>
 80028a4:	9b02      	ldr	r3, [sp, #8]
 80028a6:	4ec2      	ldr	r6, [pc, #776]	; (8002bb0 <__ieee754_rem_pio2+0x340>)
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	ee10 0a10 	vmov	r0, s0
 80028ae:	a3b0      	add	r3, pc, #704	; (adr r3, 8002b70 <__ieee754_rem_pio2+0x300>)
 80028b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028b4:	4629      	mov	r1, r5
 80028b6:	dd39      	ble.n	800292c <__ieee754_rem_pio2+0xbc>
 80028b8:	f7fd fc8a 	bl	80001d0 <__aeabi_dsub>
 80028bc:	45b0      	cmp	r8, r6
 80028be:	4604      	mov	r4, r0
 80028c0:	460d      	mov	r5, r1
 80028c2:	d01b      	beq.n	80028fc <__ieee754_rem_pio2+0x8c>
 80028c4:	a3ac      	add	r3, pc, #688	; (adr r3, 8002b78 <__ieee754_rem_pio2+0x308>)
 80028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ca:	f7fd fc81 	bl	80001d0 <__aeabi_dsub>
 80028ce:	4602      	mov	r2, r0
 80028d0:	460b      	mov	r3, r1
 80028d2:	e9ca 2300 	strd	r2, r3, [sl]
 80028d6:	4620      	mov	r0, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	f7fd fc79 	bl	80001d0 <__aeabi_dsub>
 80028de:	a3a6      	add	r3, pc, #664	; (adr r3, 8002b78 <__ieee754_rem_pio2+0x308>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fc74 	bl	80001d0 <__aeabi_dsub>
 80028e8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80028ec:	f04f 0b01 	mov.w	fp, #1
 80028f0:	4658      	mov	r0, fp
 80028f2:	b00b      	add	sp, #44	; 0x2c
 80028f4:	ecbd 8b02 	vpop	{d8}
 80028f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80028fc:	a3a0      	add	r3, pc, #640	; (adr r3, 8002b80 <__ieee754_rem_pio2+0x310>)
 80028fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002902:	f7fd fc65 	bl	80001d0 <__aeabi_dsub>
 8002906:	a3a0      	add	r3, pc, #640	; (adr r3, 8002b88 <__ieee754_rem_pio2+0x318>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	4604      	mov	r4, r0
 800290e:	460d      	mov	r5, r1
 8002910:	f7fd fc5e 	bl	80001d0 <__aeabi_dsub>
 8002914:	4602      	mov	r2, r0
 8002916:	460b      	mov	r3, r1
 8002918:	e9ca 2300 	strd	r2, r3, [sl]
 800291c:	4620      	mov	r0, r4
 800291e:	4629      	mov	r1, r5
 8002920:	f7fd fc56 	bl	80001d0 <__aeabi_dsub>
 8002924:	a398      	add	r3, pc, #608	; (adr r3, 8002b88 <__ieee754_rem_pio2+0x318>)
 8002926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800292a:	e7db      	b.n	80028e4 <__ieee754_rem_pio2+0x74>
 800292c:	f7fd fc52 	bl	80001d4 <__adddf3>
 8002930:	45b0      	cmp	r8, r6
 8002932:	4604      	mov	r4, r0
 8002934:	460d      	mov	r5, r1
 8002936:	d016      	beq.n	8002966 <__ieee754_rem_pio2+0xf6>
 8002938:	a38f      	add	r3, pc, #572	; (adr r3, 8002b78 <__ieee754_rem_pio2+0x308>)
 800293a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800293e:	f7fd fc49 	bl	80001d4 <__adddf3>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	e9ca 2300 	strd	r2, r3, [sl]
 800294a:	4620      	mov	r0, r4
 800294c:	4629      	mov	r1, r5
 800294e:	f7fd fc3f 	bl	80001d0 <__aeabi_dsub>
 8002952:	a389      	add	r3, pc, #548	; (adr r3, 8002b78 <__ieee754_rem_pio2+0x308>)
 8002954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002958:	f7fd fc3c 	bl	80001d4 <__adddf3>
 800295c:	f04f 3bff 	mov.w	fp, #4294967295
 8002960:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002964:	e7c4      	b.n	80028f0 <__ieee754_rem_pio2+0x80>
 8002966:	a386      	add	r3, pc, #536	; (adr r3, 8002b80 <__ieee754_rem_pio2+0x310>)
 8002968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296c:	f7fd fc32 	bl	80001d4 <__adddf3>
 8002970:	a385      	add	r3, pc, #532	; (adr r3, 8002b88 <__ieee754_rem_pio2+0x318>)
 8002972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002976:	4604      	mov	r4, r0
 8002978:	460d      	mov	r5, r1
 800297a:	f7fd fc2b 	bl	80001d4 <__adddf3>
 800297e:	4602      	mov	r2, r0
 8002980:	460b      	mov	r3, r1
 8002982:	e9ca 2300 	strd	r2, r3, [sl]
 8002986:	4620      	mov	r0, r4
 8002988:	4629      	mov	r1, r5
 800298a:	f7fd fc21 	bl	80001d0 <__aeabi_dsub>
 800298e:	a37e      	add	r3, pc, #504	; (adr r3, 8002b88 <__ieee754_rem_pio2+0x318>)
 8002990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002994:	e7e0      	b.n	8002958 <__ieee754_rem_pio2+0xe8>
 8002996:	4b87      	ldr	r3, [pc, #540]	; (8002bb4 <__ieee754_rem_pio2+0x344>)
 8002998:	4598      	cmp	r8, r3
 800299a:	f300 80d8 	bgt.w	8002b4e <__ieee754_rem_pio2+0x2de>
 800299e:	f000 f96d 	bl	8002c7c <fabs>
 80029a2:	ec55 4b10 	vmov	r4, r5, d0
 80029a6:	ee10 0a10 	vmov	r0, s0
 80029aa:	a379      	add	r3, pc, #484	; (adr r3, 8002b90 <__ieee754_rem_pio2+0x320>)
 80029ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b0:	4629      	mov	r1, r5
 80029b2:	f7fd fdc5 	bl	8000540 <__aeabi_dmul>
 80029b6:	4b80      	ldr	r3, [pc, #512]	; (8002bb8 <__ieee754_rem_pio2+0x348>)
 80029b8:	2200      	movs	r2, #0
 80029ba:	f7fd fc0b 	bl	80001d4 <__adddf3>
 80029be:	f7fe f859 	bl	8000a74 <__aeabi_d2iz>
 80029c2:	4683      	mov	fp, r0
 80029c4:	f7fd fd52 	bl	800046c <__aeabi_i2d>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	ec43 2b18 	vmov	d8, r2, r3
 80029d0:	a367      	add	r3, pc, #412	; (adr r3, 8002b70 <__ieee754_rem_pio2+0x300>)
 80029d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029d6:	f7fd fdb3 	bl	8000540 <__aeabi_dmul>
 80029da:	4602      	mov	r2, r0
 80029dc:	460b      	mov	r3, r1
 80029de:	4620      	mov	r0, r4
 80029e0:	4629      	mov	r1, r5
 80029e2:	f7fd fbf5 	bl	80001d0 <__aeabi_dsub>
 80029e6:	a364      	add	r3, pc, #400	; (adr r3, 8002b78 <__ieee754_rem_pio2+0x308>)
 80029e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ec:	4606      	mov	r6, r0
 80029ee:	460f      	mov	r7, r1
 80029f0:	ec51 0b18 	vmov	r0, r1, d8
 80029f4:	f7fd fda4 	bl	8000540 <__aeabi_dmul>
 80029f8:	f1bb 0f1f 	cmp.w	fp, #31
 80029fc:	4604      	mov	r4, r0
 80029fe:	460d      	mov	r5, r1
 8002a00:	dc0d      	bgt.n	8002a1e <__ieee754_rem_pio2+0x1ae>
 8002a02:	4b6e      	ldr	r3, [pc, #440]	; (8002bbc <__ieee754_rem_pio2+0x34c>)
 8002a04:	f10b 32ff 	add.w	r2, fp, #4294967295
 8002a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a0c:	4543      	cmp	r3, r8
 8002a0e:	d006      	beq.n	8002a1e <__ieee754_rem_pio2+0x1ae>
 8002a10:	4622      	mov	r2, r4
 8002a12:	462b      	mov	r3, r5
 8002a14:	4630      	mov	r0, r6
 8002a16:	4639      	mov	r1, r7
 8002a18:	f7fd fbda 	bl	80001d0 <__aeabi_dsub>
 8002a1c:	e00e      	b.n	8002a3c <__ieee754_rem_pio2+0x1cc>
 8002a1e:	462b      	mov	r3, r5
 8002a20:	4622      	mov	r2, r4
 8002a22:	4630      	mov	r0, r6
 8002a24:	4639      	mov	r1, r7
 8002a26:	f7fd fbd3 	bl	80001d0 <__aeabi_dsub>
 8002a2a:	ea4f 5328 	mov.w	r3, r8, asr #20
 8002a2e:	9303      	str	r3, [sp, #12]
 8002a30:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002a34:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8002a38:	2b10      	cmp	r3, #16
 8002a3a:	dc02      	bgt.n	8002a42 <__ieee754_rem_pio2+0x1d2>
 8002a3c:	e9ca 0100 	strd	r0, r1, [sl]
 8002a40:	e039      	b.n	8002ab6 <__ieee754_rem_pio2+0x246>
 8002a42:	a34f      	add	r3, pc, #316	; (adr r3, 8002b80 <__ieee754_rem_pio2+0x310>)
 8002a44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a48:	ec51 0b18 	vmov	r0, r1, d8
 8002a4c:	f7fd fd78 	bl	8000540 <__aeabi_dmul>
 8002a50:	4604      	mov	r4, r0
 8002a52:	460d      	mov	r5, r1
 8002a54:	4602      	mov	r2, r0
 8002a56:	460b      	mov	r3, r1
 8002a58:	4630      	mov	r0, r6
 8002a5a:	4639      	mov	r1, r7
 8002a5c:	f7fd fbb8 	bl	80001d0 <__aeabi_dsub>
 8002a60:	4602      	mov	r2, r0
 8002a62:	460b      	mov	r3, r1
 8002a64:	4680      	mov	r8, r0
 8002a66:	4689      	mov	r9, r1
 8002a68:	4630      	mov	r0, r6
 8002a6a:	4639      	mov	r1, r7
 8002a6c:	f7fd fbb0 	bl	80001d0 <__aeabi_dsub>
 8002a70:	4622      	mov	r2, r4
 8002a72:	462b      	mov	r3, r5
 8002a74:	f7fd fbac 	bl	80001d0 <__aeabi_dsub>
 8002a78:	a343      	add	r3, pc, #268	; (adr r3, 8002b88 <__ieee754_rem_pio2+0x318>)
 8002a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7e:	4604      	mov	r4, r0
 8002a80:	460d      	mov	r5, r1
 8002a82:	ec51 0b18 	vmov	r0, r1, d8
 8002a86:	f7fd fd5b 	bl	8000540 <__aeabi_dmul>
 8002a8a:	4622      	mov	r2, r4
 8002a8c:	462b      	mov	r3, r5
 8002a8e:	f7fd fb9f 	bl	80001d0 <__aeabi_dsub>
 8002a92:	4602      	mov	r2, r0
 8002a94:	460b      	mov	r3, r1
 8002a96:	4604      	mov	r4, r0
 8002a98:	460d      	mov	r5, r1
 8002a9a:	4640      	mov	r0, r8
 8002a9c:	4649      	mov	r1, r9
 8002a9e:	f7fd fb97 	bl	80001d0 <__aeabi_dsub>
 8002aa2:	9a03      	ldr	r2, [sp, #12]
 8002aa4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	2b31      	cmp	r3, #49	; 0x31
 8002aac:	dc24      	bgt.n	8002af8 <__ieee754_rem_pio2+0x288>
 8002aae:	e9ca 0100 	strd	r0, r1, [sl]
 8002ab2:	4646      	mov	r6, r8
 8002ab4:	464f      	mov	r7, r9
 8002ab6:	e9da 8900 	ldrd	r8, r9, [sl]
 8002aba:	4630      	mov	r0, r6
 8002abc:	4642      	mov	r2, r8
 8002abe:	464b      	mov	r3, r9
 8002ac0:	4639      	mov	r1, r7
 8002ac2:	f7fd fb85 	bl	80001d0 <__aeabi_dsub>
 8002ac6:	462b      	mov	r3, r5
 8002ac8:	4622      	mov	r2, r4
 8002aca:	f7fd fb81 	bl	80001d0 <__aeabi_dsub>
 8002ace:	9b02      	ldr	r3, [sp, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002ad6:	f6bf af0b 	bge.w	80028f0 <__ieee754_rem_pio2+0x80>
 8002ada:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8002ade:	f8ca 3004 	str.w	r3, [sl, #4]
 8002ae2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002ae6:	f8ca 8000 	str.w	r8, [sl]
 8002aea:	f8ca 0008 	str.w	r0, [sl, #8]
 8002aee:	f8ca 300c 	str.w	r3, [sl, #12]
 8002af2:	f1cb 0b00 	rsb	fp, fp, #0
 8002af6:	e6fb      	b.n	80028f0 <__ieee754_rem_pio2+0x80>
 8002af8:	a327      	add	r3, pc, #156	; (adr r3, 8002b98 <__ieee754_rem_pio2+0x328>)
 8002afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002afe:	ec51 0b18 	vmov	r0, r1, d8
 8002b02:	f7fd fd1d 	bl	8000540 <__aeabi_dmul>
 8002b06:	4604      	mov	r4, r0
 8002b08:	460d      	mov	r5, r1
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4640      	mov	r0, r8
 8002b10:	4649      	mov	r1, r9
 8002b12:	f7fd fb5d 	bl	80001d0 <__aeabi_dsub>
 8002b16:	4602      	mov	r2, r0
 8002b18:	460b      	mov	r3, r1
 8002b1a:	4606      	mov	r6, r0
 8002b1c:	460f      	mov	r7, r1
 8002b1e:	4640      	mov	r0, r8
 8002b20:	4649      	mov	r1, r9
 8002b22:	f7fd fb55 	bl	80001d0 <__aeabi_dsub>
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	f7fd fb51 	bl	80001d0 <__aeabi_dsub>
 8002b2e:	a31c      	add	r3, pc, #112	; (adr r3, 8002ba0 <__ieee754_rem_pio2+0x330>)
 8002b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b34:	4604      	mov	r4, r0
 8002b36:	460d      	mov	r5, r1
 8002b38:	ec51 0b18 	vmov	r0, r1, d8
 8002b3c:	f7fd fd00 	bl	8000540 <__aeabi_dmul>
 8002b40:	4622      	mov	r2, r4
 8002b42:	462b      	mov	r3, r5
 8002b44:	f7fd fb44 	bl	80001d0 <__aeabi_dsub>
 8002b48:	4604      	mov	r4, r0
 8002b4a:	460d      	mov	r5, r1
 8002b4c:	e760      	b.n	8002a10 <__ieee754_rem_pio2+0x1a0>
 8002b4e:	4b1c      	ldr	r3, [pc, #112]	; (8002bc0 <__ieee754_rem_pio2+0x350>)
 8002b50:	4598      	cmp	r8, r3
 8002b52:	dd37      	ble.n	8002bc4 <__ieee754_rem_pio2+0x354>
 8002b54:	ee10 2a10 	vmov	r2, s0
 8002b58:	462b      	mov	r3, r5
 8002b5a:	4620      	mov	r0, r4
 8002b5c:	4629      	mov	r1, r5
 8002b5e:	f7fd fb37 	bl	80001d0 <__aeabi_dsub>
 8002b62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8002b66:	e9ca 0100 	strd	r0, r1, [sl]
 8002b6a:	e695      	b.n	8002898 <__ieee754_rem_pio2+0x28>
 8002b6c:	f3af 8000 	nop.w
 8002b70:	54400000 	.word	0x54400000
 8002b74:	3ff921fb 	.word	0x3ff921fb
 8002b78:	1a626331 	.word	0x1a626331
 8002b7c:	3dd0b461 	.word	0x3dd0b461
 8002b80:	1a600000 	.word	0x1a600000
 8002b84:	3dd0b461 	.word	0x3dd0b461
 8002b88:	2e037073 	.word	0x2e037073
 8002b8c:	3ba3198a 	.word	0x3ba3198a
 8002b90:	6dc9c883 	.word	0x6dc9c883
 8002b94:	3fe45f30 	.word	0x3fe45f30
 8002b98:	2e000000 	.word	0x2e000000
 8002b9c:	3ba3198a 	.word	0x3ba3198a
 8002ba0:	252049c1 	.word	0x252049c1
 8002ba4:	397b839a 	.word	0x397b839a
 8002ba8:	3fe921fb 	.word	0x3fe921fb
 8002bac:	4002d97b 	.word	0x4002d97b
 8002bb0:	3ff921fb 	.word	0x3ff921fb
 8002bb4:	413921fb 	.word	0x413921fb
 8002bb8:	3fe00000 	.word	0x3fe00000
 8002bbc:	08003588 	.word	0x08003588
 8002bc0:	7fefffff 	.word	0x7fefffff
 8002bc4:	ea4f 5628 	mov.w	r6, r8, asr #20
 8002bc8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 8002bcc:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 8002bd0:	4620      	mov	r0, r4
 8002bd2:	460d      	mov	r5, r1
 8002bd4:	f7fd ff4e 	bl	8000a74 <__aeabi_d2iz>
 8002bd8:	f7fd fc48 	bl	800046c <__aeabi_i2d>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4620      	mov	r0, r4
 8002be2:	4629      	mov	r1, r5
 8002be4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002be8:	f7fd faf2 	bl	80001d0 <__aeabi_dsub>
 8002bec:	4b21      	ldr	r3, [pc, #132]	; (8002c74 <__ieee754_rem_pio2+0x404>)
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f7fd fca6 	bl	8000540 <__aeabi_dmul>
 8002bf4:	460d      	mov	r5, r1
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	f7fd ff3c 	bl	8000a74 <__aeabi_d2iz>
 8002bfc:	f7fd fc36 	bl	800046c <__aeabi_i2d>
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4620      	mov	r0, r4
 8002c06:	4629      	mov	r1, r5
 8002c08:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002c0c:	f7fd fae0 	bl	80001d0 <__aeabi_dsub>
 8002c10:	4b18      	ldr	r3, [pc, #96]	; (8002c74 <__ieee754_rem_pio2+0x404>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	f7fd fc94 	bl	8000540 <__aeabi_dmul>
 8002c18:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8002c1c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8002c20:	2703      	movs	r7, #3
 8002c22:	2400      	movs	r4, #0
 8002c24:	2500      	movs	r5, #0
 8002c26:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 8002c2a:	4622      	mov	r2, r4
 8002c2c:	462b      	mov	r3, r5
 8002c2e:	46b9      	mov	r9, r7
 8002c30:	3f01      	subs	r7, #1
 8002c32:	f7fd feed 	bl	8000a10 <__aeabi_dcmpeq>
 8002c36:	2800      	cmp	r0, #0
 8002c38:	d1f5      	bne.n	8002c26 <__ieee754_rem_pio2+0x3b6>
 8002c3a:	4b0f      	ldr	r3, [pc, #60]	; (8002c78 <__ieee754_rem_pio2+0x408>)
 8002c3c:	9301      	str	r3, [sp, #4]
 8002c3e:	2302      	movs	r3, #2
 8002c40:	9300      	str	r3, [sp, #0]
 8002c42:	4632      	mov	r2, r6
 8002c44:	464b      	mov	r3, r9
 8002c46:	4651      	mov	r1, sl
 8002c48:	a804      	add	r0, sp, #16
 8002c4a:	f000 f821 	bl	8002c90 <__kernel_rem_pio2>
 8002c4e:	9b02      	ldr	r3, [sp, #8]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	4683      	mov	fp, r0
 8002c54:	f6bf ae4c 	bge.w	80028f0 <__ieee754_rem_pio2+0x80>
 8002c58:	e9da 2100 	ldrd	r2, r1, [sl]
 8002c5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002c60:	e9ca 2300 	strd	r2, r3, [sl]
 8002c64:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8002c68:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002c6c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8002c70:	e73f      	b.n	8002af2 <__ieee754_rem_pio2+0x282>
 8002c72:	bf00      	nop
 8002c74:	41700000 	.word	0x41700000
 8002c78:	08003608 	.word	0x08003608

08002c7c <fabs>:
 8002c7c:	ec51 0b10 	vmov	r0, r1, d0
 8002c80:	ee10 2a10 	vmov	r2, s0
 8002c84:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002c88:	ec43 2b10 	vmov	d0, r2, r3
 8002c8c:	4770      	bx	lr
	...

08002c90 <__kernel_rem_pio2>:
 8002c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c94:	ed2d 8b02 	vpush	{d8}
 8002c98:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8002c9c:	f112 0f14 	cmn.w	r2, #20
 8002ca0:	9306      	str	r3, [sp, #24]
 8002ca2:	9104      	str	r1, [sp, #16]
 8002ca4:	4bc2      	ldr	r3, [pc, #776]	; (8002fb0 <__kernel_rem_pio2+0x320>)
 8002ca6:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8002ca8:	9009      	str	r0, [sp, #36]	; 0x24
 8002caa:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	9b06      	ldr	r3, [sp, #24]
 8002cb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8002cb6:	bfa8      	it	ge
 8002cb8:	1ed4      	subge	r4, r2, #3
 8002cba:	9305      	str	r3, [sp, #20]
 8002cbc:	bfb2      	itee	lt
 8002cbe:	2400      	movlt	r4, #0
 8002cc0:	2318      	movge	r3, #24
 8002cc2:	fb94 f4f3 	sdivge	r4, r4, r3
 8002cc6:	f06f 0317 	mvn.w	r3, #23
 8002cca:	fb04 3303 	mla	r3, r4, r3, r3
 8002cce:	eb03 0a02 	add.w	sl, r3, r2
 8002cd2:	9b00      	ldr	r3, [sp, #0]
 8002cd4:	9a05      	ldr	r2, [sp, #20]
 8002cd6:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 8002fa0 <__kernel_rem_pio2+0x310>
 8002cda:	eb03 0802 	add.w	r8, r3, r2
 8002cde:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002ce0:	1aa7      	subs	r7, r4, r2
 8002ce2:	ae20      	add	r6, sp, #128	; 0x80
 8002ce4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002ce8:	2500      	movs	r5, #0
 8002cea:	4545      	cmp	r5, r8
 8002cec:	dd13      	ble.n	8002d16 <__kernel_rem_pio2+0x86>
 8002cee:	9b06      	ldr	r3, [sp, #24]
 8002cf0:	aa20      	add	r2, sp, #128	; 0x80
 8002cf2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8002cf6:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8002cfa:	f04f 0800 	mov.w	r8, #0
 8002cfe:	9b00      	ldr	r3, [sp, #0]
 8002d00:	4598      	cmp	r8, r3
 8002d02:	dc31      	bgt.n	8002d68 <__kernel_rem_pio2+0xd8>
 8002d04:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 8002fa0 <__kernel_rem_pio2+0x310>
 8002d08:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8002d0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8002d10:	462f      	mov	r7, r5
 8002d12:	2600      	movs	r6, #0
 8002d14:	e01b      	b.n	8002d4e <__kernel_rem_pio2+0xbe>
 8002d16:	42ef      	cmn	r7, r5
 8002d18:	d407      	bmi.n	8002d2a <__kernel_rem_pio2+0x9a>
 8002d1a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002d1e:	f7fd fba5 	bl	800046c <__aeabi_i2d>
 8002d22:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002d26:	3501      	adds	r5, #1
 8002d28:	e7df      	b.n	8002cea <__kernel_rem_pio2+0x5a>
 8002d2a:	ec51 0b18 	vmov	r0, r1, d8
 8002d2e:	e7f8      	b.n	8002d22 <__kernel_rem_pio2+0x92>
 8002d30:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002d34:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8002d38:	f7fd fc02 	bl	8000540 <__aeabi_dmul>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d44:	f7fd fa46 	bl	80001d4 <__adddf3>
 8002d48:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002d4c:	3601      	adds	r6, #1
 8002d4e:	9b05      	ldr	r3, [sp, #20]
 8002d50:	429e      	cmp	r6, r3
 8002d52:	f1a7 0708 	sub.w	r7, r7, #8
 8002d56:	ddeb      	ble.n	8002d30 <__kernel_rem_pio2+0xa0>
 8002d58:	ed9d 7b02 	vldr	d7, [sp, #8]
 8002d5c:	f108 0801 	add.w	r8, r8, #1
 8002d60:	ecab 7b02 	vstmia	fp!, {d7}
 8002d64:	3508      	adds	r5, #8
 8002d66:	e7ca      	b.n	8002cfe <__kernel_rem_pio2+0x6e>
 8002d68:	9b00      	ldr	r3, [sp, #0]
 8002d6a:	aa0c      	add	r2, sp, #48	; 0x30
 8002d6c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002d70:	930b      	str	r3, [sp, #44]	; 0x2c
 8002d72:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002d74:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002d78:	9c00      	ldr	r4, [sp, #0]
 8002d7a:	930a      	str	r3, [sp, #40]	; 0x28
 8002d7c:	00e3      	lsls	r3, r4, #3
 8002d7e:	9308      	str	r3, [sp, #32]
 8002d80:	ab98      	add	r3, sp, #608	; 0x260
 8002d82:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8002d86:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8002d8a:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 8002d8e:	ab70      	add	r3, sp, #448	; 0x1c0
 8002d90:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8002d94:	46c3      	mov	fp, r8
 8002d96:	46a1      	mov	r9, r4
 8002d98:	f1b9 0f00 	cmp.w	r9, #0
 8002d9c:	f1a5 0508 	sub.w	r5, r5, #8
 8002da0:	dc77      	bgt.n	8002e92 <__kernel_rem_pio2+0x202>
 8002da2:	ec47 6b10 	vmov	d0, r6, r7
 8002da6:	4650      	mov	r0, sl
 8002da8:	f000 fac2 	bl	8003330 <scalbn>
 8002dac:	ec57 6b10 	vmov	r6, r7, d0
 8002db0:	2200      	movs	r2, #0
 8002db2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002db6:	ee10 0a10 	vmov	r0, s0
 8002dba:	4639      	mov	r1, r7
 8002dbc:	f7fd fbc0 	bl	8000540 <__aeabi_dmul>
 8002dc0:	ec41 0b10 	vmov	d0, r0, r1
 8002dc4:	f000 fb34 	bl	8003430 <floor>
 8002dc8:	4b7a      	ldr	r3, [pc, #488]	; (8002fb4 <__kernel_rem_pio2+0x324>)
 8002dca:	ec51 0b10 	vmov	r0, r1, d0
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f7fd fbb6 	bl	8000540 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4630      	mov	r0, r6
 8002dda:	4639      	mov	r1, r7
 8002ddc:	f7fd f9f8 	bl	80001d0 <__aeabi_dsub>
 8002de0:	460f      	mov	r7, r1
 8002de2:	4606      	mov	r6, r0
 8002de4:	f7fd fe46 	bl	8000a74 <__aeabi_d2iz>
 8002de8:	9002      	str	r0, [sp, #8]
 8002dea:	f7fd fb3f 	bl	800046c <__aeabi_i2d>
 8002dee:	4602      	mov	r2, r0
 8002df0:	460b      	mov	r3, r1
 8002df2:	4630      	mov	r0, r6
 8002df4:	4639      	mov	r1, r7
 8002df6:	f7fd f9eb 	bl	80001d0 <__aeabi_dsub>
 8002dfa:	f1ba 0f00 	cmp.w	sl, #0
 8002dfe:	4606      	mov	r6, r0
 8002e00:	460f      	mov	r7, r1
 8002e02:	dd6d      	ble.n	8002ee0 <__kernel_rem_pio2+0x250>
 8002e04:	1e61      	subs	r1, r4, #1
 8002e06:	ab0c      	add	r3, sp, #48	; 0x30
 8002e08:	9d02      	ldr	r5, [sp, #8]
 8002e0a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002e0e:	f1ca 0018 	rsb	r0, sl, #24
 8002e12:	fa43 f200 	asr.w	r2, r3, r0
 8002e16:	4415      	add	r5, r2
 8002e18:	4082      	lsls	r2, r0
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	aa0c      	add	r2, sp, #48	; 0x30
 8002e1e:	9502      	str	r5, [sp, #8]
 8002e20:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8002e24:	f1ca 0217 	rsb	r2, sl, #23
 8002e28:	fa43 fb02 	asr.w	fp, r3, r2
 8002e2c:	f1bb 0f00 	cmp.w	fp, #0
 8002e30:	dd65      	ble.n	8002efe <__kernel_rem_pio2+0x26e>
 8002e32:	9b02      	ldr	r3, [sp, #8]
 8002e34:	2200      	movs	r2, #0
 8002e36:	3301      	adds	r3, #1
 8002e38:	9302      	str	r3, [sp, #8]
 8002e3a:	4615      	mov	r5, r2
 8002e3c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002e40:	4294      	cmp	r4, r2
 8002e42:	f300 809f 	bgt.w	8002f84 <__kernel_rem_pio2+0x2f4>
 8002e46:	f1ba 0f00 	cmp.w	sl, #0
 8002e4a:	dd07      	ble.n	8002e5c <__kernel_rem_pio2+0x1cc>
 8002e4c:	f1ba 0f01 	cmp.w	sl, #1
 8002e50:	f000 80c1 	beq.w	8002fd6 <__kernel_rem_pio2+0x346>
 8002e54:	f1ba 0f02 	cmp.w	sl, #2
 8002e58:	f000 80c7 	beq.w	8002fea <__kernel_rem_pio2+0x35a>
 8002e5c:	f1bb 0f02 	cmp.w	fp, #2
 8002e60:	d14d      	bne.n	8002efe <__kernel_rem_pio2+0x26e>
 8002e62:	4632      	mov	r2, r6
 8002e64:	463b      	mov	r3, r7
 8002e66:	4954      	ldr	r1, [pc, #336]	; (8002fb8 <__kernel_rem_pio2+0x328>)
 8002e68:	2000      	movs	r0, #0
 8002e6a:	f7fd f9b1 	bl	80001d0 <__aeabi_dsub>
 8002e6e:	4606      	mov	r6, r0
 8002e70:	460f      	mov	r7, r1
 8002e72:	2d00      	cmp	r5, #0
 8002e74:	d043      	beq.n	8002efe <__kernel_rem_pio2+0x26e>
 8002e76:	4650      	mov	r0, sl
 8002e78:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8002fa8 <__kernel_rem_pio2+0x318>
 8002e7c:	f000 fa58 	bl	8003330 <scalbn>
 8002e80:	4630      	mov	r0, r6
 8002e82:	4639      	mov	r1, r7
 8002e84:	ec53 2b10 	vmov	r2, r3, d0
 8002e88:	f7fd f9a2 	bl	80001d0 <__aeabi_dsub>
 8002e8c:	4606      	mov	r6, r0
 8002e8e:	460f      	mov	r7, r1
 8002e90:	e035      	b.n	8002efe <__kernel_rem_pio2+0x26e>
 8002e92:	4b4a      	ldr	r3, [pc, #296]	; (8002fbc <__kernel_rem_pio2+0x32c>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	4630      	mov	r0, r6
 8002e98:	4639      	mov	r1, r7
 8002e9a:	f7fd fb51 	bl	8000540 <__aeabi_dmul>
 8002e9e:	f7fd fde9 	bl	8000a74 <__aeabi_d2iz>
 8002ea2:	f7fd fae3 	bl	800046c <__aeabi_i2d>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	ec43 2b18 	vmov	d8, r2, r3
 8002eae:	4b44      	ldr	r3, [pc, #272]	; (8002fc0 <__kernel_rem_pio2+0x330>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	f7fd fb45 	bl	8000540 <__aeabi_dmul>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4630      	mov	r0, r6
 8002ebc:	4639      	mov	r1, r7
 8002ebe:	f7fd f987 	bl	80001d0 <__aeabi_dsub>
 8002ec2:	f7fd fdd7 	bl	8000a74 <__aeabi_d2iz>
 8002ec6:	e9d5 2300 	ldrd	r2, r3, [r5]
 8002eca:	f84b 0b04 	str.w	r0, [fp], #4
 8002ece:	ec51 0b18 	vmov	r0, r1, d8
 8002ed2:	f7fd f97f 	bl	80001d4 <__adddf3>
 8002ed6:	f109 39ff 	add.w	r9, r9, #4294967295
 8002eda:	4606      	mov	r6, r0
 8002edc:	460f      	mov	r7, r1
 8002ede:	e75b      	b.n	8002d98 <__kernel_rem_pio2+0x108>
 8002ee0:	d106      	bne.n	8002ef0 <__kernel_rem_pio2+0x260>
 8002ee2:	1e63      	subs	r3, r4, #1
 8002ee4:	aa0c      	add	r2, sp, #48	; 0x30
 8002ee6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002eea:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8002eee:	e79d      	b.n	8002e2c <__kernel_rem_pio2+0x19c>
 8002ef0:	4b34      	ldr	r3, [pc, #208]	; (8002fc4 <__kernel_rem_pio2+0x334>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	f7fd fdaa 	bl	8000a4c <__aeabi_dcmpge>
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	d140      	bne.n	8002f7e <__kernel_rem_pio2+0x2ee>
 8002efc:	4683      	mov	fp, r0
 8002efe:	2200      	movs	r2, #0
 8002f00:	2300      	movs	r3, #0
 8002f02:	4630      	mov	r0, r6
 8002f04:	4639      	mov	r1, r7
 8002f06:	f7fd fd83 	bl	8000a10 <__aeabi_dcmpeq>
 8002f0a:	2800      	cmp	r0, #0
 8002f0c:	f000 80c1 	beq.w	8003092 <__kernel_rem_pio2+0x402>
 8002f10:	1e65      	subs	r5, r4, #1
 8002f12:	462b      	mov	r3, r5
 8002f14:	2200      	movs	r2, #0
 8002f16:	9900      	ldr	r1, [sp, #0]
 8002f18:	428b      	cmp	r3, r1
 8002f1a:	da6d      	bge.n	8002ff8 <__kernel_rem_pio2+0x368>
 8002f1c:	2a00      	cmp	r2, #0
 8002f1e:	f000 808a 	beq.w	8003036 <__kernel_rem_pio2+0x3a6>
 8002f22:	ab0c      	add	r3, sp, #48	; 0x30
 8002f24:	f1aa 0a18 	sub.w	sl, sl, #24
 8002f28:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80ae 	beq.w	800308e <__kernel_rem_pio2+0x3fe>
 8002f32:	4650      	mov	r0, sl
 8002f34:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8002fa8 <__kernel_rem_pio2+0x318>
 8002f38:	f000 f9fa 	bl	8003330 <scalbn>
 8002f3c:	1c6b      	adds	r3, r5, #1
 8002f3e:	00da      	lsls	r2, r3, #3
 8002f40:	9205      	str	r2, [sp, #20]
 8002f42:	ec57 6b10 	vmov	r6, r7, d0
 8002f46:	aa70      	add	r2, sp, #448	; 0x1c0
 8002f48:	f8df 9070 	ldr.w	r9, [pc, #112]	; 8002fbc <__kernel_rem_pio2+0x32c>
 8002f4c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8002f50:	462c      	mov	r4, r5
 8002f52:	f04f 0800 	mov.w	r8, #0
 8002f56:	2c00      	cmp	r4, #0
 8002f58:	f280 80d4 	bge.w	8003104 <__kernel_rem_pio2+0x474>
 8002f5c:	462c      	mov	r4, r5
 8002f5e:	2c00      	cmp	r4, #0
 8002f60:	f2c0 8102 	blt.w	8003168 <__kernel_rem_pio2+0x4d8>
 8002f64:	4b18      	ldr	r3, [pc, #96]	; (8002fc8 <__kernel_rem_pio2+0x338>)
 8002f66:	461e      	mov	r6, r3
 8002f68:	ab70      	add	r3, sp, #448	; 0x1c0
 8002f6a:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8002f6e:	1b2b      	subs	r3, r5, r4
 8002f70:	f04f 0900 	mov.w	r9, #0
 8002f74:	f04f 0a00 	mov.w	sl, #0
 8002f78:	2700      	movs	r7, #0
 8002f7a:	9306      	str	r3, [sp, #24]
 8002f7c:	e0e6      	b.n	800314c <__kernel_rem_pio2+0x4bc>
 8002f7e:	f04f 0b02 	mov.w	fp, #2
 8002f82:	e756      	b.n	8002e32 <__kernel_rem_pio2+0x1a2>
 8002f84:	f8d8 3000 	ldr.w	r3, [r8]
 8002f88:	bb05      	cbnz	r5, 8002fcc <__kernel_rem_pio2+0x33c>
 8002f8a:	b123      	cbz	r3, 8002f96 <__kernel_rem_pio2+0x306>
 8002f8c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002f90:	f8c8 3000 	str.w	r3, [r8]
 8002f94:	2301      	movs	r3, #1
 8002f96:	3201      	adds	r2, #1
 8002f98:	f108 0804 	add.w	r8, r8, #4
 8002f9c:	461d      	mov	r5, r3
 8002f9e:	e74f      	b.n	8002e40 <__kernel_rem_pio2+0x1b0>
	...
 8002fac:	3ff00000 	.word	0x3ff00000
 8002fb0:	08003750 	.word	0x08003750
 8002fb4:	40200000 	.word	0x40200000
 8002fb8:	3ff00000 	.word	0x3ff00000
 8002fbc:	3e700000 	.word	0x3e700000
 8002fc0:	41700000 	.word	0x41700000
 8002fc4:	3fe00000 	.word	0x3fe00000
 8002fc8:	08003710 	.word	0x08003710
 8002fcc:	1acb      	subs	r3, r1, r3
 8002fce:	f8c8 3000 	str.w	r3, [r8]
 8002fd2:	462b      	mov	r3, r5
 8002fd4:	e7df      	b.n	8002f96 <__kernel_rem_pio2+0x306>
 8002fd6:	1e62      	subs	r2, r4, #1
 8002fd8:	ab0c      	add	r3, sp, #48	; 0x30
 8002fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fde:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002fe2:	a90c      	add	r1, sp, #48	; 0x30
 8002fe4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002fe8:	e738      	b.n	8002e5c <__kernel_rem_pio2+0x1cc>
 8002fea:	1e62      	subs	r2, r4, #1
 8002fec:	ab0c      	add	r3, sp, #48	; 0x30
 8002fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ff2:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002ff6:	e7f4      	b.n	8002fe2 <__kernel_rem_pio2+0x352>
 8002ff8:	a90c      	add	r1, sp, #48	; 0x30
 8002ffa:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002ffe:	3b01      	subs	r3, #1
 8003000:	430a      	orrs	r2, r1
 8003002:	e788      	b.n	8002f16 <__kernel_rem_pio2+0x286>
 8003004:	3301      	adds	r3, #1
 8003006:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800300a:	2900      	cmp	r1, #0
 800300c:	d0fa      	beq.n	8003004 <__kernel_rem_pio2+0x374>
 800300e:	9a08      	ldr	r2, [sp, #32]
 8003010:	f502 7218 	add.w	r2, r2, #608	; 0x260
 8003014:	446a      	add	r2, sp
 8003016:	3a98      	subs	r2, #152	; 0x98
 8003018:	9208      	str	r2, [sp, #32]
 800301a:	9a06      	ldr	r2, [sp, #24]
 800301c:	a920      	add	r1, sp, #128	; 0x80
 800301e:	18a2      	adds	r2, r4, r2
 8003020:	18e3      	adds	r3, r4, r3
 8003022:	f104 0801 	add.w	r8, r4, #1
 8003026:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800302a:	9302      	str	r3, [sp, #8]
 800302c:	9b02      	ldr	r3, [sp, #8]
 800302e:	4543      	cmp	r3, r8
 8003030:	da04      	bge.n	800303c <__kernel_rem_pio2+0x3ac>
 8003032:	461c      	mov	r4, r3
 8003034:	e6a2      	b.n	8002d7c <__kernel_rem_pio2+0xec>
 8003036:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8003038:	2301      	movs	r3, #1
 800303a:	e7e4      	b.n	8003006 <__kernel_rem_pio2+0x376>
 800303c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800303e:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8003042:	f7fd fa13 	bl	800046c <__aeabi_i2d>
 8003046:	e8e5 0102 	strd	r0, r1, [r5], #8
 800304a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800304c:	46ab      	mov	fp, r5
 800304e:	461c      	mov	r4, r3
 8003050:	f04f 0900 	mov.w	r9, #0
 8003054:	2600      	movs	r6, #0
 8003056:	2700      	movs	r7, #0
 8003058:	9b05      	ldr	r3, [sp, #20]
 800305a:	4599      	cmp	r9, r3
 800305c:	dd06      	ble.n	800306c <__kernel_rem_pio2+0x3dc>
 800305e:	9b08      	ldr	r3, [sp, #32]
 8003060:	e8e3 6702 	strd	r6, r7, [r3], #8
 8003064:	f108 0801 	add.w	r8, r8, #1
 8003068:	9308      	str	r3, [sp, #32]
 800306a:	e7df      	b.n	800302c <__kernel_rem_pio2+0x39c>
 800306c:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8003070:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8003074:	f7fd fa64 	bl	8000540 <__aeabi_dmul>
 8003078:	4602      	mov	r2, r0
 800307a:	460b      	mov	r3, r1
 800307c:	4630      	mov	r0, r6
 800307e:	4639      	mov	r1, r7
 8003080:	f7fd f8a8 	bl	80001d4 <__adddf3>
 8003084:	f109 0901 	add.w	r9, r9, #1
 8003088:	4606      	mov	r6, r0
 800308a:	460f      	mov	r7, r1
 800308c:	e7e4      	b.n	8003058 <__kernel_rem_pio2+0x3c8>
 800308e:	3d01      	subs	r5, #1
 8003090:	e747      	b.n	8002f22 <__kernel_rem_pio2+0x292>
 8003092:	ec47 6b10 	vmov	d0, r6, r7
 8003096:	f1ca 0000 	rsb	r0, sl, #0
 800309a:	f000 f949 	bl	8003330 <scalbn>
 800309e:	ec57 6b10 	vmov	r6, r7, d0
 80030a2:	4ba0      	ldr	r3, [pc, #640]	; (8003324 <__kernel_rem_pio2+0x694>)
 80030a4:	ee10 0a10 	vmov	r0, s0
 80030a8:	2200      	movs	r2, #0
 80030aa:	4639      	mov	r1, r7
 80030ac:	f7fd fcce 	bl	8000a4c <__aeabi_dcmpge>
 80030b0:	b1f8      	cbz	r0, 80030f2 <__kernel_rem_pio2+0x462>
 80030b2:	4b9d      	ldr	r3, [pc, #628]	; (8003328 <__kernel_rem_pio2+0x698>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	4630      	mov	r0, r6
 80030b8:	4639      	mov	r1, r7
 80030ba:	f7fd fa41 	bl	8000540 <__aeabi_dmul>
 80030be:	f7fd fcd9 	bl	8000a74 <__aeabi_d2iz>
 80030c2:	4680      	mov	r8, r0
 80030c4:	f7fd f9d2 	bl	800046c <__aeabi_i2d>
 80030c8:	4b96      	ldr	r3, [pc, #600]	; (8003324 <__kernel_rem_pio2+0x694>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	f7fd fa38 	bl	8000540 <__aeabi_dmul>
 80030d0:	460b      	mov	r3, r1
 80030d2:	4602      	mov	r2, r0
 80030d4:	4639      	mov	r1, r7
 80030d6:	4630      	mov	r0, r6
 80030d8:	f7fd f87a 	bl	80001d0 <__aeabi_dsub>
 80030dc:	f7fd fcca 	bl	8000a74 <__aeabi_d2iz>
 80030e0:	1c65      	adds	r5, r4, #1
 80030e2:	ab0c      	add	r3, sp, #48	; 0x30
 80030e4:	f10a 0a18 	add.w	sl, sl, #24
 80030e8:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80030ec:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80030f0:	e71f      	b.n	8002f32 <__kernel_rem_pio2+0x2a2>
 80030f2:	4630      	mov	r0, r6
 80030f4:	4639      	mov	r1, r7
 80030f6:	f7fd fcbd 	bl	8000a74 <__aeabi_d2iz>
 80030fa:	ab0c      	add	r3, sp, #48	; 0x30
 80030fc:	4625      	mov	r5, r4
 80030fe:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8003102:	e716      	b.n	8002f32 <__kernel_rem_pio2+0x2a2>
 8003104:	ab0c      	add	r3, sp, #48	; 0x30
 8003106:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800310a:	f7fd f9af 	bl	800046c <__aeabi_i2d>
 800310e:	4632      	mov	r2, r6
 8003110:	463b      	mov	r3, r7
 8003112:	f7fd fa15 	bl	8000540 <__aeabi_dmul>
 8003116:	4642      	mov	r2, r8
 8003118:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 800311c:	464b      	mov	r3, r9
 800311e:	4630      	mov	r0, r6
 8003120:	4639      	mov	r1, r7
 8003122:	f7fd fa0d 	bl	8000540 <__aeabi_dmul>
 8003126:	3c01      	subs	r4, #1
 8003128:	4606      	mov	r6, r0
 800312a:	460f      	mov	r7, r1
 800312c:	e713      	b.n	8002f56 <__kernel_rem_pio2+0x2c6>
 800312e:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8003132:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8003136:	f7fd fa03 	bl	8000540 <__aeabi_dmul>
 800313a:	4602      	mov	r2, r0
 800313c:	460b      	mov	r3, r1
 800313e:	4648      	mov	r0, r9
 8003140:	4651      	mov	r1, sl
 8003142:	f7fd f847 	bl	80001d4 <__adddf3>
 8003146:	3701      	adds	r7, #1
 8003148:	4681      	mov	r9, r0
 800314a:	468a      	mov	sl, r1
 800314c:	9b00      	ldr	r3, [sp, #0]
 800314e:	429f      	cmp	r7, r3
 8003150:	dc02      	bgt.n	8003158 <__kernel_rem_pio2+0x4c8>
 8003152:	9b06      	ldr	r3, [sp, #24]
 8003154:	429f      	cmp	r7, r3
 8003156:	ddea      	ble.n	800312e <__kernel_rem_pio2+0x49e>
 8003158:	9a06      	ldr	r2, [sp, #24]
 800315a:	ab48      	add	r3, sp, #288	; 0x120
 800315c:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8003160:	e9c6 9a00 	strd	r9, sl, [r6]
 8003164:	3c01      	subs	r4, #1
 8003166:	e6fa      	b.n	8002f5e <__kernel_rem_pio2+0x2ce>
 8003168:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800316a:	2b02      	cmp	r3, #2
 800316c:	dc0b      	bgt.n	8003186 <__kernel_rem_pio2+0x4f6>
 800316e:	2b00      	cmp	r3, #0
 8003170:	dc39      	bgt.n	80031e6 <__kernel_rem_pio2+0x556>
 8003172:	d05d      	beq.n	8003230 <__kernel_rem_pio2+0x5a0>
 8003174:	9b02      	ldr	r3, [sp, #8]
 8003176:	f003 0007 	and.w	r0, r3, #7
 800317a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800317e:	ecbd 8b02 	vpop	{d8}
 8003182:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003186:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8003188:	2b03      	cmp	r3, #3
 800318a:	d1f3      	bne.n	8003174 <__kernel_rem_pio2+0x4e4>
 800318c:	9b05      	ldr	r3, [sp, #20]
 800318e:	9500      	str	r5, [sp, #0]
 8003190:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8003194:	eb0d 0403 	add.w	r4, sp, r3
 8003198:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 800319c:	46a2      	mov	sl, r4
 800319e:	9b00      	ldr	r3, [sp, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f1aa 0a08 	sub.w	sl, sl, #8
 80031a6:	dc69      	bgt.n	800327c <__kernel_rem_pio2+0x5ec>
 80031a8:	46aa      	mov	sl, r5
 80031aa:	f1ba 0f01 	cmp.w	sl, #1
 80031ae:	f1a4 0408 	sub.w	r4, r4, #8
 80031b2:	f300 8083 	bgt.w	80032bc <__kernel_rem_pio2+0x62c>
 80031b6:	9c05      	ldr	r4, [sp, #20]
 80031b8:	ab48      	add	r3, sp, #288	; 0x120
 80031ba:	441c      	add	r4, r3
 80031bc:	2000      	movs	r0, #0
 80031be:	2100      	movs	r1, #0
 80031c0:	2d01      	cmp	r5, #1
 80031c2:	f300 809a 	bgt.w	80032fa <__kernel_rem_pio2+0x66a>
 80031c6:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80031ca:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80031ce:	f1bb 0f00 	cmp.w	fp, #0
 80031d2:	f040 8098 	bne.w	8003306 <__kernel_rem_pio2+0x676>
 80031d6:	9b04      	ldr	r3, [sp, #16]
 80031d8:	e9c3 7800 	strd	r7, r8, [r3]
 80031dc:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80031e0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80031e4:	e7c6      	b.n	8003174 <__kernel_rem_pio2+0x4e4>
 80031e6:	9e05      	ldr	r6, [sp, #20]
 80031e8:	ab48      	add	r3, sp, #288	; 0x120
 80031ea:	441e      	add	r6, r3
 80031ec:	462c      	mov	r4, r5
 80031ee:	2000      	movs	r0, #0
 80031f0:	2100      	movs	r1, #0
 80031f2:	2c00      	cmp	r4, #0
 80031f4:	da33      	bge.n	800325e <__kernel_rem_pio2+0x5ce>
 80031f6:	f1bb 0f00 	cmp.w	fp, #0
 80031fa:	d036      	beq.n	800326a <__kernel_rem_pio2+0x5da>
 80031fc:	4602      	mov	r2, r0
 80031fe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003202:	9c04      	ldr	r4, [sp, #16]
 8003204:	e9c4 2300 	strd	r2, r3, [r4]
 8003208:	4602      	mov	r2, r0
 800320a:	460b      	mov	r3, r1
 800320c:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8003210:	f7fc ffde 	bl	80001d0 <__aeabi_dsub>
 8003214:	ae4a      	add	r6, sp, #296	; 0x128
 8003216:	2401      	movs	r4, #1
 8003218:	42a5      	cmp	r5, r4
 800321a:	da29      	bge.n	8003270 <__kernel_rem_pio2+0x5e0>
 800321c:	f1bb 0f00 	cmp.w	fp, #0
 8003220:	d002      	beq.n	8003228 <__kernel_rem_pio2+0x598>
 8003222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003226:	4619      	mov	r1, r3
 8003228:	9b04      	ldr	r3, [sp, #16]
 800322a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800322e:	e7a1      	b.n	8003174 <__kernel_rem_pio2+0x4e4>
 8003230:	9c05      	ldr	r4, [sp, #20]
 8003232:	ab48      	add	r3, sp, #288	; 0x120
 8003234:	441c      	add	r4, r3
 8003236:	2000      	movs	r0, #0
 8003238:	2100      	movs	r1, #0
 800323a:	2d00      	cmp	r5, #0
 800323c:	da09      	bge.n	8003252 <__kernel_rem_pio2+0x5c2>
 800323e:	f1bb 0f00 	cmp.w	fp, #0
 8003242:	d002      	beq.n	800324a <__kernel_rem_pio2+0x5ba>
 8003244:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003248:	4619      	mov	r1, r3
 800324a:	9b04      	ldr	r3, [sp, #16]
 800324c:	e9c3 0100 	strd	r0, r1, [r3]
 8003250:	e790      	b.n	8003174 <__kernel_rem_pio2+0x4e4>
 8003252:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8003256:	f7fc ffbd 	bl	80001d4 <__adddf3>
 800325a:	3d01      	subs	r5, #1
 800325c:	e7ed      	b.n	800323a <__kernel_rem_pio2+0x5aa>
 800325e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8003262:	f7fc ffb7 	bl	80001d4 <__adddf3>
 8003266:	3c01      	subs	r4, #1
 8003268:	e7c3      	b.n	80031f2 <__kernel_rem_pio2+0x562>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	e7c8      	b.n	8003202 <__kernel_rem_pio2+0x572>
 8003270:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8003274:	f7fc ffae 	bl	80001d4 <__adddf3>
 8003278:	3401      	adds	r4, #1
 800327a:	e7cd      	b.n	8003218 <__kernel_rem_pio2+0x588>
 800327c:	e9da 8900 	ldrd	r8, r9, [sl]
 8003280:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8003284:	9b00      	ldr	r3, [sp, #0]
 8003286:	3b01      	subs	r3, #1
 8003288:	9300      	str	r3, [sp, #0]
 800328a:	4632      	mov	r2, r6
 800328c:	463b      	mov	r3, r7
 800328e:	4640      	mov	r0, r8
 8003290:	4649      	mov	r1, r9
 8003292:	f7fc ff9f 	bl	80001d4 <__adddf3>
 8003296:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800329a:	4602      	mov	r2, r0
 800329c:	460b      	mov	r3, r1
 800329e:	4640      	mov	r0, r8
 80032a0:	4649      	mov	r1, r9
 80032a2:	f7fc ff95 	bl	80001d0 <__aeabi_dsub>
 80032a6:	4632      	mov	r2, r6
 80032a8:	463b      	mov	r3, r7
 80032aa:	f7fc ff93 	bl	80001d4 <__adddf3>
 80032ae:	ed9d 7b06 	vldr	d7, [sp, #24]
 80032b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80032b6:	ed8a 7b00 	vstr	d7, [sl]
 80032ba:	e770      	b.n	800319e <__kernel_rem_pio2+0x50e>
 80032bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 80032c0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80032c4:	4640      	mov	r0, r8
 80032c6:	4632      	mov	r2, r6
 80032c8:	463b      	mov	r3, r7
 80032ca:	4649      	mov	r1, r9
 80032cc:	f7fc ff82 	bl	80001d4 <__adddf3>
 80032d0:	e9cd 0100 	strd	r0, r1, [sp]
 80032d4:	4602      	mov	r2, r0
 80032d6:	460b      	mov	r3, r1
 80032d8:	4640      	mov	r0, r8
 80032da:	4649      	mov	r1, r9
 80032dc:	f7fc ff78 	bl	80001d0 <__aeabi_dsub>
 80032e0:	4632      	mov	r2, r6
 80032e2:	463b      	mov	r3, r7
 80032e4:	f7fc ff76 	bl	80001d4 <__adddf3>
 80032e8:	ed9d 7b00 	vldr	d7, [sp]
 80032ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80032f0:	ed84 7b00 	vstr	d7, [r4]
 80032f4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80032f8:	e757      	b.n	80031aa <__kernel_rem_pio2+0x51a>
 80032fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80032fe:	f7fc ff69 	bl	80001d4 <__adddf3>
 8003302:	3d01      	subs	r5, #1
 8003304:	e75c      	b.n	80031c0 <__kernel_rem_pio2+0x530>
 8003306:	9b04      	ldr	r3, [sp, #16]
 8003308:	9a04      	ldr	r2, [sp, #16]
 800330a:	601f      	str	r7, [r3, #0]
 800330c:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8003310:	605c      	str	r4, [r3, #4]
 8003312:	609d      	str	r5, [r3, #8]
 8003314:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8003318:	60d3      	str	r3, [r2, #12]
 800331a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800331e:	6110      	str	r0, [r2, #16]
 8003320:	6153      	str	r3, [r2, #20]
 8003322:	e727      	b.n	8003174 <__kernel_rem_pio2+0x4e4>
 8003324:	41700000 	.word	0x41700000
 8003328:	3e700000 	.word	0x3e700000
 800332c:	00000000 	.word	0x00000000

08003330 <scalbn>:
 8003330:	b570      	push	{r4, r5, r6, lr}
 8003332:	ec55 4b10 	vmov	r4, r5, d0
 8003336:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800333a:	4606      	mov	r6, r0
 800333c:	462b      	mov	r3, r5
 800333e:	b999      	cbnz	r1, 8003368 <scalbn+0x38>
 8003340:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003344:	4323      	orrs	r3, r4
 8003346:	d03f      	beq.n	80033c8 <scalbn+0x98>
 8003348:	4b35      	ldr	r3, [pc, #212]	; (8003420 <scalbn+0xf0>)
 800334a:	4629      	mov	r1, r5
 800334c:	ee10 0a10 	vmov	r0, s0
 8003350:	2200      	movs	r2, #0
 8003352:	f7fd f8f5 	bl	8000540 <__aeabi_dmul>
 8003356:	4b33      	ldr	r3, [pc, #204]	; (8003424 <scalbn+0xf4>)
 8003358:	429e      	cmp	r6, r3
 800335a:	4604      	mov	r4, r0
 800335c:	460d      	mov	r5, r1
 800335e:	da10      	bge.n	8003382 <scalbn+0x52>
 8003360:	a327      	add	r3, pc, #156	; (adr r3, 8003400 <scalbn+0xd0>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	e01f      	b.n	80033a8 <scalbn+0x78>
 8003368:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800336c:	4291      	cmp	r1, r2
 800336e:	d10c      	bne.n	800338a <scalbn+0x5a>
 8003370:	ee10 2a10 	vmov	r2, s0
 8003374:	4620      	mov	r0, r4
 8003376:	4629      	mov	r1, r5
 8003378:	f7fc ff2c 	bl	80001d4 <__adddf3>
 800337c:	4604      	mov	r4, r0
 800337e:	460d      	mov	r5, r1
 8003380:	e022      	b.n	80033c8 <scalbn+0x98>
 8003382:	460b      	mov	r3, r1
 8003384:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8003388:	3936      	subs	r1, #54	; 0x36
 800338a:	f24c 3250 	movw	r2, #50000	; 0xc350
 800338e:	4296      	cmp	r6, r2
 8003390:	dd0d      	ble.n	80033ae <scalbn+0x7e>
 8003392:	2d00      	cmp	r5, #0
 8003394:	a11c      	add	r1, pc, #112	; (adr r1, 8003408 <scalbn+0xd8>)
 8003396:	e9d1 0100 	ldrd	r0, r1, [r1]
 800339a:	da02      	bge.n	80033a2 <scalbn+0x72>
 800339c:	a11c      	add	r1, pc, #112	; (adr r1, 8003410 <scalbn+0xe0>)
 800339e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033a2:	a319      	add	r3, pc, #100	; (adr r3, 8003408 <scalbn+0xd8>)
 80033a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a8:	f7fd f8ca 	bl	8000540 <__aeabi_dmul>
 80033ac:	e7e6      	b.n	800337c <scalbn+0x4c>
 80033ae:	1872      	adds	r2, r6, r1
 80033b0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80033b4:	428a      	cmp	r2, r1
 80033b6:	dcec      	bgt.n	8003392 <scalbn+0x62>
 80033b8:	2a00      	cmp	r2, #0
 80033ba:	dd08      	ble.n	80033ce <scalbn+0x9e>
 80033bc:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80033c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80033c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80033c8:	ec45 4b10 	vmov	d0, r4, r5
 80033cc:	bd70      	pop	{r4, r5, r6, pc}
 80033ce:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80033d2:	da08      	bge.n	80033e6 <scalbn+0xb6>
 80033d4:	2d00      	cmp	r5, #0
 80033d6:	a10a      	add	r1, pc, #40	; (adr r1, 8003400 <scalbn+0xd0>)
 80033d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033dc:	dac0      	bge.n	8003360 <scalbn+0x30>
 80033de:	a10e      	add	r1, pc, #56	; (adr r1, 8003418 <scalbn+0xe8>)
 80033e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80033e4:	e7bc      	b.n	8003360 <scalbn+0x30>
 80033e6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80033ea:	3236      	adds	r2, #54	; 0x36
 80033ec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80033f0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80033f4:	4620      	mov	r0, r4
 80033f6:	4b0c      	ldr	r3, [pc, #48]	; (8003428 <scalbn+0xf8>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	e7d5      	b.n	80033a8 <scalbn+0x78>
 80033fc:	f3af 8000 	nop.w
 8003400:	c2f8f359 	.word	0xc2f8f359
 8003404:	01a56e1f 	.word	0x01a56e1f
 8003408:	8800759c 	.word	0x8800759c
 800340c:	7e37e43c 	.word	0x7e37e43c
 8003410:	8800759c 	.word	0x8800759c
 8003414:	fe37e43c 	.word	0xfe37e43c
 8003418:	c2f8f359 	.word	0xc2f8f359
 800341c:	81a56e1f 	.word	0x81a56e1f
 8003420:	43500000 	.word	0x43500000
 8003424:	ffff3cb0 	.word	0xffff3cb0
 8003428:	3c900000 	.word	0x3c900000
 800342c:	00000000 	.word	0x00000000

08003430 <floor>:
 8003430:	ec51 0b10 	vmov	r0, r1, d0
 8003434:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800343c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8003440:	2e13      	cmp	r6, #19
 8003442:	ee10 5a10 	vmov	r5, s0
 8003446:	ee10 8a10 	vmov	r8, s0
 800344a:	460c      	mov	r4, r1
 800344c:	dc31      	bgt.n	80034b2 <floor+0x82>
 800344e:	2e00      	cmp	r6, #0
 8003450:	da14      	bge.n	800347c <floor+0x4c>
 8003452:	a333      	add	r3, pc, #204	; (adr r3, 8003520 <floor+0xf0>)
 8003454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003458:	f7fc febc 	bl	80001d4 <__adddf3>
 800345c:	2200      	movs	r2, #0
 800345e:	2300      	movs	r3, #0
 8003460:	f7fd fafe 	bl	8000a60 <__aeabi_dcmpgt>
 8003464:	b138      	cbz	r0, 8003476 <floor+0x46>
 8003466:	2c00      	cmp	r4, #0
 8003468:	da53      	bge.n	8003512 <floor+0xe2>
 800346a:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800346e:	4325      	orrs	r5, r4
 8003470:	d052      	beq.n	8003518 <floor+0xe8>
 8003472:	4c2d      	ldr	r4, [pc, #180]	; (8003528 <floor+0xf8>)
 8003474:	2500      	movs	r5, #0
 8003476:	4621      	mov	r1, r4
 8003478:	4628      	mov	r0, r5
 800347a:	e024      	b.n	80034c6 <floor+0x96>
 800347c:	4f2b      	ldr	r7, [pc, #172]	; (800352c <floor+0xfc>)
 800347e:	4137      	asrs	r7, r6
 8003480:	ea01 0307 	and.w	r3, r1, r7
 8003484:	4303      	orrs	r3, r0
 8003486:	d01e      	beq.n	80034c6 <floor+0x96>
 8003488:	a325      	add	r3, pc, #148	; (adr r3, 8003520 <floor+0xf0>)
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	f7fc fea1 	bl	80001d4 <__adddf3>
 8003492:	2200      	movs	r2, #0
 8003494:	2300      	movs	r3, #0
 8003496:	f7fd fae3 	bl	8000a60 <__aeabi_dcmpgt>
 800349a:	2800      	cmp	r0, #0
 800349c:	d0eb      	beq.n	8003476 <floor+0x46>
 800349e:	2c00      	cmp	r4, #0
 80034a0:	bfbe      	ittt	lt
 80034a2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80034a6:	4133      	asrlt	r3, r6
 80034a8:	18e4      	addlt	r4, r4, r3
 80034aa:	ea24 0407 	bic.w	r4, r4, r7
 80034ae:	2500      	movs	r5, #0
 80034b0:	e7e1      	b.n	8003476 <floor+0x46>
 80034b2:	2e33      	cmp	r6, #51	; 0x33
 80034b4:	dd0b      	ble.n	80034ce <floor+0x9e>
 80034b6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80034ba:	d104      	bne.n	80034c6 <floor+0x96>
 80034bc:	ee10 2a10 	vmov	r2, s0
 80034c0:	460b      	mov	r3, r1
 80034c2:	f7fc fe87 	bl	80001d4 <__adddf3>
 80034c6:	ec41 0b10 	vmov	d0, r0, r1
 80034ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80034ce:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 80034d2:	f04f 37ff 	mov.w	r7, #4294967295
 80034d6:	40df      	lsrs	r7, r3
 80034d8:	4238      	tst	r0, r7
 80034da:	d0f4      	beq.n	80034c6 <floor+0x96>
 80034dc:	a310      	add	r3, pc, #64	; (adr r3, 8003520 <floor+0xf0>)
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f7fc fe77 	bl	80001d4 <__adddf3>
 80034e6:	2200      	movs	r2, #0
 80034e8:	2300      	movs	r3, #0
 80034ea:	f7fd fab9 	bl	8000a60 <__aeabi_dcmpgt>
 80034ee:	2800      	cmp	r0, #0
 80034f0:	d0c1      	beq.n	8003476 <floor+0x46>
 80034f2:	2c00      	cmp	r4, #0
 80034f4:	da0a      	bge.n	800350c <floor+0xdc>
 80034f6:	2e14      	cmp	r6, #20
 80034f8:	d101      	bne.n	80034fe <floor+0xce>
 80034fa:	3401      	adds	r4, #1
 80034fc:	e006      	b.n	800350c <floor+0xdc>
 80034fe:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8003502:	2301      	movs	r3, #1
 8003504:	40b3      	lsls	r3, r6
 8003506:	441d      	add	r5, r3
 8003508:	45a8      	cmp	r8, r5
 800350a:	d8f6      	bhi.n	80034fa <floor+0xca>
 800350c:	ea25 0507 	bic.w	r5, r5, r7
 8003510:	e7b1      	b.n	8003476 <floor+0x46>
 8003512:	2500      	movs	r5, #0
 8003514:	462c      	mov	r4, r5
 8003516:	e7ae      	b.n	8003476 <floor+0x46>
 8003518:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800351c:	e7ab      	b.n	8003476 <floor+0x46>
 800351e:	bf00      	nop
 8003520:	8800759c 	.word	0x8800759c
 8003524:	7e37e43c 	.word	0x7e37e43c
 8003528:	bff00000 	.word	0xbff00000
 800352c:	000fffff 	.word	0x000fffff

08003530 <_init>:
 8003530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003532:	bf00      	nop
 8003534:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003536:	bc08      	pop	{r3}
 8003538:	469e      	mov	lr, r3
 800353a:	4770      	bx	lr

0800353c <_fini>:
 800353c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800353e:	bf00      	nop
 8003540:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003542:	bc08      	pop	{r3}
 8003544:	469e      	mov	lr, r3
 8003546:	4770      	bx	lr
